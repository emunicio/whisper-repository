   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"openccms.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.rodata
  20              		.align	2
  23              	rreg_uriquery:
  24 0000 683D7563 		.ascii	"h=ucb\000"
  24      6200
  25 0006 0000     		.align	2
  28              	infoBoardname:
  29 0008 43433235 		.ascii	"CC2538\000"
  29      333800
  30 000f 00       		.align	2
  33              	infouCName:
  34 0010 43433235 		.ascii	"CC2538\000"
  34      333800
  35 0017 00       		.align	2
  38              	infoRadioName:
  39 0018 43433235 		.ascii	"CC2538 SoC\000"
  39      33382053 
  39      6F4300
  40 0023 00       		.align	2
  43              	infoStackName:
  44 0024 4F70656E 		.ascii	"OpenWSN \000"
  44      57534E20 
  44      00
  45              		.text
  46              		.align	2
  47              		.global	openccms_enc
  48              		.thumb
  49              		.thumb_func
  51              	openccms_enc:
  52              	.LFB0:
  53              		.file 1 "build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c"
   1:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** /**
   2:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** \brief AES CCMS implementation
   3:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****   
   4:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** \author Marcelo Barros de Almeida <marcelobarrosalmeida@gmail.com>, March 2015.
   5:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** \author Malisa Vucinic <malishav@gmail.com>, June 2017.
   6:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** */
   7:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** #include <string.h>
   8:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** #include <stdint.h>
   9:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** #include "opendefs.h"
  10:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** #include "openccms.h"
  11:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** #include "openaes.h"
  12:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** #include "cryptoengine.h"
  13:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** 
  14:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** //=========================== defines =========================================
  15:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** 
  16:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** 
  17:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** //=========================== prototypes ======================================
  18:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** 
  19:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** static owerror_t aes_cbc_mac(uint8_t* a, uint8_t len_a, uint8_t* m, uint8_t len_m, uint8_t* nonce, 
  20:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** static owerror_t aes_ctr_enc(uint8_t* m, uint8_t len_m, uint8_t* nonce, uint8_t key[16], uint8_t* m
  21:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** owerror_t aes_cbc_enc_raw(uint8_t* buffer, uint8_t len, uint8_t key[16], uint8_t iv[16]); 
  22:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** owerror_t aes_ctr_enc_raw(uint8_t* buffer, uint8_t len, uint8_t key[16], uint8_t iv[16]);
  23:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** static void inc_counter(uint8_t* counter); 
  24:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** 
  25:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** //=========================== public ==========================================
  26:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** 
  27:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** /**
  28:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** \brief CCM* forward transformation (i.e. encryption + authentication) implemented in software. Invo
  29:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** \param[in] a Pointer to the authentication only data.
  30:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** \param[in] len_a Length of authentication only data.
  31:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** \param[in,out] m Pointer to the data that is both authenticated and encrypted. Overwritten by
  32:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    ciphertext and the trailing authentication tag. Buffer must hold len_m + CBC_MAC_SIZE.
  33:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** \param[in,out] len_m Length of data that is both authenticated and encrypted. Accounts for
  34:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    the added authentication tag of len_mac octets on return.
  35:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** \param[in] nonce Buffer containing nonce (13 octets).
  36:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** \param[in] l CCM parameter L that allows selection of different nonce length. This implementation
  37:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    supports l = 2 (i.e. 13 octet long nonce) only.
  38:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** \param[in] key Buffer containing the secret key (16 octets).
  39:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** \param[in] len_mac Length of the authentication tag.
  40:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** 
  41:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** \returns E_SUCCESS when the generation was successful, E_FAIL otherwise. 
  42:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** */
  43:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** owerror_t openccms_enc(uint8_t* a,
  44:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****          uint8_t len_a,
  45:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****          uint8_t* m,
  46:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****          uint8_t* len_m,
  47:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****          uint8_t* nonce,
  48:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****          uint8_t l,
  49:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****          uint8_t key[16],
  50:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****          uint8_t len_mac) {
  54              		.loc 1 50 0
  55              		.cfi_startproc
  56              		@ args = 16, pretend = 0, frame = 32
  57              		@ frame_needed = 1, uses_anonymous_args = 0
  58 0000 80B5     		push	{r7, lr}
  59              		.cfi_def_cfa_offset 8
  60              		.cfi_offset 7, -8
  61              		.cfi_offset 14, -4
  62 0002 8EB0     		sub	sp, sp, #56
  63              		.cfi_def_cfa_offset 64
  64 0004 06AF     		add	r7, sp, #24
  65              		.cfi_def_cfa 7, 40
  66 0006 F860     		str	r0, [r7, #12]
  67 0008 7A60     		str	r2, [r7, #4]
  68 000a 3B60     		str	r3, [r7]
  69 000c 0B46     		mov	r3, r1
  70 000e FB72     		strb	r3, [r7, #11]
  51:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** 
  52:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    uint8_t mac[CBC_MAX_MAC_SIZE];
  53:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** 
  54:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    if ((len_mac > CBC_MAX_MAC_SIZE) || (l != 2)) {
  71              		.loc 1 54 0
  72 0010 97F83430 		ldrb	r3, [r7, #52]	@ zero_extendqisi2
  73 0014 102B     		cmp	r3, #16
  74 0016 03D8     		bhi	.L2
  75              		.loc 1 54 0 is_stmt 0 discriminator 1
  76 0018 97F82C30 		ldrb	r3, [r7, #44]	@ zero_extendqisi2
  77 001c 022B     		cmp	r3, #2
  78 001e 01D0     		beq	.L3
  79              	.L2:
  55:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****       return E_FAIL;
  80              		.loc 1 55 0 is_stmt 1
  81 0020 0123     		movs	r3, #1
  82 0022 41E0     		b	.L6
  83              	.L3:
  56:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    }
  57:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** 
  58:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    if (aes_cbc_mac(a, len_a, m, *len_m, nonce, key, mac, len_mac, l) == E_SUCCESS) {
  84              		.loc 1 58 0
  85 0024 3B68     		ldr	r3, [r7]
  86 0026 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
  87 0028 F97A     		ldrb	r1, [r7, #11]	@ zero_extendqisi2
  88 002a 97F82C30 		ldrb	r3, [r7, #44]	@ zero_extendqisi2
  89 002e 0493     		str	r3, [sp, #16]
  90 0030 97F83430 		ldrb	r3, [r7, #52]	@ zero_extendqisi2
  91 0034 0393     		str	r3, [sp, #12]
  92 0036 07F11003 		add	r3, r7, #16
  93 003a 0293     		str	r3, [sp, #8]
  94 003c 3B6B     		ldr	r3, [r7, #48]
  95 003e 0193     		str	r3, [sp, #4]
  96 0040 BB6A     		ldr	r3, [r7, #40]
  97 0042 0093     		str	r3, [sp]
  98 0044 1346     		mov	r3, r2
  99 0046 7A68     		ldr	r2, [r7, #4]
 100 0048 F868     		ldr	r0, [r7, #12]
 101 004a 00F095F8 		bl	aes_cbc_mac
 102 004e 0346     		mov	r3, r0
 103 0050 002B     		cmp	r3, #0
 104 0052 28D1     		bne	.L5
  59:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****       if (aes_ctr_enc(m, *len_m, nonce, key, mac, len_mac, l) == E_SUCCESS) {
 105              		.loc 1 59 0
 106 0054 3B68     		ldr	r3, [r7]
 107 0056 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 108 0058 97F82C30 		ldrb	r3, [r7, #44]	@ zero_extendqisi2
 109 005c 0293     		str	r3, [sp, #8]
 110 005e 97F83430 		ldrb	r3, [r7, #52]	@ zero_extendqisi2
 111 0062 0193     		str	r3, [sp, #4]
 112 0064 07F11003 		add	r3, r7, #16
 113 0068 0093     		str	r3, [sp]
 114 006a 3B6B     		ldr	r3, [r7, #48]
 115 006c BA6A     		ldr	r2, [r7, #40]
 116 006e 7868     		ldr	r0, [r7, #4]
 117 0070 00F0A6F9 		bl	aes_ctr_enc
 118 0074 0346     		mov	r3, r0
 119 0076 002B     		cmp	r3, #0
 120 0078 15D1     		bne	.L5
  60:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****          memcpy(&m[*len_m], mac, len_mac);
 121              		.loc 1 60 0
 122 007a 3B68     		ldr	r3, [r7]
 123 007c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 124 007e 1A46     		mov	r2, r3
 125 0080 7B68     		ldr	r3, [r7, #4]
 126 0082 1344     		add	r3, r3, r2
 127 0084 97F83420 		ldrb	r2, [r7, #52]	@ zero_extendqisi2
 128 0088 07F11001 		add	r1, r7, #16
 129 008c 1846     		mov	r0, r3
 130 008e FFF7FEFF 		bl	memcpy
  61:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****          *len_m += len_mac;
 131              		.loc 1 61 0
 132 0092 3B68     		ldr	r3, [r7]
 133 0094 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 134 0096 97F83430 		ldrb	r3, [r7, #52]
 135 009a 1344     		add	r3, r3, r2
 136 009c DAB2     		uxtb	r2, r3
 137 009e 3B68     		ldr	r3, [r7]
 138 00a0 1A70     		strb	r2, [r3]
  62:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** 
  63:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****          return E_SUCCESS;
 139              		.loc 1 63 0
 140 00a2 0023     		movs	r3, #0
 141 00a4 00E0     		b	.L6
 142              	.L5:
  64:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****       }
  65:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    }
  66:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** 
  67:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    return E_FAIL;
 143              		.loc 1 67 0
 144 00a6 0123     		movs	r3, #1
 145              	.L6:
  68:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** }
 146              		.loc 1 68 0 discriminator 1
 147 00a8 1846     		mov	r0, r3
 148 00aa 2037     		adds	r7, r7, #32
 149              		.cfi_def_cfa_offset 8
 150 00ac BD46     		mov	sp, r7
 151              		.cfi_def_cfa_register 13
 152              		@ sp needed
 153 00ae 80BD     		pop	{r7, pc}
 154              		.cfi_endproc
 155              	.LFE0:
 157              		.align	2
 158              		.global	openccms_dec
 159              		.thumb
 160              		.thumb_func
 162              	openccms_dec:
 163              	.LFB1:
  69:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** 
  70:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** /**
  71:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** \brief CCM* inverse transformation (i.e. decryption + tag verification) implemented in software. In
  72:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** \param[in] a Pointer to the authentication only data.
  73:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** \param[in] len_a Length of authentication only data.
  74:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** \param[in,out] m Pointer to the data that is both authenticated and encrypted. Overwritten by
  75:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    plaintext.
  76:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** \param[in,out] len_m Length of data that is both authenticated and encrypted, including the
  77:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    trailing authentication tag. On return it is reduced for len_mac octets to account for the
  78:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    removed authentication tag.
  79:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** \param[in] nonce Buffer containing nonce (13 octets).
  80:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** \param[in] l CCM parameter L that allows selection of different nonce length. This implementation
  81:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    supports l = 2 (i.e. 13 octet long nonce) only.
  82:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** \param[in] key Buffer containing the secret key (16 octets).
  83:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** \param[in] len_mac Length of the authentication tag.
  84:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** 
  85:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** \returns E_SUCCESS when decryption and verification were successful, E_FAIL otherwise. 
  86:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** */
  87:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** owerror_t openccms_dec(uint8_t* a,
  88:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****          uint8_t len_a,
  89:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****          uint8_t* m,
  90:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****          uint8_t* len_m,
  91:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****          uint8_t* nonce,
  92:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****          uint8_t l,
  93:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****          uint8_t key[16],
  94:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****          uint8_t len_mac) {
 164              		.loc 1 94 0
 165              		.cfi_startproc
 166              		@ args = 16, pretend = 0, frame = 48
 167              		@ frame_needed = 1, uses_anonymous_args = 0
 168 00b0 80B5     		push	{r7, lr}
 169              		.cfi_def_cfa_offset 8
 170              		.cfi_offset 7, -8
 171              		.cfi_offset 14, -4
 172 00b2 92B0     		sub	sp, sp, #72
 173              		.cfi_def_cfa_offset 80
 174 00b4 06AF     		add	r7, sp, #24
 175              		.cfi_def_cfa 7, 56
 176 00b6 F860     		str	r0, [r7, #12]
 177 00b8 7A60     		str	r2, [r7, #4]
 178 00ba 3B60     		str	r3, [r7]
 179 00bc 0B46     		mov	r3, r1
 180 00be FB72     		strb	r3, [r7, #11]
  95:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** 
  96:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    uint8_t mac[CBC_MAX_MAC_SIZE];
  97:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    uint8_t orig_mac[CBC_MAX_MAC_SIZE];
  98:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** 
  99:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    if ((len_mac > CBC_MAX_MAC_SIZE) || (l != 2)) {
 181              		.loc 1 99 0
 182 00c0 97F84430 		ldrb	r3, [r7, #68]	@ zero_extendqisi2
 183 00c4 102B     		cmp	r3, #16
 184 00c6 03D8     		bhi	.L8
 185              		.loc 1 99 0 is_stmt 0 discriminator 1
 186 00c8 97F83C30 		ldrb	r3, [r7, #60]	@ zero_extendqisi2
 187 00cc 022B     		cmp	r3, #2
 188 00ce 01D0     		beq	.L9
 189              	.L8:
 100:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****       return E_FAIL;
 190              		.loc 1 100 0 is_stmt 1
 191 00d0 0123     		movs	r3, #1
 192 00d2 4DE0     		b	.L12
 193              	.L9:
 101:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    }
 102:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** 
 103:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    *len_m -= len_mac;
 194              		.loc 1 103 0
 195 00d4 3B68     		ldr	r3, [r7]
 196 00d6 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 197 00d8 97F84430 		ldrb	r3, [r7, #68]
 198 00dc D31A     		subs	r3, r2, r3
 199 00de DAB2     		uxtb	r2, r3
 200 00e0 3B68     		ldr	r3, [r7]
 201 00e2 1A70     		strb	r2, [r3]
 104:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    memcpy(mac, &m[*len_m], len_mac);
 202              		.loc 1 104 0
 203 00e4 3B68     		ldr	r3, [r7]
 204 00e6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 205 00e8 1A46     		mov	r2, r3
 206 00ea 7B68     		ldr	r3, [r7, #4]
 207 00ec 9918     		adds	r1, r3, r2
 208 00ee 97F84420 		ldrb	r2, [r7, #68]	@ zero_extendqisi2
 209 00f2 07F12003 		add	r3, r7, #32
 210 00f6 1846     		mov	r0, r3
 211 00f8 FFF7FEFF 		bl	memcpy
 105:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** 
 106:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    if (aes_ctr_enc(m, *len_m, nonce, key, mac, len_mac, l) == E_SUCCESS) {
 212              		.loc 1 106 0
 213 00fc 3B68     		ldr	r3, [r7]
 214 00fe 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 215 0100 97F83C30 		ldrb	r3, [r7, #60]	@ zero_extendqisi2
 216 0104 0293     		str	r3, [sp, #8]
 217 0106 97F84430 		ldrb	r3, [r7, #68]	@ zero_extendqisi2
 218 010a 0193     		str	r3, [sp, #4]
 219 010c 07F12003 		add	r3, r7, #32
 220 0110 0093     		str	r3, [sp]
 221 0112 3B6C     		ldr	r3, [r7, #64]
 222 0114 BA6B     		ldr	r2, [r7, #56]
 223 0116 7868     		ldr	r0, [r7, #4]
 224 0118 00F052F9 		bl	aes_ctr_enc
 225 011c 0346     		mov	r3, r0
 226 011e 002B     		cmp	r3, #0
 227 0120 25D1     		bne	.L11
 107:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****       if (aes_cbc_mac(a, len_a, m, *len_m, nonce, key, orig_mac, len_mac, l) == E_SUCCESS) {
 228              		.loc 1 107 0
 229 0122 3B68     		ldr	r3, [r7]
 230 0124 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 231 0126 F97A     		ldrb	r1, [r7, #11]	@ zero_extendqisi2
 232 0128 97F83C30 		ldrb	r3, [r7, #60]	@ zero_extendqisi2
 233 012c 0493     		str	r3, [sp, #16]
 234 012e 97F84430 		ldrb	r3, [r7, #68]	@ zero_extendqisi2
 235 0132 0393     		str	r3, [sp, #12]
 236 0134 07F11003 		add	r3, r7, #16
 237 0138 0293     		str	r3, [sp, #8]
 238 013a 3B6C     		ldr	r3, [r7, #64]
 239 013c 0193     		str	r3, [sp, #4]
 240 013e BB6B     		ldr	r3, [r7, #56]
 241 0140 0093     		str	r3, [sp]
 242 0142 1346     		mov	r3, r2
 243 0144 7A68     		ldr	r2, [r7, #4]
 244 0146 F868     		ldr	r0, [r7, #12]
 245 0148 00F016F8 		bl	aes_cbc_mac
 246 014c 0346     		mov	r3, r0
 247 014e 002B     		cmp	r3, #0
 248 0150 0DD1     		bne	.L11
 108:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****          if (memcmp(mac, orig_mac, len_mac) == 0) {
 249              		.loc 1 108 0
 250 0152 97F84420 		ldrb	r2, [r7, #68]	@ zero_extendqisi2
 251 0156 07F11001 		add	r1, r7, #16
 252 015a 07F12003 		add	r3, r7, #32
 253 015e 1846     		mov	r0, r3
 254 0160 FFF7FEFF 		bl	memcmp
 255 0164 0346     		mov	r3, r0
 256 0166 002B     		cmp	r3, #0
 257 0168 01D1     		bne	.L11
 109:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****             return E_SUCCESS;
 258              		.loc 1 109 0
 259 016a 0023     		movs	r3, #0
 260 016c 00E0     		b	.L12
 261              	.L11:
 110:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****          }
 111:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****       }
 112:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    }
 113:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** 
 114:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    return E_FAIL;
 262              		.loc 1 114 0
 263 016e 0123     		movs	r3, #1
 264              	.L12:
 115:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** }
 265              		.loc 1 115 0 discriminator 1
 266 0170 1846     		mov	r0, r3
 267 0172 3037     		adds	r7, r7, #48
 268              		.cfi_def_cfa_offset 8
 269 0174 BD46     		mov	sp, r7
 270              		.cfi_def_cfa_register 13
 271              		@ sp needed
 272 0176 80BD     		pop	{r7, pc}
 273              		.cfi_endproc
 274              	.LFE1:
 276              		.align	2
 277              		.thumb
 278              		.thumb_func
 280              	aes_cbc_mac:
 281              	.LFB2:
 116:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** 
 117:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** //=========================== private =========================================
 118:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** 
 119:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** /**
 120:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** \brief CBC-MAC generation specific to CCM*.
 121:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** \param[in] a Pointer to the authentication only data.
 122:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** \param[in] len_a Length of authentication only data.
 123:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** \param[in] m Pointer to the data that is both authenticated and encrypted.
 124:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** \param[in] len_m Length of data that is both authenticated and encrypted.
 125:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** \param[in] nonce Buffer containing nonce (13 octets).
 126:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** \param[in] key Buffer containing the secret key (16 octets).
 127:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** \param[out] mac Buffer where the value of the CBC-MAC tag will be written.
 128:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** \param[in] len_mac Length of the CBC-MAC tag. Must be 4, 8 or 16 octets.
 129:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** \param[in] l CCM parameter L that allows selection of different nonce length.
 130:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** 
 131:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** \returns E_SUCCESS when the generation was successful, E_FAIL otherwise. 
 132:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** */
 133:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** static owerror_t aes_cbc_mac(uint8_t* a,
 134:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****          uint8_t len_a,
 135:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****          uint8_t* m,
 136:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****          uint8_t len_m,
 137:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****          uint8_t* nonce,
 138:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****          uint8_t key[16],
 139:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****          uint8_t* mac,
 140:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****          uint8_t len_mac,
 141:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****          uint8_t l) {
 282              		.loc 1 141 0
 283              		.cfi_startproc
 284              		@ args = 20, pretend = 0, frame = 200
 285              		@ frame_needed = 1, uses_anonymous_args = 0
 286 0178 80B5     		push	{r7, lr}
 287              		.cfi_def_cfa_offset 8
 288              		.cfi_offset 7, -8
 289              		.cfi_offset 14, -4
 290 017a B2B0     		sub	sp, sp, #200
 291              		.cfi_def_cfa_offset 208
 292 017c 00AF     		add	r7, sp, #0
 293              		.cfi_def_cfa_register 7
 294 017e F860     		str	r0, [r7, #12]
 295 0180 7A60     		str	r2, [r7, #4]
 296 0182 1A46     		mov	r2, r3
 297 0184 0B46     		mov	r3, r1
 298 0186 FB72     		strb	r3, [r7, #11]
 299 0188 1346     		mov	r3, r2
 300 018a BB72     		strb	r3, [r7, #10]
 142:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    
 143:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    uint8_t  pad_len;
 144:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    uint8_t  len;
 145:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    uint8_t  cbc_mac_iv[16];
 146:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    uint8_t  buffer[128+16+16]; // max buffer plus IV
 147:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** 
 148:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    // asserts here
 149:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    if (!((len_mac == 0) || (len_mac == 4) || (len_mac == 8) || (len_mac == 16))) {
 301              		.loc 1 149 0
 302 018c 97F8DC30 		ldrb	r3, [r7, #220]	@ zero_extendqisi2
 303 0190 002B     		cmp	r3, #0
 304 0192 0DD0     		beq	.L14
 305              		.loc 1 149 0 is_stmt 0 discriminator 1
 306 0194 97F8DC30 		ldrb	r3, [r7, #220]	@ zero_extendqisi2
 307 0198 042B     		cmp	r3, #4
 308 019a 09D0     		beq	.L14
 309              		.loc 1 149 0 discriminator 2
 310 019c 97F8DC30 		ldrb	r3, [r7, #220]	@ zero_extendqisi2
 311 01a0 082B     		cmp	r3, #8
 312 01a2 05D0     		beq	.L14
 313              		.loc 1 149 0 discriminator 3
 314 01a4 97F8DC30 		ldrb	r3, [r7, #220]	@ zero_extendqisi2
 315 01a8 102B     		cmp	r3, #16
 316 01aa 01D0     		beq	.L14
 150:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****       return E_FAIL;
 317              		.loc 1 150 0 is_stmt 1
 318 01ac 0123     		movs	r3, #1
 319 01ae 02E1     		b	.L29
 320              	.L14:
 151:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    }
 152:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** 
 153:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    if ((len_a > 127) || (len_m > 127) || ((len_a + len_m) > 127)) {
 321              		.loc 1 153 0
 322 01b0 97F90B30 		ldrsb	r3, [r7, #11]
 323 01b4 002B     		cmp	r3, #0
 324 01b6 08DB     		blt	.L16
 325              		.loc 1 153 0 is_stmt 0 discriminator 1
 326 01b8 97F90A30 		ldrsb	r3, [r7, #10]
 327 01bc 002B     		cmp	r3, #0
 328 01be 04DB     		blt	.L16
 329              		.loc 1 153 0 discriminator 2
 330 01c0 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 331 01c2 BB7A     		ldrb	r3, [r7, #10]	@ zero_extendqisi2
 332 01c4 1344     		add	r3, r3, r2
 333 01c6 7F2B     		cmp	r3, #127
 334 01c8 01DD     		ble	.L17
 335              	.L16:
 154:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****       return E_FAIL;
 336              		.loc 1 154 0 is_stmt 1
 337 01ca 0123     		movs	r3, #1
 338 01cc F3E0     		b	.L29
 339              	.L17:
 155:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    }
 156:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** 
 157:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    if (mac == 0) {
 340              		.loc 1 157 0
 341 01ce D7F8D830 		ldr	r3, [r7, #216]
 342 01d2 002B     		cmp	r3, #0
 343 01d4 01D1     		bne	.L18
 158:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****       return E_FAIL;
 344              		.loc 1 158 0
 345 01d6 0123     		movs	r3, #1
 346 01d8 EDE0     		b	.L29
 347              	.L18:
 159:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    }
 160:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** 
 161:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    memset(cbc_mac_iv, 0x00, 16); // CBC-MAC Initialization Vector is a zero string
 348              		.loc 1 161 0
 349 01da 07F1B403 		add	r3, r7, #180
 350 01de 1022     		movs	r2, #16
 351 01e0 0021     		movs	r1, #0
 352 01e2 1846     		mov	r0, r3
 353 01e4 FFF7FEFF 		bl	memset
 162:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** 
 163:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    // IV: flags (1B) | SADDR (8B) | ASN (5B) | len(m) (2B)
 164:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    // X0 xor IV in first 16 bytes of buffer: set buffer[:16] as IV)
 165:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    buffer[0] = 0x00; // set flags to zero including reserved
 354              		.loc 1 165 0
 355 01e8 0023     		movs	r3, #0
 356 01ea 3B75     		strb	r3, [r7, #20]
 166:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    buffer[0] |= 0x07 & (l-1); // field L
 357              		.loc 1 166 0
 358 01ec 3B7D     		ldrb	r3, [r7, #20]	@ zero_extendqisi2
 359 01ee 5AB2     		sxtb	r2, r3
 360 01f0 97F8E030 		ldrb	r3, [r7, #224]
 361 01f4 013B     		subs	r3, r3, #1
 362 01f6 DBB2     		uxtb	r3, r3
 363 01f8 5BB2     		sxtb	r3, r3
 364 01fa 03F00703 		and	r3, r3, #7
 365 01fe 5BB2     		sxtb	r3, r3
 366 0200 1343     		orrs	r3, r3, r2
 367 0202 5BB2     		sxtb	r3, r3
 368 0204 DBB2     		uxtb	r3, r3
 369 0206 3B75     		strb	r3, [r7, #20]
 167:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    // (len_mac - 2)/2 shifted left 3 times corresponds to (len_mac - 2) << 2
 168:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    buffer[0] |= len_mac == 0 ? 0 : (0x07 & (len_mac - 2)) << 2; // field M
 370              		.loc 1 168 0
 371 0208 3B7D     		ldrb	r3, [r7, #20]	@ zero_extendqisi2
 372 020a 5AB2     		sxtb	r2, r3
 373 020c 97F8DC30 		ldrb	r3, [r7, #220]	@ zero_extendqisi2
 374 0210 002B     		cmp	r3, #0
 375 0212 08D0     		beq	.L19
 376              		.loc 1 168 0 is_stmt 0 discriminator 1
 377 0214 97F8DC30 		ldrb	r3, [r7, #220]	@ zero_extendqisi2
 378 0218 023B     		subs	r3, r3, #2
 379 021a 9B00     		lsls	r3, r3, #2
 380 021c 5BB2     		sxtb	r3, r3
 381 021e 03F01C03 		and	r3, r3, #28
 382 0222 5BB2     		sxtb	r3, r3
 383 0224 00E0     		b	.L20
 384              	.L19:
 385              		.loc 1 168 0 discriminator 2
 386 0226 0023     		movs	r3, #0
 387              	.L20:
 388              		.loc 1 168 0 discriminator 4
 389 0228 1343     		orrs	r3, r3, r2
 390 022a 5BB2     		sxtb	r3, r3
 391 022c DBB2     		uxtb	r3, r3
 392 022e 3B75     		strb	r3, [r7, #20]
 169:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    buffer[0] |= len_a != 0 ? 0x40 : 0; // field Adata
 393              		.loc 1 169 0 is_stmt 1 discriminator 4
 394 0230 3B7D     		ldrb	r3, [r7, #20]	@ zero_extendqisi2
 395 0232 5AB2     		sxtb	r2, r3
 396 0234 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 397 0236 002B     		cmp	r3, #0
 398 0238 01D0     		beq	.L21
 399              		.loc 1 169 0 is_stmt 0 discriminator 1
 400 023a 4023     		movs	r3, #64
 401 023c 00E0     		b	.L22
 402              	.L21:
 403              		.loc 1 169 0 discriminator 2
 404 023e 0023     		movs	r3, #0
 405              	.L22:
 406              		.loc 1 169 0 discriminator 4
 407 0240 1343     		orrs	r3, r3, r2
 408 0242 5BB2     		sxtb	r3, r3
 409 0244 DBB2     		uxtb	r3, r3
 410 0246 3B75     		strb	r3, [r7, #20]
 170:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    
 171:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    memcpy(&buffer[1], nonce, 13);
 411              		.loc 1 171 0 is_stmt 1 discriminator 4
 412 0248 07F11403 		add	r3, r7, #20
 413 024c 0133     		adds	r3, r3, #1
 414 024e 0D22     		movs	r2, #13
 415 0250 D7F8D010 		ldr	r1, [r7, #208]
 416 0254 1846     		mov	r0, r3
 417 0256 FFF7FEFF 		bl	memcpy
 172:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** 
 173:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    if (l == 3) {
 418              		.loc 1 173 0 discriminator 4
 419 025a 97F8E030 		ldrb	r3, [r7, #224]	@ zero_extendqisi2
 420 025e 032B     		cmp	r3, #3
 421 0260 02D1     		bne	.L23
 174:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****       buffer[13] = 0;
 422              		.loc 1 174 0
 423 0262 0023     		movs	r3, #0
 424 0264 87F82130 		strb	r3, [r7, #33]
 425              	.L23:
 175:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    }
 176:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** 
 177:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    buffer[14] = 0;
 426              		.loc 1 177 0
 427 0268 0023     		movs	r3, #0
 428 026a 87F82230 		strb	r3, [r7, #34]
 178:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    buffer[15] = len_m;
 429              		.loc 1 178 0
 430 026e BB7A     		ldrb	r3, [r7, #10]
 431 0270 87F82330 		strb	r3, [r7, #35]
 179:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** 
 180:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    len = 16;
 432              		.loc 1 180 0
 433 0274 1023     		movs	r3, #16
 434 0276 87F8C730 		strb	r3, [r7, #199]
 181:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    // len(a)
 182:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    if(len_a > 0) {
 435              		.loc 1 182 0
 436 027a FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 437 027c 002B     		cmp	r3, #0
 438 027e 0AD0     		beq	.L24
 183:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****       buffer[16] = 0;
 439              		.loc 1 183 0
 440 0280 0023     		movs	r3, #0
 441 0282 87F82430 		strb	r3, [r7, #36]
 184:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****       buffer[17] = len_a;
 442              		.loc 1 184 0
 443 0286 FB7A     		ldrb	r3, [r7, #11]
 444 0288 87F82530 		strb	r3, [r7, #37]
 185:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****       len += 2;
 445              		.loc 1 185 0
 446 028c 97F8C730 		ldrb	r3, [r7, #199]
 447 0290 0233     		adds	r3, r3, #2
 448 0292 87F8C730 		strb	r3, [r7, #199]
 449              	.L24:
 186:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    }
 187:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** 
 188:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    //  (((x >> 4) + 1)<<4) - x   or    16 - (x % 16) ?
 189:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    // a + padding
 190:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    pad_len = ((((len_a + len - 16) >> 4) + 1) << 4) - (len_a + len - 16);
 450              		.loc 1 190 0
 451 0296 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 452 0298 97F8C730 		ldrb	r3, [r7, #199]	@ zero_extendqisi2
 453 029c 1344     		add	r3, r3, r2
 454 029e 103B     		subs	r3, r3, #16
 455 02a0 1B11     		asrs	r3, r3, #4
 456 02a2 DBB2     		uxtb	r3, r3
 457 02a4 0133     		adds	r3, r3, #1
 458 02a6 DBB2     		uxtb	r3, r3
 459 02a8 1B01     		lsls	r3, r3, #4
 460 02aa DAB2     		uxtb	r2, r3
 461 02ac F97A     		ldrb	r1, [r7, #11]
 462 02ae 97F8C730 		ldrb	r3, [r7, #199]
 463 02b2 0B44     		add	r3, r3, r1
 464 02b4 DBB2     		uxtb	r3, r3
 465 02b6 D31A     		subs	r3, r2, r3
 466 02b8 DBB2     		uxtb	r3, r3
 467 02ba 1033     		adds	r3, r3, #16
 468 02bc 87F8C630 		strb	r3, [r7, #198]
 191:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    pad_len = pad_len == 16 ? 0 : pad_len;
 469              		.loc 1 191 0
 470 02c0 97F8C630 		ldrb	r3, [r7, #198]	@ zero_extendqisi2
 471 02c4 102B     		cmp	r3, #16
 472 02c6 02D0     		beq	.L25
 473              		.loc 1 191 0 is_stmt 0 discriminator 1
 474 02c8 97F8C630 		ldrb	r3, [r7, #198]	@ zero_extendqisi2
 475 02cc 00E0     		b	.L26
 476              	.L25:
 477              		.loc 1 191 0 discriminator 2
 478 02ce 0023     		movs	r3, #0
 479              	.L26:
 480              		.loc 1 191 0 discriminator 4
 481 02d0 87F8C630 		strb	r3, [r7, #198]
 192:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    memcpy(&buffer[len], a, len_a);
 482              		.loc 1 192 0 is_stmt 1 discriminator 4
 483 02d4 97F8C730 		ldrb	r3, [r7, #199]	@ zero_extendqisi2
 484 02d8 07F11402 		add	r2, r7, #20
 485 02dc 1344     		add	r3, r3, r2
 486 02de FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 487 02e0 F968     		ldr	r1, [r7, #12]
 488 02e2 1846     		mov	r0, r3
 489 02e4 FFF7FEFF 		bl	memcpy
 193:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    len += len_a;
 490              		.loc 1 193 0 discriminator 4
 491 02e8 97F8C720 		ldrb	r2, [r7, #199]
 492 02ec FB7A     		ldrb	r3, [r7, #11]
 493 02ee 1344     		add	r3, r3, r2
 494 02f0 87F8C730 		strb	r3, [r7, #199]
 194:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    memset(&buffer[len], 0, pad_len);
 495              		.loc 1 194 0 discriminator 4
 496 02f4 97F8C730 		ldrb	r3, [r7, #199]	@ zero_extendqisi2
 497 02f8 07F11402 		add	r2, r7, #20
 498 02fc 1344     		add	r3, r3, r2
 499 02fe 97F8C620 		ldrb	r2, [r7, #198]	@ zero_extendqisi2
 500 0302 0021     		movs	r1, #0
 501 0304 1846     		mov	r0, r3
 502 0306 FFF7FEFF 		bl	memset
 195:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    len += pad_len;
 503              		.loc 1 195 0 discriminator 4
 504 030a 97F8C720 		ldrb	r2, [r7, #199]
 505 030e 97F8C630 		ldrb	r3, [r7, #198]
 506 0312 1344     		add	r3, r3, r2
 507 0314 87F8C730 		strb	r3, [r7, #199]
 196:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** 
 197:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    // m + padding
 198:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    pad_len = (((len_m >> 4) + 1) << 4) - len_m;
 508              		.loc 1 198 0 discriminator 4
 509 0318 BB7A     		ldrb	r3, [r7, #10]	@ zero_extendqisi2
 510 031a 1B09     		lsrs	r3, r3, #4
 511 031c DBB2     		uxtb	r3, r3
 512 031e 0133     		adds	r3, r3, #1
 513 0320 DBB2     		uxtb	r3, r3
 514 0322 1B01     		lsls	r3, r3, #4
 515 0324 DAB2     		uxtb	r2, r3
 516 0326 BB7A     		ldrb	r3, [r7, #10]
 517 0328 D31A     		subs	r3, r2, r3
 518 032a 87F8C630 		strb	r3, [r7, #198]
 199:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    pad_len = pad_len == 16 ? 0 : pad_len;
 519              		.loc 1 199 0 discriminator 4
 520 032e 97F8C630 		ldrb	r3, [r7, #198]	@ zero_extendqisi2
 521 0332 102B     		cmp	r3, #16
 522 0334 02D0     		beq	.L27
 523              		.loc 1 199 0 is_stmt 0 discriminator 1
 524 0336 97F8C630 		ldrb	r3, [r7, #198]	@ zero_extendqisi2
 525 033a 00E0     		b	.L28
 526              	.L27:
 527              		.loc 1 199 0 discriminator 2
 528 033c 0023     		movs	r3, #0
 529              	.L28:
 530              		.loc 1 199 0 discriminator 4
 531 033e 87F8C630 		strb	r3, [r7, #198]
 200:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    memcpy(&buffer[len], m, len_m);
 532              		.loc 1 200 0 is_stmt 1 discriminator 4
 533 0342 97F8C730 		ldrb	r3, [r7, #199]	@ zero_extendqisi2
 534 0346 07F11402 		add	r2, r7, #20
 535 034a 1344     		add	r3, r3, r2
 536 034c BA7A     		ldrb	r2, [r7, #10]	@ zero_extendqisi2
 537 034e 7968     		ldr	r1, [r7, #4]
 538 0350 1846     		mov	r0, r3
 539 0352 FFF7FEFF 		bl	memcpy
 201:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    len += len_m;
 540              		.loc 1 201 0 discriminator 4
 541 0356 97F8C720 		ldrb	r2, [r7, #199]
 542 035a BB7A     		ldrb	r3, [r7, #10]
 543 035c 1344     		add	r3, r3, r2
 544 035e 87F8C730 		strb	r3, [r7, #199]
 202:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    memset(&buffer[len], 0, pad_len);
 545              		.loc 1 202 0 discriminator 4
 546 0362 97F8C730 		ldrb	r3, [r7, #199]	@ zero_extendqisi2
 547 0366 07F11402 		add	r2, r7, #20
 548 036a 1344     		add	r3, r3, r2
 549 036c 97F8C620 		ldrb	r2, [r7, #198]	@ zero_extendqisi2
 550 0370 0021     		movs	r1, #0
 551 0372 1846     		mov	r0, r3
 552 0374 FFF7FEFF 		bl	memset
 203:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    len += pad_len;
 553              		.loc 1 203 0 discriminator 4
 554 0378 97F8C720 		ldrb	r2, [r7, #199]
 555 037c 97F8C630 		ldrb	r3, [r7, #198]
 556 0380 1344     		add	r3, r3, r2
 557 0382 87F8C730 		strb	r3, [r7, #199]
 204:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** 
 205:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    aes_cbc_enc_raw(buffer, len, key, cbc_mac_iv);
 558              		.loc 1 205 0 discriminator 4
 559 0386 07F1B403 		add	r3, r7, #180
 560 038a 97F8C710 		ldrb	r1, [r7, #199]	@ zero_extendqisi2
 561 038e 07F11400 		add	r0, r7, #20
 562 0392 D7F8D420 		ldr	r2, [r7, #212]
 563 0396 FFF7FEFF 		bl	aes_cbc_enc_raw
 206:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** 
 207:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    // copy MAC
 208:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    memcpy(mac, &buffer[len - 16], len_mac);
 564              		.loc 1 208 0 discriminator 4
 565 039a 97F8C730 		ldrb	r3, [r7, #199]	@ zero_extendqisi2
 566 039e 103B     		subs	r3, r3, #16
 567 03a0 07F11402 		add	r2, r7, #20
 568 03a4 1344     		add	r3, r3, r2
 569 03a6 97F8DC20 		ldrb	r2, [r7, #220]	@ zero_extendqisi2
 570 03aa 1946     		mov	r1, r3
 571 03ac D7F8D800 		ldr	r0, [r7, #216]
 572 03b0 FFF7FEFF 		bl	memcpy
 209:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** 
 210:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    return E_SUCCESS;
 573              		.loc 1 210 0 discriminator 4
 574 03b4 0023     		movs	r3, #0
 575              	.L29:
 211:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** }
 576              		.loc 1 211 0 discriminator 1
 577 03b6 1846     		mov	r0, r3
 578 03b8 C837     		adds	r7, r7, #200
 579              		.cfi_def_cfa_offset 8
 580 03ba BD46     		mov	sp, r7
 581              		.cfi_def_cfa_register 13
 582              		@ sp needed
 583 03bc 80BD     		pop	{r7, pc}
 584              		.cfi_endproc
 585              	.LFE2:
 587 03be 00BF     		.align	2
 588              		.thumb
 589              		.thumb_func
 591              	aes_ctr_enc:
 592              	.LFB3:
 212:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** 
 213:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** /**
 214:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** \brief Counter (CTR) mode encryption specific to IEEE 802.15.4E.
 215:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** \param[in,out] m Pointer to the data that is both authenticated and encrypted. Data is
 216:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    overwritten by ciphertext (i.e. plaintext in case of inverse CCM*).
 217:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** \param[in] len_m Length of data that is both authenticated and encrypted.
 218:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** \param[in] nonce Buffer containing nonce (13 octets).
 219:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** \param[in] key Buffer containing the secret key (16 octets).
 220:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** \param[in,out] mac Buffer containing the unencrypted or encrypted CBC-MAC tag, which depends
 221:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    on weather the function is called as part of CCM* forward or inverse transformation. It
 222:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    is overwrriten by the encrypted, i.e unencrypted, tag on return.
 223:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** \param[in] len_mac Length of the CBC-MAC tag. Must be 4, 8 or 16 octets.
 224:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** \param[in] l CCM parameter L that allows selection of different nonce length.
 225:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** 
 226:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** \returns E_SUCCESS when the encryption was successful, E_FAIL otherwise. 
 227:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** */
 228:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** static owerror_t aes_ctr_enc(uint8_t* m,
 229:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****          uint8_t len_m,
 230:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****          uint8_t* nonce,
 231:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****          uint8_t key[16],
 232:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****          uint8_t* mac,
 233:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****          uint8_t len_mac,
 234:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****          uint8_t l) {
 593              		.loc 1 234 0
 594              		.cfi_startproc
 595              		@ args = 12, pretend = 0, frame = 184
 596              		@ frame_needed = 1, uses_anonymous_args = 0
 597 03c0 80B5     		push	{r7, lr}
 598              		.cfi_def_cfa_offset 8
 599              		.cfi_offset 7, -8
 600              		.cfi_offset 14, -4
 601 03c2 AEB0     		sub	sp, sp, #184
 602              		.cfi_def_cfa_offset 192
 603 03c4 00AF     		add	r7, sp, #0
 604              		.cfi_def_cfa_register 7
 605 03c6 F860     		str	r0, [r7, #12]
 606 03c8 7A60     		str	r2, [r7, #4]
 607 03ca 3B60     		str	r3, [r7]
 608 03cc 0B46     		mov	r3, r1
 609 03ce FB72     		strb	r3, [r7, #11]
 235:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** 
 236:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    uint8_t pad_len;
 237:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    uint8_t len;
 238:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    uint8_t iv[16];
 239:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    uint8_t buffer[128 + 16]; // max buffer plus mac
 240:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** 
 241:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    // asserts here
 242:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    if (!((len_mac == 0) || (len_mac == 4) || (len_mac == 8) || (len_mac == 16))) {
 610              		.loc 1 242 0
 611 03d0 97F8C430 		ldrb	r3, [r7, #196]	@ zero_extendqisi2
 612 03d4 002B     		cmp	r3, #0
 613 03d6 0DD0     		beq	.L31
 614              		.loc 1 242 0 is_stmt 0 discriminator 1
 615 03d8 97F8C430 		ldrb	r3, [r7, #196]	@ zero_extendqisi2
 616 03dc 042B     		cmp	r3, #4
 617 03de 09D0     		beq	.L31
 618              		.loc 1 242 0 discriminator 2
 619 03e0 97F8C430 		ldrb	r3, [r7, #196]	@ zero_extendqisi2
 620 03e4 082B     		cmp	r3, #8
 621 03e6 05D0     		beq	.L31
 622              		.loc 1 242 0 discriminator 3
 623 03e8 97F8C430 		ldrb	r3, [r7, #196]	@ zero_extendqisi2
 624 03ec 102B     		cmp	r3, #16
 625 03ee 01D0     		beq	.L31
 243:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****       return E_FAIL;
 626              		.loc 1 243 0 is_stmt 1
 627 03f0 0123     		movs	r3, #1
 628 03f2 91E0     		b	.L36
 629              	.L31:
 244:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    }
 245:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** 
 246:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    if (len_m > 127) {
 630              		.loc 1 246 0
 631 03f4 97F90B30 		ldrsb	r3, [r7, #11]
 632 03f8 002B     		cmp	r3, #0
 633 03fa 01DA     		bge	.L33
 247:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****       return E_FAIL;
 634              		.loc 1 247 0
 635 03fc 0123     		movs	r3, #1
 636 03fe 8BE0     		b	.L36
 637              	.L33:
 248:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    }
 249:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** 
 250:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    // iv (flag (1B) | source addr (8B) | ASN (5B) | cnt (2B)
 251:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    iv[0] = 0x00;
 638              		.loc 1 251 0
 639 0400 0023     		movs	r3, #0
 640 0402 87F8A430 		strb	r3, [r7, #164]
 252:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    iv[0] |= 0x07 & (l-1); // field L
 641              		.loc 1 252 0
 642 0406 97F8A430 		ldrb	r3, [r7, #164]	@ zero_extendqisi2
 643 040a 5AB2     		sxtb	r2, r3
 644 040c 97F8C830 		ldrb	r3, [r7, #200]
 645 0410 013B     		subs	r3, r3, #1
 646 0412 DBB2     		uxtb	r3, r3
 647 0414 5BB2     		sxtb	r3, r3
 648 0416 03F00703 		and	r3, r3, #7
 649 041a 5BB2     		sxtb	r3, r3
 650 041c 1343     		orrs	r3, r3, r2
 651 041e 5BB2     		sxtb	r3, r3
 652 0420 DBB2     		uxtb	r3, r3
 653 0422 87F8A430 		strb	r3, [r7, #164]
 253:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** 
 254:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    memcpy(&iv[1], nonce, 13);
 654              		.loc 1 254 0
 655 0426 07F1A403 		add	r3, r7, #164
 656 042a 0133     		adds	r3, r3, #1
 657 042c 0D22     		movs	r2, #13
 658 042e 7968     		ldr	r1, [r7, #4]
 659 0430 1846     		mov	r0, r3
 660 0432 FFF7FEFF 		bl	memcpy
 255:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    iv[14] = 0x00;
 661              		.loc 1 255 0
 662 0436 0023     		movs	r3, #0
 663 0438 87F8B230 		strb	r3, [r7, #178]
 256:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    iv[15] = 0x00;
 664              		.loc 1 256 0
 665 043c 0023     		movs	r3, #0
 666 043e 87F8B330 		strb	r3, [r7, #179]
 257:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** 
 258:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    // first block is mac
 259:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    memcpy(buffer, mac, len_mac);
 667              		.loc 1 259 0
 668 0442 97F8C420 		ldrb	r2, [r7, #196]	@ zero_extendqisi2
 669 0446 07F11403 		add	r3, r7, #20
 670 044a D7F8C010 		ldr	r1, [r7, #192]
 671 044e 1846     		mov	r0, r3
 672 0450 FFF7FEFF 		bl	memcpy
 260:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    memset(&buffer[len_mac], 0, 16 - len_mac);
 673              		.loc 1 260 0
 674 0454 97F8C430 		ldrb	r3, [r7, #196]	@ zero_extendqisi2
 675 0458 07F11402 		add	r2, r7, #20
 676 045c D018     		adds	r0, r2, r3
 677 045e 97F8C430 		ldrb	r3, [r7, #196]	@ zero_extendqisi2
 678 0462 C3F11003 		rsb	r3, r3, #16
 679 0466 1A46     		mov	r2, r3
 680 0468 0021     		movs	r1, #0
 681 046a FFF7FEFF 		bl	memset
 261:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    len = 16;
 682              		.loc 1 261 0
 683 046e 1023     		movs	r3, #16
 684 0470 87F8B730 		strb	r3, [r7, #183]
 262:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** 
 263:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    //  (((x >> 4) + 1)<<4) - x   or    16 - (x % 16) ?
 264:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    // m + padding
 265:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    pad_len = (((len_m >> 4) + 1) << 4) - len_m;
 685              		.loc 1 265 0
 686 0474 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 687 0476 1B09     		lsrs	r3, r3, #4
 688 0478 DBB2     		uxtb	r3, r3
 689 047a 0133     		adds	r3, r3, #1
 690 047c DBB2     		uxtb	r3, r3
 691 047e 1B01     		lsls	r3, r3, #4
 692 0480 DAB2     		uxtb	r2, r3
 693 0482 FB7A     		ldrb	r3, [r7, #11]
 694 0484 D31A     		subs	r3, r2, r3
 695 0486 87F8B630 		strb	r3, [r7, #182]
 266:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    pad_len = pad_len == 16 ? 0 : pad_len;
 696              		.loc 1 266 0
 697 048a 97F8B630 		ldrb	r3, [r7, #182]	@ zero_extendqisi2
 698 048e 102B     		cmp	r3, #16
 699 0490 02D0     		beq	.L34
 700              		.loc 1 266 0 is_stmt 0 discriminator 1
 701 0492 97F8B630 		ldrb	r3, [r7, #182]	@ zero_extendqisi2
 702 0496 00E0     		b	.L35
 703              	.L34:
 704              		.loc 1 266 0 discriminator 2
 705 0498 0023     		movs	r3, #0
 706              	.L35:
 707              		.loc 1 266 0 discriminator 4
 708 049a 87F8B630 		strb	r3, [r7, #182]
 267:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    memcpy(&buffer[len], m, len_m);
 709              		.loc 1 267 0 is_stmt 1 discriminator 4
 710 049e 97F8B730 		ldrb	r3, [r7, #183]	@ zero_extendqisi2
 711 04a2 07F11402 		add	r2, r7, #20
 712 04a6 1344     		add	r3, r3, r2
 713 04a8 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 714 04aa F968     		ldr	r1, [r7, #12]
 715 04ac 1846     		mov	r0, r3
 716 04ae FFF7FEFF 		bl	memcpy
 268:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    len += len_m;
 717              		.loc 1 268 0 discriminator 4
 718 04b2 97F8B720 		ldrb	r2, [r7, #183]
 719 04b6 FB7A     		ldrb	r3, [r7, #11]
 720 04b8 1344     		add	r3, r3, r2
 721 04ba 87F8B730 		strb	r3, [r7, #183]
 269:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    memset(&buffer[len], 0, pad_len);
 722              		.loc 1 269 0 discriminator 4
 723 04be 97F8B730 		ldrb	r3, [r7, #183]	@ zero_extendqisi2
 724 04c2 07F11402 		add	r2, r7, #20
 725 04c6 1344     		add	r3, r3, r2
 726 04c8 97F8B620 		ldrb	r2, [r7, #182]	@ zero_extendqisi2
 727 04cc 0021     		movs	r1, #0
 728 04ce 1846     		mov	r0, r3
 729 04d0 FFF7FEFF 		bl	memset
 270:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    len += pad_len;
 730              		.loc 1 270 0 discriminator 4
 731 04d4 97F8B720 		ldrb	r2, [r7, #183]
 732 04d8 97F8B630 		ldrb	r3, [r7, #182]
 733 04dc 1344     		add	r3, r3, r2
 734 04de 87F8B730 		strb	r3, [r7, #183]
 271:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** 
 272:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    aes_ctr_enc_raw(buffer, len, key, iv);
 735              		.loc 1 272 0 discriminator 4
 736 04e2 07F1A403 		add	r3, r7, #164
 737 04e6 97F8B710 		ldrb	r1, [r7, #183]	@ zero_extendqisi2
 738 04ea 07F11400 		add	r0, r7, #20
 739 04ee 3A68     		ldr	r2, [r7]
 740 04f0 FFF7FEFF 		bl	aes_ctr_enc_raw
 273:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** 
 274:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    memcpy(m, &buffer[16], len_m);
 741              		.loc 1 274 0 discriminator 4
 742 04f4 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 743 04f6 07F11403 		add	r3, r7, #20
 744 04fa 1033     		adds	r3, r3, #16
 745 04fc 1946     		mov	r1, r3
 746 04fe F868     		ldr	r0, [r7, #12]
 747 0500 FFF7FEFF 		bl	memcpy
 275:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    memcpy(mac, buffer, len_mac);
 748              		.loc 1 275 0 discriminator 4
 749 0504 97F8C420 		ldrb	r2, [r7, #196]	@ zero_extendqisi2
 750 0508 07F11403 		add	r3, r7, #20
 751 050c 1946     		mov	r1, r3
 752 050e D7F8C000 		ldr	r0, [r7, #192]
 753 0512 FFF7FEFF 		bl	memcpy
 276:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** 
 277:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    return E_SUCCESS;
 754              		.loc 1 277 0 discriminator 4
 755 0516 0023     		movs	r3, #0
 756              	.L36:
 278:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** }
 757              		.loc 1 278 0 discriminator 1
 758 0518 1846     		mov	r0, r3
 759 051a B837     		adds	r7, r7, #184
 760              		.cfi_def_cfa_offset 8
 761 051c BD46     		mov	sp, r7
 762              		.cfi_def_cfa_register 13
 763              		@ sp needed
 764 051e 80BD     		pop	{r7, pc}
 765              		.cfi_endproc
 766              	.LFE3:
 768              		.align	2
 769              		.global	aes_cbc_enc_raw
 770              		.thumb
 771              		.thumb_func
 773              	aes_cbc_enc_raw:
 774              	.LFB4:
 279:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** 
 280:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** /**
 281:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** \brief Raw AES-CBC encryption.
 282:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** \param[in,out] buffer Message to be encrypted. Will be overwritten by ciphertext.
 283:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** \param[in] len Message length. Must be multiple of 16 octets.
 284:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** \param[in] key Buffer containing the secret key (16 octets).
 285:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** \param[in] iv Buffer containing the Initialization Vector (16 octets).
 286:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** 
 287:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** \returns E_SUCCESS when the encryption was successful. 
 288:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** */
 289:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** owerror_t aes_cbc_enc_raw(uint8_t* buffer, uint8_t len, uint8_t key[16], uint8_t iv[16]) {
 775              		.loc 1 289 0
 776              		.cfi_startproc
 777              		@ args = 0, pretend = 0, frame = 32
 778              		@ frame_needed = 1, uses_anonymous_args = 0
 779 0520 80B5     		push	{r7, lr}
 780              		.cfi_def_cfa_offset 8
 781              		.cfi_offset 7, -8
 782              		.cfi_offset 14, -4
 783 0522 88B0     		sub	sp, sp, #32
 784              		.cfi_def_cfa_offset 40
 785 0524 00AF     		add	r7, sp, #0
 786              		.cfi_def_cfa_register 7
 787 0526 F860     		str	r0, [r7, #12]
 788 0528 7A60     		str	r2, [r7, #4]
 789 052a 3B60     		str	r3, [r7]
 790 052c 0B46     		mov	r3, r1
 791 052e FB72     		strb	r3, [r7, #11]
 290:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    uint8_t  n;
 291:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    uint8_t  k;
 292:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    uint8_t  nb;
 293:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    uint8_t* pbuf;
 294:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    uint8_t* pxor;
 295:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** 
 296:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    nb = len >> 4;
 792              		.loc 1 296 0
 793 0530 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 794 0532 1B09     		lsrs	r3, r3, #4
 795 0534 FB75     		strb	r3, [r7, #23]
 297:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    pxor = iv;
 796              		.loc 1 297 0
 797 0536 3B68     		ldr	r3, [r7]
 798 0538 BB61     		str	r3, [r7, #24]
 298:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    for (n = 0; n < nb; n++) {
 799              		.loc 1 298 0
 800 053a 0023     		movs	r3, #0
 801 053c FB77     		strb	r3, [r7, #31]
 802 053e 25E0     		b	.L38
 803              	.L41:
 299:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****       pbuf = &buffer[16 * n];
 804              		.loc 1 299 0
 805 0540 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 806 0542 1B01     		lsls	r3, r3, #4
 807 0544 1A46     		mov	r2, r3
 808 0546 FB68     		ldr	r3, [r7, #12]
 809 0548 1344     		add	r3, r3, r2
 810 054a 3B61     		str	r3, [r7, #16]
 300:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****       // may be faster if vector are aligned to 4 bytes (use long instead char in xor)
 301:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****       for (k = 0; k < 16; k++) {
 811              		.loc 1 301 0
 812 054c 0023     		movs	r3, #0
 813 054e BB77     		strb	r3, [r7, #30]
 814 0550 10E0     		b	.L39
 815              	.L40:
 302:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****             pbuf[k] ^= pxor[k];
 816              		.loc 1 302 0 discriminator 3
 817 0552 BB7F     		ldrb	r3, [r7, #30]	@ zero_extendqisi2
 818 0554 3A69     		ldr	r2, [r7, #16]
 819 0556 1344     		add	r3, r3, r2
 820 0558 BA7F     		ldrb	r2, [r7, #30]	@ zero_extendqisi2
 821 055a 3969     		ldr	r1, [r7, #16]
 822 055c 0A44     		add	r2, r2, r1
 823 055e 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 824 0560 BA7F     		ldrb	r2, [r7, #30]	@ zero_extendqisi2
 825 0562 B869     		ldr	r0, [r7, #24]
 826 0564 0244     		add	r2, r2, r0
 827 0566 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 828 0568 4A40     		eors	r2, r2, r1
 829 056a D2B2     		uxtb	r2, r2
 830 056c 1A70     		strb	r2, [r3]
 301:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****             pbuf[k] ^= pxor[k];
 831              		.loc 1 301 0 discriminator 3
 832 056e BB7F     		ldrb	r3, [r7, #30]	@ zero_extendqisi2
 833 0570 0133     		adds	r3, r3, #1
 834 0572 BB77     		strb	r3, [r7, #30]
 835              	.L39:
 301:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****             pbuf[k] ^= pxor[k];
 836              		.loc 1 301 0 is_stmt 0 discriminator 1
 837 0574 BB7F     		ldrb	r3, [r7, #30]	@ zero_extendqisi2
 838 0576 0F2B     		cmp	r3, #15
 839 0578 EBD9     		bls	.L40
 303:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****       }
 304:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****       openaes_enc(pbuf,key);
 840              		.loc 1 304 0 is_stmt 1 discriminator 2
 841 057a 7968     		ldr	r1, [r7, #4]
 842 057c 3869     		ldr	r0, [r7, #16]
 843 057e FFF7FEFF 		bl	openaes_enc
 305:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****       pxor = pbuf;
 844              		.loc 1 305 0 discriminator 2
 845 0582 3B69     		ldr	r3, [r7, #16]
 846 0584 BB61     		str	r3, [r7, #24]
 298:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****       pbuf = &buffer[16 * n];
 847              		.loc 1 298 0 discriminator 2
 848 0586 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 849 0588 0133     		adds	r3, r3, #1
 850 058a FB77     		strb	r3, [r7, #31]
 851              	.L38:
 298:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****       pbuf = &buffer[16 * n];
 852              		.loc 1 298 0 is_stmt 0 discriminator 1
 853 058c FA7F     		ldrb	r2, [r7, #31]	@ zero_extendqisi2
 854 058e FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 855 0590 9A42     		cmp	r2, r3
 856 0592 D5D3     		bcc	.L41
 306:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    }
 307:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    return E_SUCCESS;
 857              		.loc 1 307 0 is_stmt 1
 858 0594 0023     		movs	r3, #0
 308:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** }
 859              		.loc 1 308 0
 860 0596 1846     		mov	r0, r3
 861 0598 2037     		adds	r7, r7, #32
 862              		.cfi_def_cfa_offset 8
 863 059a BD46     		mov	sp, r7
 864              		.cfi_def_cfa_register 13
 865              		@ sp needed
 866 059c 80BD     		pop	{r7, pc}
 867              		.cfi_endproc
 868              	.LFE4:
 870 059e 00BF     		.align	2
 871              		.global	aes_ctr_enc_raw
 872              		.thumb
 873              		.thumb_func
 875              	aes_ctr_enc_raw:
 876              	.LFB5:
 309:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** 
 310:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** /**
 311:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** \brief Raw AES-CTR encryption.
 312:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** \param[in,out] buffer Message to be encrypted. Will be overwritten by ciphertext.
 313:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** \param[in] len Message length. Must be multiple of 16 octets.
 314:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** \param[in] key Buffer containing the secret key (16 octets).
 315:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** \param[in] iv Buffer containing the Initialization Vector (16 octets).
 316:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** 
 317:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** \returns E_SUCCESS when the encryption was successful. 
 318:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** */
 319:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** owerror_t aes_ctr_enc_raw(uint8_t* buffer, uint8_t len, uint8_t key[16], uint8_t iv[16]) {
 877              		.loc 1 319 0
 878              		.cfi_startproc
 879              		@ args = 0, pretend = 0, frame = 40
 880              		@ frame_needed = 1, uses_anonymous_args = 0
 881 05a0 90B5     		push	{r4, r7, lr}
 882              		.cfi_def_cfa_offset 12
 883              		.cfi_offset 4, -12
 884              		.cfi_offset 7, -8
 885              		.cfi_offset 14, -4
 886 05a2 8BB0     		sub	sp, sp, #44
 887              		.cfi_def_cfa_offset 56
 888 05a4 00AF     		add	r7, sp, #0
 889              		.cfi_def_cfa_register 7
 890 05a6 F860     		str	r0, [r7, #12]
 891 05a8 7A60     		str	r2, [r7, #4]
 892 05aa 3B60     		str	r3, [r7]
 893 05ac 0B46     		mov	r3, r1
 894 05ae FB72     		strb	r3, [r7, #11]
 320:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    uint8_t n;
 321:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    uint8_t k;
 322:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    uint8_t nb;
 323:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    uint8_t* pbuf;
 324:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    uint8_t eiv[16];
 325:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** 
 326:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    nb = len >> 4;
 895              		.loc 1 326 0
 896 05b0 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 897 05b2 1B09     		lsrs	r3, r3, #4
 898 05b4 87F82530 		strb	r3, [r7, #37]
 327:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    for (n = 0; n < nb; n++) {
 899              		.loc 1 327 0
 900 05b8 0023     		movs	r3, #0
 901 05ba 87F82730 		strb	r3, [r7, #39]
 902 05be 3CE0     		b	.L44
 903              	.L47:
 328:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****       pbuf = &buffer[16 * n];
 904              		.loc 1 328 0
 905 05c0 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 906 05c4 1B01     		lsls	r3, r3, #4
 907 05c6 1A46     		mov	r2, r3
 908 05c8 FB68     		ldr	r3, [r7, #12]
 909 05ca 1344     		add	r3, r3, r2
 910 05cc 3B62     		str	r3, [r7, #32]
 329:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****       memcpy(eiv, iv, 16);
 911              		.loc 1 329 0
 912 05ce 3B68     		ldr	r3, [r7]
 913 05d0 07F11004 		add	r4, r7, #16
 914 05d4 1868     		ldr	r0, [r3]	@ unaligned
 915 05d6 5968     		ldr	r1, [r3, #4]	@ unaligned
 916 05d8 9A68     		ldr	r2, [r3, #8]	@ unaligned
 917 05da DB68     		ldr	r3, [r3, #12]	@ unaligned
 918 05dc 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 330:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****       openaes_enc(eiv, key); 
 919              		.loc 1 330 0
 920 05de 07F11003 		add	r3, r7, #16
 921 05e2 7968     		ldr	r1, [r7, #4]
 922 05e4 1846     		mov	r0, r3
 923 05e6 FFF7FEFF 		bl	openaes_enc
 331:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****       // may be faster if vector are aligned to 4 bytes (use long instead char in xor)
 332:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****       for (k = 0; k < 16; k++) {
 924              		.loc 1 332 0
 925 05ea 0023     		movs	r3, #0
 926 05ec 87F82630 		strb	r3, [r7, #38]
 927 05f0 17E0     		b	.L45
 928              	.L46:
 333:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****          pbuf[k] ^= eiv[k];
 929              		.loc 1 333 0 discriminator 3
 930 05f2 97F82630 		ldrb	r3, [r7, #38]	@ zero_extendqisi2
 931 05f6 3A6A     		ldr	r2, [r7, #32]
 932 05f8 1344     		add	r3, r3, r2
 933 05fa 97F82620 		ldrb	r2, [r7, #38]	@ zero_extendqisi2
 934 05fe 396A     		ldr	r1, [r7, #32]
 935 0600 0A44     		add	r2, r2, r1
 936 0602 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 937 0604 97F82620 		ldrb	r2, [r7, #38]	@ zero_extendqisi2
 938 0608 07F12800 		add	r0, r7, #40
 939 060c 0244     		add	r2, r2, r0
 940 060e 12F8182C 		ldrb	r2, [r2, #-24]	@ zero_extendqisi2
 941 0612 4A40     		eors	r2, r2, r1
 942 0614 D2B2     		uxtb	r2, r2
 943 0616 1A70     		strb	r2, [r3]
 332:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****          pbuf[k] ^= eiv[k];
 944              		.loc 1 332 0 discriminator 3
 945 0618 97F82630 		ldrb	r3, [r7, #38]	@ zero_extendqisi2
 946 061c 0133     		adds	r3, r3, #1
 947 061e 87F82630 		strb	r3, [r7, #38]
 948              	.L45:
 332:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****          pbuf[k] ^= eiv[k];
 949              		.loc 1 332 0 is_stmt 0 discriminator 1
 950 0622 97F82630 		ldrb	r3, [r7, #38]	@ zero_extendqisi2
 951 0626 0F2B     		cmp	r3, #15
 952 0628 E3D9     		bls	.L46
 334:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****       }
 335:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****       inc_counter(iv);
 953              		.loc 1 335 0 is_stmt 1 discriminator 2
 954 062a 3868     		ldr	r0, [r7]
 955 062c 00F010F8 		bl	inc_counter
 327:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****       pbuf = &buffer[16 * n];
 956              		.loc 1 327 0 discriminator 2
 957 0630 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 958 0634 0133     		adds	r3, r3, #1
 959 0636 87F82730 		strb	r3, [r7, #39]
 960              	.L44:
 327:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****       pbuf = &buffer[16 * n];
 961              		.loc 1 327 0 is_stmt 0 discriminator 1
 962 063a 97F82720 		ldrb	r2, [r7, #39]	@ zero_extendqisi2
 963 063e 97F82530 		ldrb	r3, [r7, #37]	@ zero_extendqisi2
 964 0642 9A42     		cmp	r2, r3
 965 0644 BCD3     		bcc	.L47
 336:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    }
 337:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** 
 338:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    return E_SUCCESS;
 966              		.loc 1 338 0 is_stmt 1
 967 0646 0023     		movs	r3, #0
 339:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** }
 968              		.loc 1 339 0
 969 0648 1846     		mov	r0, r3
 970 064a 2C37     		adds	r7, r7, #44
 971              		.cfi_def_cfa_offset 12
 972 064c BD46     		mov	sp, r7
 973              		.cfi_def_cfa_register 13
 974              		@ sp needed
 975 064e 90BD     		pop	{r4, r7, pc}
 976              		.cfi_endproc
 977              	.LFE5:
 979              		.align	2
 980              		.thumb
 981              		.thumb_func
 983              	inc_counter:
 984              	.LFB6:
 340:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** 
 341:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** static void inc_counter(uint8_t* counter) {
 985              		.loc 1 341 0
 986              		.cfi_startproc
 987              		@ args = 0, pretend = 0, frame = 16
 988              		@ frame_needed = 1, uses_anonymous_args = 0
 989              		@ link register save eliminated.
 990 0650 80B4     		push	{r7}
 991              		.cfi_def_cfa_offset 4
 992              		.cfi_offset 7, -4
 993 0652 85B0     		sub	sp, sp, #20
 994              		.cfi_def_cfa_offset 24
 995 0654 00AF     		add	r7, sp, #0
 996              		.cfi_def_cfa_register 7
 997 0656 7860     		str	r0, [r7, #4]
 342:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    // from openssl
 343:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    uint32_t n = 16;
 998              		.loc 1 343 0
 999 0658 1023     		movs	r3, #16
 1000 065a FB60     		str	r3, [r7, #12]
 1001              	.L52:
 344:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    uint8_t  c;
 345:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    do {
 346:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****       --n;
 1002              		.loc 1 346 0
 1003 065c FB68     		ldr	r3, [r7, #12]
 1004 065e 013B     		subs	r3, r3, #1
 1005 0660 FB60     		str	r3, [r7, #12]
 347:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****       c = counter[n];
 1006              		.loc 1 347 0
 1007 0662 7A68     		ldr	r2, [r7, #4]
 1008 0664 FB68     		ldr	r3, [r7, #12]
 1009 0666 1344     		add	r3, r3, r2
 1010 0668 1B78     		ldrb	r3, [r3]
 1011 066a FB72     		strb	r3, [r7, #11]
 348:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****       ++c;
 1012              		.loc 1 348 0
 1013 066c FB7A     		ldrb	r3, [r7, #11]
 1014 066e 0133     		adds	r3, r3, #1
 1015 0670 FB72     		strb	r3, [r7, #11]
 349:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****       counter[n] = c;
 1016              		.loc 1 349 0
 1017 0672 7A68     		ldr	r2, [r7, #4]
 1018 0674 FB68     		ldr	r3, [r7, #12]
 1019 0676 1344     		add	r3, r3, r2
 1020 0678 FA7A     		ldrb	r2, [r7, #11]
 1021 067a 1A70     		strb	r2, [r3]
 350:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****       if (c) return;
 1022              		.loc 1 350 0
 1023 067c FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 1024 067e 002B     		cmp	r3, #0
 1025 0680 03D1     		bne	.L53
 351:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****    } while (n);
 1026              		.loc 1 351 0
 1027 0682 FB68     		ldr	r3, [r7, #12]
 1028 0684 002B     		cmp	r3, #0
 1029 0686 E9D1     		bne	.L52
 1030 0688 00E0     		b	.L49
 1031              	.L53:
 350:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c ****       if (c) return;
 1032              		.loc 1 350 0
 1033 068a 00BF     		nop
 1034              	.L49:
 352:build/openmote-cc2538_armgcc/bsp/boards/common/openccms.c **** }
 1035              		.loc 1 352 0
 1036 068c 1437     		adds	r7, r7, #20
 1037              		.cfi_def_cfa_offset 4
 1038 068e BD46     		mov	sp, r7
 1039              		.cfi_def_cfa_register 13
 1040              		@ sp needed
 1041 0690 80BC     		pop	{r7}
 1042              		.cfi_restore 7
 1043              		.cfi_def_cfa_offset 0
 1044 0692 7047     		bx	lr
 1045              		.cfi_endproc
 1046              	.LFE6:
 1048              	.Letext0:
 1049              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 1050              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 1051              		.file 4 "inc/opendefs.h"
 1052              		.file 5 "bsp/boards/openmote-cc2538/board_info.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 openccms.c
     /tmp/ccqMuasW.s:20     .rodata:0000000000000000 $d
     /tmp/ccqMuasW.s:23     .rodata:0000000000000000 rreg_uriquery
     /tmp/ccqMuasW.s:28     .rodata:0000000000000008 infoBoardname
     /tmp/ccqMuasW.s:33     .rodata:0000000000000010 infouCName
     /tmp/ccqMuasW.s:38     .rodata:0000000000000018 infoRadioName
     /tmp/ccqMuasW.s:43     .rodata:0000000000000024 infoStackName
     /tmp/ccqMuasW.s:46     .text:0000000000000000 $t
     /tmp/ccqMuasW.s:51     .text:0000000000000000 openccms_enc
     /tmp/ccqMuasW.s:280    .text:0000000000000178 aes_cbc_mac
     /tmp/ccqMuasW.s:591    .text:00000000000003c0 aes_ctr_enc
     /tmp/ccqMuasW.s:162    .text:00000000000000b0 openccms_dec
     /tmp/ccqMuasW.s:773    .text:0000000000000520 aes_cbc_enc_raw
     /tmp/ccqMuasW.s:875    .text:00000000000005a0 aes_ctr_enc_raw
     /tmp/ccqMuasW.s:983    .text:0000000000000650 inc_counter
                     .debug_frame:0000000000000010 $d
                           .group:0000000000000000 wm4.0.8e445c0106ab795ab4704214cba6f089
                           .group:0000000000000000 wm4._newlib_version.h.4.ad342815780c8db09778091a421b5b5b
                           .group:0000000000000000 wm4.newlib.h.21.0b9fc973bddc8b940a18de2b6ea6adc7
                           .group:0000000000000000 wm4.features.h.22.5cdadbb3efe495d1c9e38350b8c376c7
                           .group:0000000000000000 wm4.config.h.219.65a553ab5bef5482f0d7880b0d33015e
                           .group:0000000000000000 wm4._ansi.h.23.9f8fcfa20193763fcf364fb91705c94b
                           .group:0000000000000000 wm4.stddef.h.39.a38874c8f8a57e66301090908ec2a69f
                           .group:0000000000000000 wm4._default_types.h.6.35ee9e747940367bf2a634907d1c2382
                           .group:0000000000000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:0000000000000000 wm4._types.h.125.5cf8a495f1f7ef36777ad868a1e32068
                           .group:0000000000000000 wm4.stddef.h.161.5349cb105733e8777bfb0cf53c4e3f34
                           .group:0000000000000000 wm4._types.h.183.c226d164ceca1f2ecb9ae9360c54a098
                           .group:0000000000000000 wm4.reent.h.17.850ac0a908956e5fb788be1b80de2f32
                           .group:0000000000000000 wm4.cdefs.h.47.ba62642086d429b4f95c2381cae1c0aa
                           .group:0000000000000000 wm4.string.h.15.dab3980bf35408a4c507182805e2de3a
                           .group:0000000000000000 wm4.stddef.h.161.19e15733342b50ead2919490b095303e
                           .group:0000000000000000 wm4._intsup.h.10.b82bf99f69d6a5c085fc866de0d3eb9b
                           .group:0000000000000000 wm4._stdint.h.10.7a5f60e6741af4a5594a3867d347e1f9
                           .group:0000000000000000 wm4.stdint.h.23.373a9d32a9e4c2e88fd347156532d281
                           .group:0000000000000000 wm4.toolchain_defs.h.2.e5fd326231d01413e5361944b26cde07
                           .group:0000000000000000 wm4.stdbool.h.29.07dce69c3b78884144b7f7bd19483461
                           .group:0000000000000000 wm4.hw_types.h.67.b10589a0806dcc2d274d6fab6b736519
                           .group:0000000000000000 wm4.interrupt.h.41.272fc4ec0e276feb439e7974d0f77eaf
                           .group:0000000000000000 wm4.board_info.h.22.1291259c351bc018e4d4402148b3c6db
                           .group:0000000000000000 wm4.opendefs.h.23.47191652995b7fa35f12da40c3552cda
                           .group:0000000000000000 wm4.cryptoengine.h.8.da068b9149b7576990bbc3b5f1e9b415

UNDEFINED SYMBOLS
memcpy
memcmp
memset
openaes_enc
