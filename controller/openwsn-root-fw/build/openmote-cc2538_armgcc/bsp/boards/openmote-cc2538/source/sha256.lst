   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"sha256.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.align	2
  20              		.global	SHA256Init
  21              		.thumb
  22              		.thumb_func
  24              	SHA256Init:
  25              	.LFB0:
  26              		.file 1 "build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c"
   1:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** /******************************************************************************
   2:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** *  Filename:       sha256.c
   3:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** *  Revised:        $Date: 2013-04-03 14:12:40 +0200 (Wed, 03 Apr 2013) $
   4:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** *  Revision:       $Revision: 9611 $
   5:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** *
   6:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** *  Description:    Support for Hardware SHA 256
   7:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** *
   8:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** *  Copyright (C) 2012 Texas Instruments Incorporated - http://www.ti.com/
   9:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** *
  10:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** *
  11:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** *  Redistribution and use in source and binary forms, with or without
  12:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** *  modification, are permitted provided that the following conditions
  13:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** *  are met:
  14:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** *
  15:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** *    Redistributions of source code must retain the above copyright
  16:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** *    notice, this list of conditions and the following disclaimer.
  17:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** *
  18:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** *    Redistributions in binary form must reproduce the above copyright
  19:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** *    notice, this list of conditions and the following disclaimer in the
  20:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** *    documentation and/or other materials provided with the distribution.
  21:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** *
  22:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** *    Neither the name of Texas Instruments Incorporated nor the names of
  23:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** *    its contributors may be used to endorse or promote products derived
  24:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** *    from this software without specific prior written permission.
  25:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** *
  26:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  27:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  28:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
  29:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
  30:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  31:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  32:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  33:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  34:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  35:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  36:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** *  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  37:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** *
  38:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** ******************************************************************************/
  39:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** 
  40:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** //*****************************************************************************
  41:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** //
  42:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** //! \addtogroup sha256_api
  43:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** //! @{
  44:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** //
  45:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** //*****************************************************************************
  46:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** 
  47:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** #include "aes.h"
  48:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** #include "sha256.h"
  49:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** #include <string.h>
  50:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** 
  51:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** static uint8_t SHA256HashResume(tSHA256State * psMd, uint8_t *ui8In, uint8_t *ui8Out);
  52:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** static uint8_t SHA256HashNew(tSHA256State * psMd, uint8_t *ui8In, uint8_t *ui8Out);
  53:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** 
  54:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** //*****************************************************************************
  55:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** //
  56:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** //! SHA256init initializes the hash state.
  57:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** //!
  58:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** //! \param psMd is the pointer to hash state you wish to initialize.
  59:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** //!
  60:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** //! For the pointer to hash state parameter \e psMd the calling function has to
  61:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** //! allocate the hash state structure and pass the pointer to the structure.
  62:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** //!
  63:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** //! \return  SHA256_SUCCESS if successful.
  64:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** //
  65:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** //*****************************************************************************
  66:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** uint8_t SHA256Init(tSHA256State * psMd)
  67:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** {
  27              		.loc 1 67 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 8
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32 0000 90B4     		push	{r4, r7}
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 4, -8
  35              		.cfi_offset 7, -4
  36 0002 82B0     		sub	sp, sp, #8
  37              		.cfi_def_cfa_offset 16
  38 0004 00AF     		add	r7, sp, #0
  39              		.cfi_def_cfa_register 7
  40 0006 7860     		str	r0, [r7, #4]
  68:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     if(psMd == NULL)
  41              		.loc 1 68 0
  42 0008 7B68     		ldr	r3, [r7, #4]
  43 000a 002B     		cmp	r3, #0
  44 000c 01D1     		bne	.L2
  69:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     {
  70:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****         return (SHA256_NULL_ERROR);
  45              		.loc 1 70 0
  46 000e 0923     		movs	r3, #9
  47 0010 12E0     		b	.L3
  48              	.L2:
  71:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     }
  72:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** 
  73:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     psMd->curlen = 0;
  49              		.loc 1 73 0
  50 0012 7B68     		ldr	r3, [r7, #4]
  51 0014 0022     		movs	r2, #0
  52 0016 9A62     		str	r2, [r3, #40]
  74:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     psMd->length = 0;
  53              		.loc 1 74 0
  54 0018 7A68     		ldr	r2, [r7, #4]
  55 001a 4FF00003 		mov	r3, #0
  56 001e 4FF00004 		mov	r4, #0
  57 0022 C2E90034 		strd	r3, [r2]
  75:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     psMd->new_digest = true;
  58              		.loc 1 75 0
  59 0026 7B68     		ldr	r3, [r7, #4]
  60 0028 0122     		movs	r2, #1
  61 002a 83F86C20 		strb	r2, [r3, #108]
  76:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     psMd->final_digest = false;
  62              		.loc 1 76 0
  63 002e 7B68     		ldr	r3, [r7, #4]
  64 0030 0022     		movs	r2, #0
  65 0032 83F86D20 		strb	r2, [r3, #109]
  77:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     return (SHA256_SUCCESS);
  66              		.loc 1 77 0
  67 0036 0023     		movs	r3, #0
  68              	.L3:
  78:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** }
  69              		.loc 1 78 0
  70 0038 1846     		mov	r0, r3
  71 003a 0837     		adds	r7, r7, #8
  72              		.cfi_def_cfa_offset 8
  73 003c BD46     		mov	sp, r7
  74              		.cfi_def_cfa_register 13
  75              		@ sp needed
  76 003e 90BC     		pop	{r4, r7}
  77              		.cfi_restore 7
  78              		.cfi_restore 4
  79              		.cfi_def_cfa_offset 0
  80 0040 7047     		bx	lr
  81              		.cfi_endproc
  82              	.LFE0:
  84 0042 00BF     		.align	2
  85              		.global	SHA256Process
  86              		.thumb
  87              		.thumb_func
  89              	SHA256Process:
  90              	.LFB1:
  79:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** 
  80:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** //*****************************************************************************
  81:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** //
  82:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** //! SHA256Process processes a block of memory through the hash. This
  83:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** //! function must be called only after SHA256init().
  84:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** //!
  85:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** //! \param   psMd is the pointer to hash state.
  86:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** //! \param   ui8In is the pointer to the data to hash.
  87:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** //! \param   ui32InLen is the length of the data to hash ui8In bytes (octets).
  88:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** //!
  89:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** //! For the pointer to hash state parameter \e psMd the calling function must
  90:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** //! allocate the hash state structure and pass the pointer to the structure.
  91:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** //!
  92:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** //! \return  SHA256_SUCCESS if successful.
  93:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** //
  94:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** //*****************************************************************************
  95:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** uint8_t SHA256Process(tSHA256State * psMd, uint8_t *ui8In, uint32_t ui32InLen)
  96:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** {
  91              		.loc 1 96 0
  92              		.cfi_startproc
  93              		@ args = 0, pretend = 0, frame = 32
  94              		@ frame_needed = 1, uses_anonymous_args = 0
  95 0044 90B5     		push	{r4, r7, lr}
  96              		.cfi_def_cfa_offset 12
  97              		.cfi_offset 4, -12
  98              		.cfi_offset 7, -8
  99              		.cfi_offset 14, -4
 100 0046 89B0     		sub	sp, sp, #36
 101              		.cfi_def_cfa_offset 48
 102 0048 00AF     		add	r7, sp, #0
 103              		.cfi_def_cfa_register 7
 104 004a F860     		str	r0, [r7, #12]
 105 004c B960     		str	r1, [r7, #8]
 106 004e 7A60     		str	r2, [r7, #4]
  97:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     uint8_t  ui8Err;
  98:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     uint32_t ui32N, ui32I;
  99:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** 
 100:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     if(psMd == NULL)
 107              		.loc 1 100 0
 108 0050 FB68     		ldr	r3, [r7, #12]
 109 0052 002B     		cmp	r3, #0
 110 0054 01D1     		bne	.L5
 101:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     {
 102:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****         return (SHA256_NULL_ERROR);
 111              		.loc 1 102 0
 112 0056 0923     		movs	r3, #9
 113 0058 59E1     		b	.L6
 114              	.L5:
 103:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     }
 104:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     if(ui8In == NULL)
 115              		.loc 1 104 0
 116 005a BB68     		ldr	r3, [r7, #8]
 117 005c 002B     		cmp	r3, #0
 118 005e 01D1     		bne	.L7
 105:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     {
 106:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****         return (SHA256_NULL_ERROR);
 119              		.loc 1 106 0
 120 0060 0923     		movs	r3, #9
 121 0062 54E1     		b	.L6
 122              	.L7:
 107:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     }
 108:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** 
 109:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     if(psMd->curlen > sizeof(psMd->buf))
 123              		.loc 1 109 0
 124 0064 FB68     		ldr	r3, [r7, #12]
 125 0066 9B6A     		ldr	r3, [r3, #40]
 126 0068 402B     		cmp	r3, #64
 127 006a 01D9     		bls	.L8
 110:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     {
 111:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****         return (SHA256_INVALID_PARAM);
 128              		.loc 1 111 0
 129 006c 0623     		movs	r3, #6
 130 006e 4EE1     		b	.L6
 131              	.L8:
 112:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     }
 113:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** 
 114:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     g_ui8CurrentAESOp = AES_SHA256;
 132              		.loc 1 114 0
 133 0070 994B     		ldr	r3, .L27
 134 0072 0422     		movs	r2, #4
 135 0074 1A70     		strb	r2, [r3]
 115:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     if(ui32InLen > 0 && psMd->new_digest == true)
 136              		.loc 1 115 0
 137 0076 7B68     		ldr	r3, [r7, #4]
 138 0078 002B     		cmp	r3, #0
 139 007a 00F03B81 		beq	.L17
 140              		.loc 1 115 0 is_stmt 0 discriminator 1
 141 007e FB68     		ldr	r3, [r7, #12]
 142 0080 93F86C30 		ldrb	r3, [r3, #108]	@ zero_extendqisi2
 143 0084 012B     		cmp	r3, #1
 144 0086 40F03581 		bne	.L17
 116:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     {
 117:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****         if(psMd->curlen == 0 && ui32InLen > SHA256_BLOCK_SIZE)
 145              		.loc 1 117 0 is_stmt 1
 146 008a FB68     		ldr	r3, [r7, #12]
 147 008c 9B6A     		ldr	r3, [r3, #40]
 148 008e 002B     		cmp	r3, #0
 149 0090 3FD1     		bne	.L10
 150              		.loc 1 117 0 is_stmt 0 discriminator 1
 151 0092 7B68     		ldr	r3, [r7, #4]
 152 0094 402B     		cmp	r3, #64
 153 0096 3CD9     		bls	.L10
 118:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****         {
 119:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****             for(ui32I = 0; ui32I < SHA256_BLOCK_SIZE; ui32I++)
 154              		.loc 1 119 0 is_stmt 1
 155 0098 0023     		movs	r3, #0
 156 009a FB61     		str	r3, [r7, #28]
 157 009c 0FE0     		b	.L11
 158              	.L12:
 120:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****             {
 121:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****                 psMd->buf[psMd->curlen + ui32I] = ui8In[ui32I];
 159              		.loc 1 121 0 discriminator 3
 160 009e FB68     		ldr	r3, [r7, #12]
 161 00a0 9A6A     		ldr	r2, [r3, #40]
 162 00a2 FB69     		ldr	r3, [r7, #28]
 163 00a4 1344     		add	r3, r3, r2
 164 00a6 B968     		ldr	r1, [r7, #8]
 165 00a8 FA69     		ldr	r2, [r7, #28]
 166 00aa 0A44     		add	r2, r2, r1
 167 00ac 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 168 00ae FA68     		ldr	r2, [r7, #12]
 169 00b0 1344     		add	r3, r3, r2
 170 00b2 0A46     		mov	r2, r1
 171 00b4 83F82C20 		strb	r2, [r3, #44]
 119:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****             {
 172              		.loc 1 119 0 discriminator 3
 173 00b8 FB69     		ldr	r3, [r7, #28]
 174 00ba 0133     		adds	r3, r3, #1
 175 00bc FB61     		str	r3, [r7, #28]
 176              	.L11:
 119:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****             {
 177              		.loc 1 119 0 is_stmt 0 discriminator 1
 178 00be FB69     		ldr	r3, [r7, #28]
 179 00c0 3F2B     		cmp	r3, #63
 180 00c2 ECD9     		bls	.L12
 122:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****             }
 123:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****             if((ui8Err = SHA256HashNew(psMd, (uint8_t *)psMd->buf,
 181              		.loc 1 123 0 is_stmt 1
 182 00c4 FB68     		ldr	r3, [r7, #12]
 183 00c6 03F12C01 		add	r1, r3, #44
 124:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****                                        (uint8_t *)psMd->state)) != SHA256_SUCCESS)
 184              		.loc 1 124 0
 185 00ca FB68     		ldr	r3, [r7, #12]
 186 00cc 0833     		adds	r3, r3, #8
 123:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****                                        (uint8_t *)psMd->state)) != SHA256_SUCCESS)
 187              		.loc 1 123 0
 188 00ce 1A46     		mov	r2, r3
 189 00d0 F868     		ldr	r0, [r7, #12]
 190 00d2 00F085F9 		bl	SHA256HashNew
 191 00d6 0346     		mov	r3, r0
 192 00d8 FB76     		strb	r3, [r7, #27]
 193 00da FB7E     		ldrb	r3, [r7, #27]	@ zero_extendqisi2
 194 00dc 002B     		cmp	r3, #0
 195 00de 04D0     		beq	.L13
 125:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****             {
 126:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****                 g_ui8CurrentAESOp = AES_NONE;
 196              		.loc 1 126 0
 197 00e0 7D4B     		ldr	r3, .L27
 198 00e2 0022     		movs	r2, #0
 199 00e4 1A70     		strb	r2, [r3]
 127:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****                 return (ui8Err);
 200              		.loc 1 127 0
 201 00e6 FB7E     		ldrb	r3, [r7, #27]	@ zero_extendqisi2
 202 00e8 11E1     		b	.L6
 203              	.L13:
 128:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****             }
 129:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****             psMd->new_digest = false;
 204              		.loc 1 129 0
 205 00ea FB68     		ldr	r3, [r7, #12]
 206 00ec 0022     		movs	r2, #0
 207 00ee 83F86C20 		strb	r2, [r3, #108]
 130:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****             psMd->length += SHA256_BLOCK_SIZE * 8;
 208              		.loc 1 130 0
 209 00f2 FB68     		ldr	r3, [r7, #12]
 210 00f4 18CB     		ldmia	r3, {r3-r4}
 211 00f6 13F50073 		adds	r3, r3, #512
 212 00fa 44F10004 		adc	r4, r4, #0
 213 00fe FA68     		ldr	r2, [r7, #12]
 214 0100 C2E90034 		strd	r3, [r2]
 131:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****             ui32InLen -= SHA256_BLOCK_SIZE;
 215              		.loc 1 131 0
 216 0104 7B68     		ldr	r3, [r7, #4]
 217 0106 403B     		subs	r3, r3, #64
 218 0108 7B60     		str	r3, [r7, #4]
 132:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****             ui8In += SHA256_BLOCK_SIZE;
 219              		.loc 1 132 0
 220 010a BB68     		ldr	r3, [r7, #8]
 221 010c 4033     		adds	r3, r3, #64
 222 010e BB60     		str	r3, [r7, #8]
 223 0110 59E0     		b	.L9
 224              	.L10:
 133:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** 
 134:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****         }
 135:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****         else
 136:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****         {
 137:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****             ui32N = MIN(ui32InLen, (SHA256_BLOCK_SIZE - psMd->curlen));
 225              		.loc 1 137 0
 226 0112 FB68     		ldr	r3, [r7, #12]
 227 0114 9B6A     		ldr	r3, [r3, #40]
 228 0116 C3F14002 		rsb	r2, r3, #64
 229 011a 7B68     		ldr	r3, [r7, #4]
 230 011c 9342     		cmp	r3, r2
 231 011e 28BF     		it	cs
 232 0120 1346     		movcs	r3, r2
 233 0122 7B61     		str	r3, [r7, #20]
 138:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****             for(ui32I = 0; ui32I < ui32N; ui32I++)
 234              		.loc 1 138 0
 235 0124 0023     		movs	r3, #0
 236 0126 FB61     		str	r3, [r7, #28]
 237 0128 0FE0     		b	.L14
 238              	.L15:
 139:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****             {
 140:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****                 psMd->buf[psMd->curlen + ui32I] = ui8In[ui32I];
 239              		.loc 1 140 0 discriminator 3
 240 012a FB68     		ldr	r3, [r7, #12]
 241 012c 9A6A     		ldr	r2, [r3, #40]
 242 012e FB69     		ldr	r3, [r7, #28]
 243 0130 1344     		add	r3, r3, r2
 244 0132 B968     		ldr	r1, [r7, #8]
 245 0134 FA69     		ldr	r2, [r7, #28]
 246 0136 0A44     		add	r2, r2, r1
 247 0138 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 248 013a FA68     		ldr	r2, [r7, #12]
 249 013c 1344     		add	r3, r3, r2
 250 013e 0A46     		mov	r2, r1
 251 0140 83F82C20 		strb	r2, [r3, #44]
 138:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****             for(ui32I = 0; ui32I < ui32N; ui32I++)
 252              		.loc 1 138 0 discriminator 3
 253 0144 FB69     		ldr	r3, [r7, #28]
 254 0146 0133     		adds	r3, r3, #1
 255 0148 FB61     		str	r3, [r7, #28]
 256              	.L14:
 138:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****             for(ui32I = 0; ui32I < ui32N; ui32I++)
 257              		.loc 1 138 0 is_stmt 0 discriminator 1
 258 014a FA69     		ldr	r2, [r7, #28]
 259 014c 7B69     		ldr	r3, [r7, #20]
 260 014e 9A42     		cmp	r2, r3
 261 0150 EBD3     		bcc	.L15
 141:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****             }
 142:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****             psMd->curlen += ui32N;
 262              		.loc 1 142 0 is_stmt 1
 263 0152 FB68     		ldr	r3, [r7, #12]
 264 0154 9A6A     		ldr	r2, [r3, #40]
 265 0156 7B69     		ldr	r3, [r7, #20]
 266 0158 1A44     		add	r2, r2, r3
 267 015a FB68     		ldr	r3, [r7, #12]
 268 015c 9A62     		str	r2, [r3, #40]
 143:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****             ui8In          += ui32N;
 269              		.loc 1 143 0
 270 015e BA68     		ldr	r2, [r7, #8]
 271 0160 7B69     		ldr	r3, [r7, #20]
 272 0162 1344     		add	r3, r3, r2
 273 0164 BB60     		str	r3, [r7, #8]
 144:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****             ui32InLen       -= ui32N;
 274              		.loc 1 144 0
 275 0166 7A68     		ldr	r2, [r7, #4]
 276 0168 7B69     		ldr	r3, [r7, #20]
 277 016a D31A     		subs	r3, r2, r3
 278 016c 7B60     		str	r3, [r7, #4]
 145:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****             if(psMd->curlen == SHA256_BLOCK_SIZE && ui32InLen > 0)
 279              		.loc 1 145 0
 280 016e FB68     		ldr	r3, [r7, #12]
 281 0170 9B6A     		ldr	r3, [r3, #40]
 282 0172 402B     		cmp	r3, #64
 283 0174 40F0BE80 		bne	.L17
 284              		.loc 1 145 0 is_stmt 0 discriminator 1
 285 0178 7B68     		ldr	r3, [r7, #4]
 286 017a 002B     		cmp	r3, #0
 287 017c 00F0BA80 		beq	.L17
 146:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****             {
 147:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****                 if((ui8Err = SHA256HashNew(psMd, (uint8_t *)psMd->buf,
 288              		.loc 1 147 0 is_stmt 1
 289 0180 FB68     		ldr	r3, [r7, #12]
 290 0182 03F12C01 		add	r1, r3, #44
 148:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****                                            (uint8_t *)psMd->state)) != SHA256_SUCCESS)
 291              		.loc 1 148 0
 292 0186 FB68     		ldr	r3, [r7, #12]
 293 0188 0833     		adds	r3, r3, #8
 147:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****                                            (uint8_t *)psMd->state)) != SHA256_SUCCESS)
 294              		.loc 1 147 0
 295 018a 1A46     		mov	r2, r3
 296 018c F868     		ldr	r0, [r7, #12]
 297 018e 00F027F9 		bl	SHA256HashNew
 298 0192 0346     		mov	r3, r0
 299 0194 FB76     		strb	r3, [r7, #27]
 300 0196 FB7E     		ldrb	r3, [r7, #27]	@ zero_extendqisi2
 301 0198 002B     		cmp	r3, #0
 302 019a 04D0     		beq	.L16
 149:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****                 {
 150:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****                     g_ui8CurrentAESOp = AES_NONE;
 303              		.loc 1 150 0
 304 019c 4E4B     		ldr	r3, .L27
 305 019e 0022     		movs	r2, #0
 306 01a0 1A70     		strb	r2, [r3]
 151:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****                     return (ui8Err);
 307              		.loc 1 151 0
 308 01a2 FB7E     		ldrb	r3, [r7, #27]	@ zero_extendqisi2
 309 01a4 B3E0     		b	.L6
 310              	.L16:
 152:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****                 }
 153:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****                 psMd->new_digest = false;
 311              		.loc 1 153 0
 312 01a6 FB68     		ldr	r3, [r7, #12]
 313 01a8 0022     		movs	r2, #0
 314 01aa 83F86C20 		strb	r2, [r3, #108]
 154:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****                 psMd->length += 8 * SHA256_BLOCK_SIZE;
 315              		.loc 1 154 0
 316 01ae FB68     		ldr	r3, [r7, #12]
 317 01b0 18CB     		ldmia	r3, {r3-r4}
 318 01b2 13F50073 		adds	r3, r3, #512
 319 01b6 44F10004 		adc	r4, r4, #0
 320 01ba FA68     		ldr	r2, [r7, #12]
 321 01bc C2E90034 		strd	r3, [r2]
 155:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****                 psMd->curlen = 0;
 322              		.loc 1 155 0
 323 01c0 FB68     		ldr	r3, [r7, #12]
 324 01c2 0022     		movs	r2, #0
 325 01c4 9A62     		str	r2, [r3, #40]
 326              	.L9:
 156:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****             }
 157:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****         }
 158:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     }
 159:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** 
 160:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     while(ui32InLen > 0 && psMd->new_digest == false)
 327              		.loc 1 160 0
 328 01c6 95E0     		b	.L17
 329              	.L26:
 161:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     {
 162:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****         if(psMd->curlen == 0 && ui32InLen > SHA256_BLOCK_SIZE)
 330              		.loc 1 162 0
 331 01c8 FB68     		ldr	r3, [r7, #12]
 332 01ca 9B6A     		ldr	r3, [r3, #40]
 333 01cc 002B     		cmp	r3, #0
 334 01ce 3BD1     		bne	.L18
 335              		.loc 1 162 0 is_stmt 0 discriminator 1
 336 01d0 7B68     		ldr	r3, [r7, #4]
 337 01d2 402B     		cmp	r3, #64
 338 01d4 38D9     		bls	.L18
 163:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****         {
 164:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****             for(ui32I = 0; ui32I < SHA256_BLOCK_SIZE; ui32I++)
 339              		.loc 1 164 0 is_stmt 1
 340 01d6 0023     		movs	r3, #0
 341 01d8 FB61     		str	r3, [r7, #28]
 342 01da 0FE0     		b	.L19
 343              	.L20:
 165:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****             {
 166:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****                 psMd->buf[psMd->curlen + ui32I] = ui8In[ui32I];
 344              		.loc 1 166 0 discriminator 3
 345 01dc FB68     		ldr	r3, [r7, #12]
 346 01de 9A6A     		ldr	r2, [r3, #40]
 347 01e0 FB69     		ldr	r3, [r7, #28]
 348 01e2 1344     		add	r3, r3, r2
 349 01e4 B968     		ldr	r1, [r7, #8]
 350 01e6 FA69     		ldr	r2, [r7, #28]
 351 01e8 0A44     		add	r2, r2, r1
 352 01ea 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 353 01ec FA68     		ldr	r2, [r7, #12]
 354 01ee 1344     		add	r3, r3, r2
 355 01f0 0A46     		mov	r2, r1
 356 01f2 83F82C20 		strb	r2, [r3, #44]
 164:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****             {
 357              		.loc 1 164 0 discriminator 3
 358 01f6 FB69     		ldr	r3, [r7, #28]
 359 01f8 0133     		adds	r3, r3, #1
 360 01fa FB61     		str	r3, [r7, #28]
 361              	.L19:
 164:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****             {
 362              		.loc 1 164 0 is_stmt 0 discriminator 1
 363 01fc FB69     		ldr	r3, [r7, #28]
 364 01fe 3F2B     		cmp	r3, #63
 365 0200 ECD9     		bls	.L20
 167:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****             }
 168:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****             if((ui8Err = SHA256HashResume(psMd, (uint8_t *)psMd->buf,
 366              		.loc 1 168 0 is_stmt 1
 367 0202 FB68     		ldr	r3, [r7, #12]
 368 0204 03F12C01 		add	r1, r3, #44
 169:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****                                           (uint8_t *)psMd->state)) != SHA256_SUCCESS)
 369              		.loc 1 169 0
 370 0208 FB68     		ldr	r3, [r7, #12]
 371 020a 0833     		adds	r3, r3, #8
 168:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****                                           (uint8_t *)psMd->state)) != SHA256_SUCCESS)
 372              		.loc 1 168 0
 373 020c 1A46     		mov	r2, r3
 374 020e F868     		ldr	r0, [r7, #12]
 375 0210 00F076F9 		bl	SHA256HashResume
 376 0214 0346     		mov	r3, r0
 377 0216 FB76     		strb	r3, [r7, #27]
 378 0218 FB7E     		ldrb	r3, [r7, #27]	@ zero_extendqisi2
 379 021a 002B     		cmp	r3, #0
 380 021c 04D0     		beq	.L21
 170:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****             {
 171:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****                 g_ui8CurrentAESOp = AES_NONE;
 381              		.loc 1 171 0
 382 021e 2E4B     		ldr	r3, .L27
 383 0220 0022     		movs	r2, #0
 384 0222 1A70     		strb	r2, [r3]
 172:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****                 return (ui8Err);
 385              		.loc 1 172 0
 386 0224 FB7E     		ldrb	r3, [r7, #27]	@ zero_extendqisi2
 387 0226 72E0     		b	.L6
 388              	.L21:
 173:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****             }
 174:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****             psMd->length += SHA256_BLOCK_SIZE * 8;
 389              		.loc 1 174 0
 390 0228 FB68     		ldr	r3, [r7, #12]
 391 022a 18CB     		ldmia	r3, {r3-r4}
 392 022c 13F50073 		adds	r3, r3, #512
 393 0230 44F10004 		adc	r4, r4, #0
 394 0234 FA68     		ldr	r2, [r7, #12]
 395 0236 C2E90034 		strd	r3, [r2]
 175:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****             ui8In += SHA256_BLOCK_SIZE;
 396              		.loc 1 175 0
 397 023a BB68     		ldr	r3, [r7, #8]
 398 023c 4033     		adds	r3, r3, #64
 399 023e BB60     		str	r3, [r7, #8]
 176:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****             ui32InLen -= SHA256_BLOCK_SIZE;
 400              		.loc 1 176 0
 401 0240 7B68     		ldr	r3, [r7, #4]
 402 0242 403B     		subs	r3, r3, #64
 403 0244 7B60     		str	r3, [r7, #4]
 404 0246 55E0     		b	.L17
 405              	.L18:
 177:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****         }
 178:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****         else
 179:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****         {
 180:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****             ui32N = MIN(ui32InLen, (SHA256_BLOCK_SIZE - psMd->curlen));
 406              		.loc 1 180 0
 407 0248 FB68     		ldr	r3, [r7, #12]
 408 024a 9B6A     		ldr	r3, [r3, #40]
 409 024c C3F14002 		rsb	r2, r3, #64
 410 0250 7B68     		ldr	r3, [r7, #4]
 411 0252 9342     		cmp	r3, r2
 412 0254 28BF     		it	cs
 413 0256 1346     		movcs	r3, r2
 414 0258 7B61     		str	r3, [r7, #20]
 181:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****             for(ui32I = 0; ui32I < ui32N; ui32I++)
 415              		.loc 1 181 0
 416 025a 0023     		movs	r3, #0
 417 025c FB61     		str	r3, [r7, #28]
 418 025e 0FE0     		b	.L22
 419              	.L23:
 182:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****             {
 183:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****                 psMd->buf[psMd->curlen + ui32I] = ui8In[ui32I];
 420              		.loc 1 183 0 discriminator 3
 421 0260 FB68     		ldr	r3, [r7, #12]
 422 0262 9A6A     		ldr	r2, [r3, #40]
 423 0264 FB69     		ldr	r3, [r7, #28]
 424 0266 1344     		add	r3, r3, r2
 425 0268 B968     		ldr	r1, [r7, #8]
 426 026a FA69     		ldr	r2, [r7, #28]
 427 026c 0A44     		add	r2, r2, r1
 428 026e 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 429 0270 FA68     		ldr	r2, [r7, #12]
 430 0272 1344     		add	r3, r3, r2
 431 0274 0A46     		mov	r2, r1
 432 0276 83F82C20 		strb	r2, [r3, #44]
 181:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****             for(ui32I = 0; ui32I < ui32N; ui32I++)
 433              		.loc 1 181 0 discriminator 3
 434 027a FB69     		ldr	r3, [r7, #28]
 435 027c 0133     		adds	r3, r3, #1
 436 027e FB61     		str	r3, [r7, #28]
 437              	.L22:
 181:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****             for(ui32I = 0; ui32I < ui32N; ui32I++)
 438              		.loc 1 181 0 is_stmt 0 discriminator 1
 439 0280 FA69     		ldr	r2, [r7, #28]
 440 0282 7B69     		ldr	r3, [r7, #20]
 441 0284 9A42     		cmp	r2, r3
 442 0286 EBD3     		bcc	.L23
 184:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****             }
 185:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****             psMd->curlen += ui32N;
 443              		.loc 1 185 0 is_stmt 1
 444 0288 FB68     		ldr	r3, [r7, #12]
 445 028a 9A6A     		ldr	r2, [r3, #40]
 446 028c 7B69     		ldr	r3, [r7, #20]
 447 028e 1A44     		add	r2, r2, r3
 448 0290 FB68     		ldr	r3, [r7, #12]
 449 0292 9A62     		str	r2, [r3, #40]
 186:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****             ui8In  += ui32N;
 450              		.loc 1 186 0
 451 0294 BA68     		ldr	r2, [r7, #8]
 452 0296 7B69     		ldr	r3, [r7, #20]
 453 0298 1344     		add	r3, r3, r2
 454 029a BB60     		str	r3, [r7, #8]
 187:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****             ui32InLen  -= ui32N;
 455              		.loc 1 187 0
 456 029c 7A68     		ldr	r2, [r7, #4]
 457 029e 7B69     		ldr	r3, [r7, #20]
 458 02a0 D31A     		subs	r3, r2, r3
 459 02a2 7B60     		str	r3, [r7, #4]
 188:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****             if(psMd->curlen == SHA256_BLOCK_SIZE && ui32InLen > 0)
 460              		.loc 1 188 0
 461 02a4 FB68     		ldr	r3, [r7, #12]
 462 02a6 9B6A     		ldr	r3, [r3, #40]
 463 02a8 402B     		cmp	r3, #64
 464 02aa 23D1     		bne	.L17
 465              		.loc 1 188 0 is_stmt 0 discriminator 1
 466 02ac 7B68     		ldr	r3, [r7, #4]
 467 02ae 002B     		cmp	r3, #0
 468 02b0 20D0     		beq	.L17
 189:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****             {
 190:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****                 if((ui8Err = SHA256HashResume(psMd, (uint8_t *) psMd->buf,
 469              		.loc 1 190 0 is_stmt 1
 470 02b2 FB68     		ldr	r3, [r7, #12]
 471 02b4 03F12C01 		add	r1, r3, #44
 191:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****                                               (uint8_t *)psMd->state)) != SHA256_SUCCESS)
 472              		.loc 1 191 0
 473 02b8 FB68     		ldr	r3, [r7, #12]
 474 02ba 0833     		adds	r3, r3, #8
 190:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****                                               (uint8_t *)psMd->state)) != SHA256_SUCCESS)
 475              		.loc 1 190 0
 476 02bc 1A46     		mov	r2, r3
 477 02be F868     		ldr	r0, [r7, #12]
 478 02c0 00F01EF9 		bl	SHA256HashResume
 479 02c4 0346     		mov	r3, r0
 480 02c6 FB76     		strb	r3, [r7, #27]
 481 02c8 FB7E     		ldrb	r3, [r7, #27]	@ zero_extendqisi2
 482 02ca 002B     		cmp	r3, #0
 483 02cc 06D0     		beq	.L24
 192:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****                 {
 193:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****                     g_ui8CurrentAESOp = AES_NONE;
 484              		.loc 1 193 0
 485 02ce 024B     		ldr	r3, .L27
 486 02d0 0022     		movs	r2, #0
 487 02d2 1A70     		strb	r2, [r3]
 194:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****                     return (ui8Err);
 488              		.loc 1 194 0
 489 02d4 FB7E     		ldrb	r3, [r7, #27]	@ zero_extendqisi2
 490 02d6 1AE0     		b	.L6
 491              	.L28:
 492              		.align	2
 493              	.L27:
 494 02d8 00000000 		.word	g_ui8CurrentAESOp
 495              	.L24:
 195:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****                 }
 196:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****                 psMd->length += 8 * SHA256_BLOCK_SIZE;
 496              		.loc 1 196 0
 497 02dc FB68     		ldr	r3, [r7, #12]
 498 02de 18CB     		ldmia	r3, {r3-r4}
 499 02e0 13F50073 		adds	r3, r3, #512
 500 02e4 44F10004 		adc	r4, r4, #0
 501 02e8 FA68     		ldr	r2, [r7, #12]
 502 02ea C2E90034 		strd	r3, [r2]
 197:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****                 psMd->curlen = 0;
 503              		.loc 1 197 0
 504 02ee FB68     		ldr	r3, [r7, #12]
 505 02f0 0022     		movs	r2, #0
 506 02f2 9A62     		str	r2, [r3, #40]
 507              	.L17:
 160:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     {
 508              		.loc 1 160 0
 509 02f4 7B68     		ldr	r3, [r7, #4]
 510 02f6 002B     		cmp	r3, #0
 511 02f8 05D0     		beq	.L25
 160:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     {
 512              		.loc 1 160 0 is_stmt 0 discriminator 1
 513 02fa FB68     		ldr	r3, [r7, #12]
 514 02fc 93F86C30 		ldrb	r3, [r3, #108]	@ zero_extendqisi2
 515 0300 002B     		cmp	r3, #0
 516 0302 3FF461AF 		beq	.L26
 517              	.L25:
 198:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****             }
 199:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****         }
 200:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     }
 201:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     g_ui8CurrentAESOp = AES_NONE;
 518              		.loc 1 201 0 is_stmt 1
 519 0306 044B     		ldr	r3, .L29
 520 0308 0022     		movs	r2, #0
 521 030a 1A70     		strb	r2, [r3]
 202:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     return (SHA256_SUCCESS);
 522              		.loc 1 202 0
 523 030c 0023     		movs	r3, #0
 524              	.L6:
 203:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** }
 525              		.loc 1 203 0
 526 030e 1846     		mov	r0, r3
 527 0310 2437     		adds	r7, r7, #36
 528              		.cfi_def_cfa_offset 12
 529 0312 BD46     		mov	sp, r7
 530              		.cfi_def_cfa_register 13
 531              		@ sp needed
 532 0314 90BD     		pop	{r4, r7, pc}
 533              	.L30:
 534 0316 00BF     		.align	2
 535              	.L29:
 536 0318 00000000 		.word	g_ui8CurrentAESOp
 537              		.cfi_endproc
 538              	.LFE1:
 540              		.align	2
 541              		.global	SHA256Done
 542              		.thumb
 543              		.thumb_func
 545              	SHA256Done:
 546              	.LFB2:
 204:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** 
 205:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** //*****************************************************************************
 206:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** //
 207:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** //! SHA256Done function terminates hash session to get the digest. This
 208:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** //! function must be called only after SHA256Process().
 209:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** //!
 210:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** //! \param   psMd is the pointer to hash state.
 211:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** //! \param   ui8Out is the pointer to hash.
 212:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** //!
 213:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** //! For the pointer to hash state parameter \e psMd the calling function has to
 214:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** //! allocate the hash state structure and pass the pointer to the structure.
 215:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** //!
 216:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** //! \return  SHA256_SUCCESS if successful.
 217:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** //
 218:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** //*****************************************************************************
 219:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** uint8_t SHA256Done(tSHA256State * psMd, uint8_t *ui8Out)
 220:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** {
 547              		.loc 1 220 0
 548              		.cfi_startproc
 549              		@ args = 0, pretend = 0, frame = 16
 550              		@ frame_needed = 1, uses_anonymous_args = 0
 551 031c 90B5     		push	{r4, r7, lr}
 552              		.cfi_def_cfa_offset 12
 553              		.cfi_offset 4, -12
 554              		.cfi_offset 7, -8
 555              		.cfi_offset 14, -4
 556 031e 85B0     		sub	sp, sp, #20
 557              		.cfi_def_cfa_offset 32
 558 0320 00AF     		add	r7, sp, #0
 559              		.cfi_def_cfa_register 7
 560 0322 7860     		str	r0, [r7, #4]
 561 0324 3960     		str	r1, [r7]
 221:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     uint8_t ui8Err;
 222:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     if(psMd  == NULL || ui8Out == NULL)
 562              		.loc 1 222 0
 563 0326 7B68     		ldr	r3, [r7, #4]
 564 0328 002B     		cmp	r3, #0
 565 032a 02D0     		beq	.L32
 566              		.loc 1 222 0 is_stmt 0 discriminator 1
 567 032c 3B68     		ldr	r3, [r7]
 568 032e 002B     		cmp	r3, #0
 569 0330 01D1     		bne	.L33
 570              	.L32:
 223:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     {
 224:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****         return (SHA256_NULL_ERROR);
 571              		.loc 1 224 0 is_stmt 1
 572 0332 0923     		movs	r3, #9
 573 0334 4DE0     		b	.L34
 574              	.L33:
 225:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     }
 226:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** 
 227:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     if(psMd->curlen > sizeof(psMd->buf))
 575              		.loc 1 227 0
 576 0336 7B68     		ldr	r3, [r7, #4]
 577 0338 9B6A     		ldr	r3, [r3, #40]
 578 033a 402B     		cmp	r3, #64
 579 033c 01D9     		bls	.L35
 228:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     {
 229:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****         return (SHA256_INVALID_PARAM);
 580              		.loc 1 229 0
 581 033e 0623     		movs	r3, #6
 582 0340 47E0     		b	.L34
 583              	.L35:
 230:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     }
 231:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** 
 232:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     g_ui8CurrentAESOp = AES_SHA256;
 584              		.loc 1 232 0
 585 0342 264B     		ldr	r3, .L38
 586 0344 0422     		movs	r2, #4
 587 0346 1A70     		strb	r2, [r3]
 233:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** 
 234:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     // increase the length of the message
 235:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     psMd->length += psMd->curlen * 8;
 588              		.loc 1 235 0
 589 0348 7B68     		ldr	r3, [r7, #4]
 590 034a D3E90012 		ldrd	r1, [r3]
 591 034e 7B68     		ldr	r3, [r7, #4]
 592 0350 9B6A     		ldr	r3, [r3, #40]
 593 0352 DB00     		lsls	r3, r3, #3
 594 0354 4FF00004 		mov	r4, #0
 595 0358 5B18     		adds	r3, r3, r1
 596 035a 44EB0204 		adc	r4, r4, r2
 597 035e 7A68     		ldr	r2, [r7, #4]
 598 0360 C2E90034 		strd	r3, [r2]
 236:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     psMd->final_digest = true;
 599              		.loc 1 236 0
 600 0364 7B68     		ldr	r3, [r7, #4]
 601 0366 0122     		movs	r2, #1
 602 0368 83F86D20 		strb	r2, [r3, #109]
 237:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     if(psMd->new_digest == true)
 603              		.loc 1 237 0
 604 036c 7B68     		ldr	r3, [r7, #4]
 605 036e 93F86C30 		ldrb	r3, [r3, #108]	@ zero_extendqisi2
 606 0372 012B     		cmp	r3, #1
 607 0374 10D1     		bne	.L36
 238:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     {
 239:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****         if((ui8Err = SHA256HashNew(psMd, (uint8_t *)psMd->buf,
 608              		.loc 1 239 0
 609 0376 7B68     		ldr	r3, [r7, #4]
 610 0378 2C33     		adds	r3, r3, #44
 611 037a 3A68     		ldr	r2, [r7]
 612 037c 1946     		mov	r1, r3
 613 037e 7868     		ldr	r0, [r7, #4]
 614 0380 00F02EF8 		bl	SHA256HashNew
 615 0384 0346     		mov	r3, r0
 616 0386 FB73     		strb	r3, [r7, #15]
 617 0388 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 618 038a 002B     		cmp	r3, #0
 619 038c 15D0     		beq	.L37
 240:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****                                    (uint8_t *)ui8Out)) != SHA256_SUCCESS)
 241:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****         {
 242:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****             g_ui8CurrentAESOp = AES_NONE;
 620              		.loc 1 242 0
 621 038e 134B     		ldr	r3, .L38
 622 0390 0022     		movs	r2, #0
 623 0392 1A70     		strb	r2, [r3]
 243:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****             return (ui8Err);
 624              		.loc 1 243 0
 625 0394 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 626 0396 1CE0     		b	.L34
 627              	.L36:
 244:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****         }
 245:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     }
 246:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     else
 247:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     {
 248:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****         if((ui8Err = SHA256HashResume(psMd, (uint8_t *)psMd->buf,
 628              		.loc 1 248 0
 629 0398 7B68     		ldr	r3, [r7, #4]
 630 039a 2C33     		adds	r3, r3, #44
 631 039c 3A68     		ldr	r2, [r7]
 632 039e 1946     		mov	r1, r3
 633 03a0 7868     		ldr	r0, [r7, #4]
 634 03a2 00F0ADF8 		bl	SHA256HashResume
 635 03a6 0346     		mov	r3, r0
 636 03a8 FB73     		strb	r3, [r7, #15]
 637 03aa FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 638 03ac 002B     		cmp	r3, #0
 639 03ae 04D0     		beq	.L37
 249:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****                                       (uint8_t *)ui8Out)) != SHA256_SUCCESS)
 250:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****         {
 251:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****             g_ui8CurrentAESOp = AES_NONE;
 640              		.loc 1 251 0
 641 03b0 0A4B     		ldr	r3, .L38
 642 03b2 0022     		movs	r2, #0
 643 03b4 1A70     		strb	r2, [r3]
 252:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****             return (ui8Err);
 644              		.loc 1 252 0
 645 03b6 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 646 03b8 0BE0     		b	.L34
 647              	.L37:
 253:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****         }
 254:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     }
 255:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     psMd->new_digest = false;
 648              		.loc 1 255 0
 649 03ba 7B68     		ldr	r3, [r7, #4]
 650 03bc 0022     		movs	r2, #0
 651 03be 83F86C20 		strb	r2, [r3, #108]
 256:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     psMd->final_digest = false;
 652              		.loc 1 256 0
 653 03c2 7B68     		ldr	r3, [r7, #4]
 654 03c4 0022     		movs	r2, #0
 655 03c6 83F86D20 		strb	r2, [r3, #109]
 257:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** 
 258:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     g_ui8CurrentAESOp = AES_NONE;
 656              		.loc 1 258 0
 657 03ca 044B     		ldr	r3, .L38
 658 03cc 0022     		movs	r2, #0
 659 03ce 1A70     		strb	r2, [r3]
 259:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     return (SHA256_SUCCESS);
 660              		.loc 1 259 0
 661 03d0 0023     		movs	r3, #0
 662              	.L34:
 260:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** }
 663              		.loc 1 260 0
 664 03d2 1846     		mov	r0, r3
 665 03d4 1437     		adds	r7, r7, #20
 666              		.cfi_def_cfa_offset 12
 667 03d6 BD46     		mov	sp, r7
 668              		.cfi_def_cfa_register 13
 669              		@ sp needed
 670 03d8 90BD     		pop	{r4, r7, pc}
 671              	.L39:
 672 03da 00BF     		.align	2
 673              	.L38:
 674 03dc 00000000 		.word	g_ui8CurrentAESOp
 675              		.cfi_endproc
 676              	.LFE2:
 678              		.align	2
 679              		.thumb
 680              		.thumb_func
 682              	SHA256HashNew:
 683              	.LFB3:
 261:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** 
 262:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** //*****************************************************************************
 263:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** //
 264:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** //! SHA256HashNew function is to start a new Hash session in hardware.
 265:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** //!
 266:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** //! \param   psMd is the hash state.
 267:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** //! \param   ui8In is the pointer to input message.
 268:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** //! \param   ui8Out is the destination of the hash (32 bytes).
 269:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** //!
 270:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** //! \return  SHA256_SUCCESS if successful.
 271:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** //
 272:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** //*****************************************************************************
 273:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** uint8_t SHA256HashNew(tSHA256State * psMd, uint8_t *ui8In, uint8_t *ui8Out)
 274:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** {
 684              		.loc 1 274 0
 685              		.cfi_startproc
 686              		@ args = 0, pretend = 0, frame = 16
 687              		@ frame_needed = 1, uses_anonymous_args = 0
 688 03e0 B0B5     		push	{r4, r5, r7, lr}
 689              		.cfi_def_cfa_offset 16
 690              		.cfi_offset 4, -16
 691              		.cfi_offset 5, -12
 692              		.cfi_offset 7, -8
 693              		.cfi_offset 14, -4
 694 03e2 84B0     		sub	sp, sp, #16
 695              		.cfi_def_cfa_offset 32
 696 03e4 00AF     		add	r7, sp, #0
 697              		.cfi_def_cfa_register 7
 698 03e6 F860     		str	r0, [r7, #12]
 699 03e8 B960     		str	r1, [r7, #8]
 700 03ea 7A60     		str	r2, [r7, #4]
 275:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     // workaround for AES registers not retained after PM2
 276:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     IntDisable(INT_AES);
 701              		.loc 1 276 0
 702 03ec 9F20     		movs	r0, #159
 703 03ee FFF7FEFF 		bl	IntDisable
 277:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     HWREG(AES_CTRL_INT_CFG) = AES_CTRL_INT_CFG_LEVEL;
 704              		.loc 1 277 0
 705 03f2 324B     		ldr	r3, .L47
 706 03f4 0122     		movs	r2, #1
 707 03f6 1A60     		str	r2, [r3]
 278:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     HWREG(AES_CTRL_INT_EN)  = (AES_CTRL_INT_EN_RESULT_AV |
 708              		.loc 1 278 0
 709 03f8 314B     		ldr	r3, .L47+4
 710 03fa 0322     		movs	r2, #3
 711 03fc 1A60     		str	r2, [r3]
 279:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****                                AES_CTRL_INT_EN_DMA_IN_DONE);
 280:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** 
 281:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     // configure master control module
 282:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     // enable DMA path to the SHA-256 engine + Digest readout
 283:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     HWREG(AES_CTRL_ALG_SEL) = (AES_CTRL_ALG_SEL_TAG | AES_CTRL_ALG_SEL_HASH);
 712              		.loc 1 283 0
 713 03fe 314B     		ldr	r3, .L47+8
 714 0400 314A     		ldr	r2, .L47+12
 715 0402 1A60     		str	r2, [r3]
 284:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     // clear any outstanding events
 285:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     HWREG(AES_CTRL_INT_CLR) =  AES_CTRL_INT_CLR_RESULT_AV;
 716              		.loc 1 285 0
 717 0404 314B     		ldr	r3, .L47+16
 718 0406 0122     		movs	r2, #1
 719 0408 1A60     		str	r2, [r3]
 286:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** 
 287:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     // configure hash engine
 288:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     // indicate start of a new hash session and SHA256
 289:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     HWREG(AES_HASH_MODE_IN) = (AES_HASH_MODE_IN_SHA256_MODE |
 720              		.loc 1 289 0
 721 040a 314B     		ldr	r3, .L47+20
 722 040c 0922     		movs	r2, #9
 723 040e 1A60     		str	r2, [r3]
 290:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****                                AES_HASH_MODE_IN_NEW_HASH);
 291:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** 
 292:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     // if the final digest is required (pad the input DMA data),
 293:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     // write the following register
 294:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     //
 295:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     if(psMd->final_digest)
 724              		.loc 1 295 0
 725 0410 FB68     		ldr	r3, [r7, #12]
 726 0412 93F86D30 		ldrb	r3, [r3, #109]	@ zero_extendqisi2
 727 0416 002B     		cmp	r3, #0
 728 0418 12D0     		beq	.L41
 296:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     {
 297:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****         // write length of the message (lo)
 298:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****         HWREG(AES_HASH_LENGTH_IN_L) = (uint32_t)psMd->length;
 729              		.loc 1 298 0
 730 041a 2E49     		ldr	r1, .L47+24
 731 041c FB68     		ldr	r3, [r7, #12]
 732 041e D3E90023 		ldrd	r2, [r3]
 733 0422 1346     		mov	r3, r2
 734 0424 0B60     		str	r3, [r1]
 299:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****         // write length of the message (hi)
 300:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****         HWREG(AES_HASH_LENGTH_IN_H) = (uint32_t)(psMd->length >> 16);
 735              		.loc 1 300 0
 736 0426 2C49     		ldr	r1, .L47+28
 737 0428 FB68     		ldr	r3, [r7, #12]
 738 042a D3E90023 		ldrd	r2, [r3]
 739 042e 140C     		lsrs	r4, r2, #16
 740 0430 44EA0344 		orr	r4, r4, r3, lsl #16
 741 0434 1D0C     		lsrs	r5, r3, #16
 742 0436 2346     		mov	r3, r4
 743 0438 0B60     		str	r3, [r1]
 301:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****         // pad the DMA-ed data
 302:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****         HWREG(AES_HASH_IO_BUF_CTRL) = AES_HASH_IO_BUF_CTRL_PAD_DMA_MESSAGE;
 744              		.loc 1 302 0
 745 043a 284B     		ldr	r3, .L47+32
 746 043c 8022     		movs	r2, #128
 747 043e 1A60     		str	r2, [r3]
 748              	.L41:
 303:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     }
 304:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** 
 305:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     // enable DMA channel 0 for message data
 306:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     HWREG(AES_DMAC_CH0_CTRL) |= AES_DMAC_CH0_CTRL_EN;
 749              		.loc 1 306 0
 750 0440 274A     		ldr	r2, .L47+36
 751 0442 274B     		ldr	r3, .L47+36
 752 0444 1B68     		ldr	r3, [r3]
 753 0446 43F00103 		orr	r3, r3, #1
 754 044a 1360     		str	r3, [r2]
 307:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     // base address of the data in ext. memory
 308:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     HWREG(AES_DMAC_CH0_EXTADDR) = (uint32_t)ui8In;
 755              		.loc 1 308 0
 756 044c 254A     		ldr	r2, .L47+40
 757 044e BB68     		ldr	r3, [r7, #8]
 758 0450 1360     		str	r3, [r2]
 309:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     if(psMd->final_digest)
 759              		.loc 1 309 0
 760 0452 FB68     		ldr	r3, [r7, #12]
 761 0454 93F86D30 		ldrb	r3, [r3, #109]	@ zero_extendqisi2
 762 0458 002B     		cmp	r3, #0
 763 045a 04D0     		beq	.L42
 310:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     {
 311:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****         // input data length in bytes, equal to the message
 312:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****         HWREG(AES_DMAC_CH0_DMALENGTH) = psMd->curlen;
 764              		.loc 1 312 0
 765 045c 224A     		ldr	r2, .L47+44
 766 045e FB68     		ldr	r3, [r7, #12]
 767 0460 9B6A     		ldr	r3, [r3, #40]
 768 0462 1360     		str	r3, [r2]
 769 0464 02E0     		b	.L43
 770              	.L42:
 313:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     }
 314:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     else
 315:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     {
 316:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****         HWREG(AES_DMAC_CH0_DMALENGTH) = SHA256_BLOCK_SIZE;
 771              		.loc 1 316 0
 772 0466 204B     		ldr	r3, .L47+44
 773 0468 4022     		movs	r2, #64
 774 046a 1A60     		str	r2, [r3]
 775              	.L43:
 317:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     }
 318:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** 
 319:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     // enable DMA channel 1 for result digest
 320:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     HWREG(AES_DMAC_CH1_CTRL) |= AES_DMAC_CH1_CTRL_EN;
 776              		.loc 1 320 0
 777 046c 1F4A     		ldr	r2, .L47+48
 778 046e 1F4B     		ldr	r3, .L47+48
 779 0470 1B68     		ldr	r3, [r3]
 780 0472 43F00103 		orr	r3, r3, #1
 781 0476 1360     		str	r3, [r2]
 321:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     // base address of the digest buffer
 322:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     HWREG(AES_DMAC_CH1_EXTADDR) = (uint32_t)ui8Out;
 782              		.loc 1 322 0
 783 0478 1D4A     		ldr	r2, .L47+52
 784 047a 7B68     		ldr	r3, [r7, #4]
 785 047c 1360     		str	r3, [r2]
 323:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     // length of the result digest
 324:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     HWREG(AES_DMAC_CH1_DMALENGTH) = SHA256_OUTPUT_LEN;
 786              		.loc 1 324 0
 787 047e 1D4B     		ldr	r3, .L47+56
 788 0480 2022     		movs	r2, #32
 789 0482 1A60     		str	r2, [r3]
 790              	.L44:
 325:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** 
 326:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     // wait for completion of the operation
 327:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     do
 328:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     {
 329:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****         ASM_NOP;
 791              		.loc 1 329 0 discriminator 1
 792              		.syntax unified
 793              	@ 329 "build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c" 1
 794 0484 00BF     		NOP
 795              	@ 0 "" 2
 330:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     }
 331:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     while(!(HWREG(AES_CTRL_INT_STAT) & AES_CTRL_INT_STAT_RESULT_AV));
 796              		.loc 1 331 0 discriminator 1
 797              		.thumb
 798              		.syntax unified
 799 0486 1C4B     		ldr	r3, .L47+60
 800 0488 1B68     		ldr	r3, [r3]
 801 048a 03F00103 		and	r3, r3, #1
 802 048e 002B     		cmp	r3, #0
 803 0490 F8D0     		beq	.L44
 332:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** 
 333:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** 
 334:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     if((HWREG(AES_CTRL_INT_STAT) & AES_CTRL_INT_STAT_DMA_BUS_ERR))
 804              		.loc 1 334 0
 805 0492 194B     		ldr	r3, .L47+60
 806 0494 1B68     		ldr	r3, [r3]
 807 0496 002B     		cmp	r3, #0
 808 0498 01DA     		bge	.L45
 335:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     {
 336:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****         return (AES_DMA_BUS_ERROR);
 809              		.loc 1 336 0
 810 049a 0323     		movs	r3, #3
 811 049c 09E0     		b	.L46
 812              	.L45:
 337:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     }
 338:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** 
 339:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     // clear the interrupt
 340:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     HWREG(AES_CTRL_INT_CLR) = (AES_CTRL_INT_CLR_DMA_IN_DONE |
 813              		.loc 1 340 0
 814 049e 0B4B     		ldr	r3, .L47+16
 815 04a0 0322     		movs	r2, #3
 816 04a2 1A60     		str	r2, [r3]
 341:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****                                AES_CTRL_INT_CLR_RESULT_AV);
 342:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     // disable master control/DMA clock
 343:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     HWREG(AES_CTRL_ALG_SEL) = 0x00000000;
 817              		.loc 1 343 0
 818 04a4 074B     		ldr	r3, .L47+8
 819 04a6 0022     		movs	r2, #0
 820 04a8 1A60     		str	r2, [r3]
 344:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     // clear mode
 345:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     HWREG(AES_AES_CTRL) = 0x00000000;
 821              		.loc 1 345 0
 822 04aa 144B     		ldr	r3, .L47+64
 823 04ac 0022     		movs	r2, #0
 824 04ae 1A60     		str	r2, [r3]
 346:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** 
 347:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     return (SHA256_SUCCESS);
 825              		.loc 1 347 0
 826 04b0 0023     		movs	r3, #0
 827              	.L46:
 348:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** }
 828              		.loc 1 348 0
 829 04b2 1846     		mov	r0, r3
 830 04b4 1037     		adds	r7, r7, #16
 831              		.cfi_def_cfa_offset 16
 832 04b6 BD46     		mov	sp, r7
 833              		.cfi_def_cfa_register 13
 834              		@ sp needed
 835 04b8 B0BD     		pop	{r4, r5, r7, pc}
 836              	.L48:
 837 04ba 00BF     		.align	2
 838              	.L47:
 839 04bc 80B70840 		.word	1074313088
 840 04c0 84B70840 		.word	1074313092
 841 04c4 00B70840 		.word	1074312960
 842 04c8 04000080 		.word	-2147483644
 843 04cc 88B70840 		.word	1074313096
 844 04d0 44B60840 		.word	1074312772
 845 04d4 48B60840 		.word	1074312776
 846 04d8 4CB60840 		.word	1074312780
 847 04dc 40B60840 		.word	1074312768
 848 04e0 00B00840 		.word	1074311168
 849 04e4 04B00840 		.word	1074311172
 850 04e8 0CB00840 		.word	1074311180
 851 04ec 20B00840 		.word	1074311200
 852 04f0 24B00840 		.word	1074311204
 853 04f4 2CB00840 		.word	1074311212
 854 04f8 90B70840 		.word	1074313104
 855 04fc 50B50840 		.word	1074312528
 856              		.cfi_endproc
 857              	.LFE3:
 859              		.align	2
 860              		.thumb
 861              		.thumb_func
 863              	SHA256HashResume:
 864              	.LFB4:
 349:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** 
 350:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** //*****************************************************************************
 351:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** //
 352:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** //! SHA256HashResume function resumes an already started hash session in
 353:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** //! hardware.
 354:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** //!
 355:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** //! \param   psMd is the hash state.
 356:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** //! \param   ui8In is the pointer to the input message.
 357:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** //! \param   ui8Out is the pointer to the destination of the hash (32 bytes).
 358:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** //!
 359:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** //! \return  SHA256_SUCCESS if successful.
 360:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** //
 361:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** //*****************************************************************************
 362:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** uint8_t SHA256HashResume(tSHA256State * psMd, uint8_t *ui8In, uint8_t *ui8Out)
 363:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** {
 865              		.loc 1 363 0
 866              		.cfi_startproc
 867              		@ args = 0, pretend = 0, frame = 16
 868              		@ frame_needed = 1, uses_anonymous_args = 0
 869 0500 B0B5     		push	{r4, r5, r7, lr}
 870              		.cfi_def_cfa_offset 16
 871              		.cfi_offset 4, -16
 872              		.cfi_offset 5, -12
 873              		.cfi_offset 7, -8
 874              		.cfi_offset 14, -4
 875 0502 84B0     		sub	sp, sp, #16
 876              		.cfi_def_cfa_offset 32
 877 0504 00AF     		add	r7, sp, #0
 878              		.cfi_def_cfa_register 7
 879 0506 F860     		str	r0, [r7, #12]
 880 0508 B960     		str	r1, [r7, #8]
 881 050a 7A60     		str	r2, [r7, #4]
 364:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     IntDisable(INT_AES);
 882              		.loc 1 364 0
 883 050c 9F20     		movs	r0, #159
 884 050e FFF7FEFF 		bl	IntDisable
 365:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     // workaround for AES registers not retained after PM2
 366:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     HWREG(AES_CTRL_INT_CFG) = AES_CTRL_INT_CFG_LEVEL;
 885              		.loc 1 366 0
 886 0512 534B     		ldr	r3, .L56
 887 0514 0122     		movs	r2, #1
 888 0516 1A60     		str	r2, [r3]
 367:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     HWREG(AES_CTRL_INT_EN)  = (AES_CTRL_INT_EN_RESULT_AV |
 889              		.loc 1 367 0
 890 0518 524B     		ldr	r3, .L56+4
 891 051a 0322     		movs	r2, #3
 892 051c 1A60     		str	r2, [r3]
 368:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****                                AES_CTRL_INT_EN_DMA_IN_DONE);
 369:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** 
 370:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     // configure master control module and enable
 371:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     // the DMA path to the SHA-256 engine
 372:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     //
 373:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     HWREG(AES_CTRL_ALG_SEL) = AES_CTRL_ALG_SEL_HASH;
 893              		.loc 1 373 0
 894 051e 524B     		ldr	r3, .L56+8
 895 0520 0422     		movs	r2, #4
 896 0522 1A60     		str	r2, [r3]
 374:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** 
 375:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     // clear any outstanding events
 376:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     HWREG(AES_CTRL_INT_CLR) =  AES_CTRL_INT_CLR_RESULT_AV;
 897              		.loc 1 376 0
 898 0524 514B     		ldr	r3, .L56+12
 899 0526 0122     		movs	r2, #1
 900 0528 1A60     		str	r2, [r3]
 377:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** 
 378:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     // configure hash engine
 379:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     // indicate the start of a resumed hash session and SHA256
 380:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     HWREG(AES_HASH_MODE_IN) = AES_HASH_MODE_IN_SHA256_MODE;
 901              		.loc 1 380 0
 902 052a 514B     		ldr	r3, .L56+16
 903 052c 0822     		movs	r2, #8
 904 052e 1A60     		str	r2, [r3]
 381:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** 
 382:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     // if the final digest is required (pad the input DMA data)
 383:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     if(psMd->final_digest)
 905              		.loc 1 383 0
 906 0530 FB68     		ldr	r3, [r7, #12]
 907 0532 93F86D30 		ldrb	r3, [r3, #109]	@ zero_extendqisi2
 908 0536 002B     		cmp	r3, #0
 909 0538 0FD0     		beq	.L50
 384:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     {
 385:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****         // write length of the message (lo)
 386:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****         HWREG(AES_HASH_LENGTH_IN_L) = (uint32_t)psMd->length;
 910              		.loc 1 386 0
 911 053a 4E49     		ldr	r1, .L56+20
 912 053c FB68     		ldr	r3, [r7, #12]
 913 053e D3E90023 		ldrd	r2, [r3]
 914 0542 1346     		mov	r3, r2
 915 0544 0B60     		str	r3, [r1]
 387:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****         // write length of the message (hi)
 388:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****         HWREG(AES_HASH_LENGTH_IN_H) = (uint32_t)(psMd->length >> 16);
 916              		.loc 1 388 0
 917 0546 4C49     		ldr	r1, .L56+24
 918 0548 FB68     		ldr	r3, [r7, #12]
 919 054a D3E90023 		ldrd	r2, [r3]
 920 054e 140C     		lsrs	r4, r2, #16
 921 0550 44EA0344 		orr	r4, r4, r3, lsl #16
 922 0554 1D0C     		lsrs	r5, r3, #16
 923 0556 2346     		mov	r3, r4
 924 0558 0B60     		str	r3, [r1]
 925              	.L50:
 389:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     }
 390:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** 
 391:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     // write the initial digest
 392:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     HWREG(AES_HASH_DIGEST_A) = (uint32_t)psMd->state[0];
 926              		.loc 1 392 0
 927 055a 484A     		ldr	r2, .L56+28
 928 055c FB68     		ldr	r3, [r7, #12]
 929 055e 9B68     		ldr	r3, [r3, #8]
 930 0560 1360     		str	r3, [r2]
 393:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     HWREG(AES_HASH_DIGEST_B) = (uint32_t)psMd->state[1];
 931              		.loc 1 393 0
 932 0562 474A     		ldr	r2, .L56+32
 933 0564 FB68     		ldr	r3, [r7, #12]
 934 0566 DB68     		ldr	r3, [r3, #12]
 935 0568 1360     		str	r3, [r2]
 394:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     HWREG(AES_HASH_DIGEST_C) = (uint32_t)psMd->state[2];
 936              		.loc 1 394 0
 937 056a 464A     		ldr	r2, .L56+36
 938 056c FB68     		ldr	r3, [r7, #12]
 939 056e 1B69     		ldr	r3, [r3, #16]
 940 0570 1360     		str	r3, [r2]
 395:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     HWREG(AES_HASH_DIGEST_D) = (uint32_t)psMd->state[3];
 941              		.loc 1 395 0
 942 0572 454A     		ldr	r2, .L56+40
 943 0574 FB68     		ldr	r3, [r7, #12]
 944 0576 5B69     		ldr	r3, [r3, #20]
 945 0578 1360     		str	r3, [r2]
 396:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     HWREG(AES_HASH_DIGEST_E) = (uint32_t)psMd->state[4];
 946              		.loc 1 396 0
 947 057a 444A     		ldr	r2, .L56+44
 948 057c FB68     		ldr	r3, [r7, #12]
 949 057e 9B69     		ldr	r3, [r3, #24]
 950 0580 1360     		str	r3, [r2]
 397:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     HWREG(AES_HASH_DIGEST_F) = (uint32_t)psMd->state[5];
 951              		.loc 1 397 0
 952 0582 434A     		ldr	r2, .L56+48
 953 0584 FB68     		ldr	r3, [r7, #12]
 954 0586 DB69     		ldr	r3, [r3, #28]
 955 0588 1360     		str	r3, [r2]
 398:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     HWREG(AES_HASH_DIGEST_G) = (uint32_t)psMd->state[6];
 956              		.loc 1 398 0
 957 058a 424A     		ldr	r2, .L56+52
 958 058c FB68     		ldr	r3, [r7, #12]
 959 058e 1B6A     		ldr	r3, [r3, #32]
 960 0590 1360     		str	r3, [r2]
 399:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     HWREG(AES_HASH_DIGEST_H) = (uint32_t)psMd->state[7];
 961              		.loc 1 399 0
 962 0592 414A     		ldr	r2, .L56+56
 963 0594 FB68     		ldr	r3, [r7, #12]
 964 0596 5B6A     		ldr	r3, [r3, #36]
 965 0598 1360     		str	r3, [r2]
 400:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** 
 401:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     // If final digest, pad the DMA-ed data
 402:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     if(psMd->final_digest)
 966              		.loc 1 402 0
 967 059a FB68     		ldr	r3, [r7, #12]
 968 059c 93F86D30 		ldrb	r3, [r3, #109]	@ zero_extendqisi2
 969 05a0 002B     		cmp	r3, #0
 970 05a2 02D0     		beq	.L51
 403:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     {
 404:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****         HWREG(AES_HASH_IO_BUF_CTRL) = AES_HASH_IO_BUF_CTRL_PAD_DMA_MESSAGE;
 971              		.loc 1 404 0
 972 05a4 3D4B     		ldr	r3, .L56+60
 973 05a6 8022     		movs	r2, #128
 974 05a8 1A60     		str	r2, [r3]
 975              	.L51:
 405:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     }
 406:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** 
 407:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     // enable DMA channel 0 for message data
 408:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     HWREG(AES_DMAC_CH0_CTRL) |= AES_DMAC_CH0_CTRL_EN;
 976              		.loc 1 408 0
 977 05aa 3D4A     		ldr	r2, .L56+64
 978 05ac 3C4B     		ldr	r3, .L56+64
 979 05ae 1B68     		ldr	r3, [r3]
 980 05b0 43F00103 		orr	r3, r3, #1
 981 05b4 1360     		str	r3, [r2]
 409:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     // base address of the data in ext. memory
 410:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     HWREG(AES_DMAC_CH0_EXTADDR) = (uint32_t)ui8In;
 982              		.loc 1 410 0
 983 05b6 3B4A     		ldr	r2, .L56+68
 984 05b8 BB68     		ldr	r3, [r7, #8]
 985 05ba 1360     		str	r3, [r2]
 411:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     // input data length in bytes, equal to the message
 412:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     if(psMd->final_digest)
 986              		.loc 1 412 0
 987 05bc FB68     		ldr	r3, [r7, #12]
 988 05be 93F86D30 		ldrb	r3, [r3, #109]	@ zero_extendqisi2
 989 05c2 002B     		cmp	r3, #0
 990 05c4 04D0     		beq	.L52
 413:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     {
 414:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****         HWREG(AES_DMAC_CH0_DMALENGTH) = psMd->curlen;
 991              		.loc 1 414 0
 992 05c6 384A     		ldr	r2, .L56+72
 993 05c8 FB68     		ldr	r3, [r7, #12]
 994 05ca 9B6A     		ldr	r3, [r3, #40]
 995 05cc 1360     		str	r3, [r2]
 996 05ce 02E0     		b	.L53
 997              	.L52:
 415:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     }
 416:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     else
 417:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     {
 418:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****         HWREG(AES_DMAC_CH0_DMALENGTH) = SHA256_BLOCK_SIZE;
 998              		.loc 1 418 0
 999 05d0 354B     		ldr	r3, .L56+72
 1000 05d2 4022     		movs	r2, #64
 1001 05d4 1A60     		str	r2, [r3]
 1002              	.L53:
 419:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     }
 420:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** 
 421:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     // wait for completion of the operation
 422:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     do
 423:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     {
 424:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****         ASM_NOP;
 1003              		.loc 1 424 0 discriminator 1
 1004              		.syntax unified
 1005              	@ 424 "build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c" 1
 1006 05d6 00BF     		NOP
 1007              	@ 0 "" 2
 425:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     }
 426:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     while(!(HWREG(AES_CTRL_INT_STAT) & AES_CTRL_INT_STAT_RESULT_AV));
 1008              		.loc 1 426 0 discriminator 1
 1009              		.thumb
 1010              		.syntax unified
 1011 05d8 344B     		ldr	r3, .L56+76
 1012 05da 1B68     		ldr	r3, [r3]
 1013 05dc 03F00103 		and	r3, r3, #1
 1014 05e0 002B     		cmp	r3, #0
 1015 05e2 F8D0     		beq	.L53
 427:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** 
 428:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     // check for any DMA Bus errors
 429:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     if((HWREG(AES_CTRL_INT_STAT) & AES_CTRL_INT_STAT_DMA_BUS_ERR))
 1016              		.loc 1 429 0
 1017 05e4 314B     		ldr	r3, .L56+76
 1018 05e6 1B68     		ldr	r3, [r3]
 1019 05e8 002B     		cmp	r3, #0
 1020 05ea 01DA     		bge	.L54
 430:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     {
 431:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****         return (AES_DMA_BUS_ERROR);
 1021              		.loc 1 431 0
 1022 05ec 0323     		movs	r3, #3
 1023 05ee 33E0     		b	.L55
 1024              	.L54:
 432:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     }
 433:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** 
 434:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     // read digest
 435:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     ((uint32_t  *)ui8Out)[0] = HWREG(AES_HASH_DIGEST_A);
 1025              		.loc 1 435 0
 1026 05f0 224B     		ldr	r3, .L56+28
 1027 05f2 1A68     		ldr	r2, [r3]
 1028 05f4 7B68     		ldr	r3, [r7, #4]
 1029 05f6 1A60     		str	r2, [r3]
 436:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     ((uint32_t  *)ui8Out)[1] = HWREG(AES_HASH_DIGEST_B);
 1030              		.loc 1 436 0
 1031 05f8 7B68     		ldr	r3, [r7, #4]
 1032 05fa 0433     		adds	r3, r3, #4
 1033 05fc 204A     		ldr	r2, .L56+32
 1034 05fe 1268     		ldr	r2, [r2]
 1035 0600 1A60     		str	r2, [r3]
 437:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     ((uint32_t  *)ui8Out)[2] = HWREG(AES_HASH_DIGEST_C);
 1036              		.loc 1 437 0
 1037 0602 7B68     		ldr	r3, [r7, #4]
 1038 0604 0833     		adds	r3, r3, #8
 1039 0606 1F4A     		ldr	r2, .L56+36
 1040 0608 1268     		ldr	r2, [r2]
 1041 060a 1A60     		str	r2, [r3]
 438:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     ((uint32_t  *)ui8Out)[3] = HWREG(AES_HASH_DIGEST_D);
 1042              		.loc 1 438 0
 1043 060c 7B68     		ldr	r3, [r7, #4]
 1044 060e 0C33     		adds	r3, r3, #12
 1045 0610 1D4A     		ldr	r2, .L56+40
 1046 0612 1268     		ldr	r2, [r2]
 1047 0614 1A60     		str	r2, [r3]
 439:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     ((uint32_t  *)ui8Out)[4] = HWREG(AES_HASH_DIGEST_E);
 1048              		.loc 1 439 0
 1049 0616 7B68     		ldr	r3, [r7, #4]
 1050 0618 1033     		adds	r3, r3, #16
 1051 061a 1C4A     		ldr	r2, .L56+44
 1052 061c 1268     		ldr	r2, [r2]
 1053 061e 1A60     		str	r2, [r3]
 440:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     ((uint32_t  *)ui8Out)[5] = HWREG(AES_HASH_DIGEST_F);
 1054              		.loc 1 440 0
 1055 0620 7B68     		ldr	r3, [r7, #4]
 1056 0622 1433     		adds	r3, r3, #20
 1057 0624 1A4A     		ldr	r2, .L56+48
 1058 0626 1268     		ldr	r2, [r2]
 1059 0628 1A60     		str	r2, [r3]
 441:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     ((uint32_t  *)ui8Out)[6] = HWREG(AES_HASH_DIGEST_G);
 1060              		.loc 1 441 0
 1061 062a 7B68     		ldr	r3, [r7, #4]
 1062 062c 1833     		adds	r3, r3, #24
 1063 062e 194A     		ldr	r2, .L56+52
 1064 0630 1268     		ldr	r2, [r2]
 1065 0632 1A60     		str	r2, [r3]
 442:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     ((uint32_t  *)ui8Out)[7] = HWREG(AES_HASH_DIGEST_H);
 1066              		.loc 1 442 0
 1067 0634 7B68     		ldr	r3, [r7, #4]
 1068 0636 1C33     		adds	r3, r3, #28
 1069 0638 174A     		ldr	r2, .L56+56
 1070 063a 1268     		ldr	r2, [r2]
 1071 063c 1A60     		str	r2, [r3]
 443:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** 
 444:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     // acknowledge reading of the digest
 445:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     HWREG(AES_HASH_IO_BUF_CTRL) = AES_HASH_IO_BUF_CTRL_OUTPUT_FULL;
 1072              		.loc 1 445 0
 1073 063e 174B     		ldr	r3, .L56+60
 1074 0640 0122     		movs	r2, #1
 1075 0642 1A60     		str	r2, [r3]
 446:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** 
 447:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     // clear the interrupt
 448:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     HWREG(AES_CTRL_INT_CLR) = (AES_CTRL_INT_CLR_DMA_IN_DONE |
 1076              		.loc 1 448 0
 1077 0644 094B     		ldr	r3, .L56+12
 1078 0646 0322     		movs	r2, #3
 1079 0648 1A60     		str	r2, [r3]
 449:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****                                AES_CTRL_INT_CLR_RESULT_AV);
 450:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     // acknowledge result and clear interrupts
 451:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     // disable master control/DMA clock
 452:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     HWREG(AES_CTRL_ALG_SEL) = 0x00000000;
 1080              		.loc 1 452 0
 1081 064a 074B     		ldr	r3, .L56+8
 1082 064c 0022     		movs	r2, #0
 1083 064e 1A60     		str	r2, [r3]
 453:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     // clear mode
 454:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     HWREG(AES_AES_CTRL) = 0x00000000;
 1084              		.loc 1 454 0
 1085 0650 174B     		ldr	r3, .L56+80
 1086 0652 0022     		movs	r2, #0
 1087 0654 1A60     		str	r2, [r3]
 455:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** 
 456:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c ****     return (SHA256_SUCCESS);
 1088              		.loc 1 456 0
 1089 0656 0023     		movs	r3, #0
 1090              	.L55:
 457:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.c **** }
 1091              		.loc 1 457 0
 1092 0658 1846     		mov	r0, r3
 1093 065a 1037     		adds	r7, r7, #16
 1094              		.cfi_def_cfa_offset 16
 1095 065c BD46     		mov	sp, r7
 1096              		.cfi_def_cfa_register 13
 1097              		@ sp needed
 1098 065e B0BD     		pop	{r4, r5, r7, pc}
 1099              	.L57:
 1100              		.align	2
 1101              	.L56:
 1102 0660 80B70840 		.word	1074313088
 1103 0664 84B70840 		.word	1074313092
 1104 0668 00B70840 		.word	1074312960
 1105 066c 88B70840 		.word	1074313096
 1106 0670 44B60840 		.word	1074312772
 1107 0674 48B60840 		.word	1074312776
 1108 0678 4CB60840 		.word	1074312780
 1109 067c 50B60840 		.word	1074312784
 1110 0680 54B60840 		.word	1074312788
 1111 0684 58B60840 		.word	1074312792
 1112 0688 5CB60840 		.word	1074312796
 1113 068c 60B60840 		.word	1074312800
 1114 0690 64B60840 		.word	1074312804
 1115 0694 68B60840 		.word	1074312808
 1116 0698 6CB60840 		.word	1074312812
 1117 069c 40B60840 		.word	1074312768
 1118 06a0 00B00840 		.word	1074311168
 1119 06a4 04B00840 		.word	1074311172
 1120 06a8 0CB00840 		.word	1074311180
 1121 06ac 90B70840 		.word	1074313104
 1122 06b0 50B50840 		.word	1074312528
 1123              		.cfi_endproc
 1124              	.LFE4:
 1126              	.Letext0:
 1127              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 1128              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 1129              		.file 4 "build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/sha256.h"
 1130              		.file 5 "build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/aes.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 sha256.c
     /tmp/ccpovW3l.s:19     .text:0000000000000000 $t
     /tmp/ccpovW3l.s:24     .text:0000000000000000 SHA256Init
     /tmp/ccpovW3l.s:89     .text:0000000000000044 SHA256Process
     /tmp/ccpovW3l.s:682    .text:00000000000003e0 SHA256HashNew
     /tmp/ccpovW3l.s:863    .text:0000000000000500 SHA256HashResume
     /tmp/ccpovW3l.s:494    .text:00000000000002d8 $d
     /tmp/ccpovW3l.s:497    .text:00000000000002dc $t
     /tmp/ccpovW3l.s:536    .text:0000000000000318 $d
     /tmp/ccpovW3l.s:540    .text:000000000000031c $t
     /tmp/ccpovW3l.s:545    .text:000000000000031c SHA256Done
     /tmp/ccpovW3l.s:674    .text:00000000000003dc $d
     /tmp/ccpovW3l.s:678    .text:00000000000003e0 $t
     /tmp/ccpovW3l.s:839    .text:00000000000004bc $d
     /tmp/ccpovW3l.s:859    .text:0000000000000500 $t
     /tmp/ccpovW3l.s:1102   .text:0000000000000660 $d
                     .debug_frame:0000000000000010 $d
                           .group:0000000000000000 wm4.0.8e445c0106ab795ab4704214cba6f089
                           .group:0000000000000000 wm4.hw_aes.h.39.77ecc3829d96bb0e5669b1f36ecffb12
                           .group:0000000000000000 wm4.hw_ints.h.42.85b9479f2be35b086f1bb7cbb15bc097
                           .group:0000000000000000 wm4._newlib_version.h.4.ad342815780c8db09778091a421b5b5b
                           .group:0000000000000000 wm4.features.h.33.d97f2d646536517df901beeb5b9993f5
                           .group:0000000000000000 wm4._default_types.h.15.933e8edd27a65e0b69af4a865eb623d2
                           .group:0000000000000000 wm4._intsup.h.10.b82bf99f69d6a5c085fc866de0d3eb9b
                           .group:0000000000000000 wm4._stdint.h.10.7a5f60e6741af4a5594a3867d347e1f9
                           .group:0000000000000000 wm4.stdint.h.23.373a9d32a9e4c2e88fd347156532d281
                           .group:0000000000000000 wm4.stdbool.h.29.07dce69c3b78884144b7f7bd19483461
                           .group:0000000000000000 wm4.hw_types.h.67.b10589a0806dcc2d274d6fab6b736519
                           .group:0000000000000000 wm4.interrupt.h.41.272fc4ec0e276feb439e7974d0f77eaf
                           .group:0000000000000000 wm4.aes.h.66.0fb976edb685649779bd34f5f8f7ef75
                           .group:0000000000000000 wm4.sha256.h.41.514ee8300173bb8429f560abe8ea7bd5
                           .group:0000000000000000 wm4.newlib.h.8.36dd0417407b0a085bc04c49cc2ed13a
                           .group:0000000000000000 wm4.config.h.219.65a553ab5bef5482f0d7880b0d33015e
                           .group:0000000000000000 wm4._ansi.h.23.9f8fcfa20193763fcf364fb91705c94b
                           .group:0000000000000000 wm4.stddef.h.39.a38874c8f8a57e66301090908ec2a69f
                           .group:0000000000000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:0000000000000000 wm4._types.h.125.5cf8a495f1f7ef36777ad868a1e32068
                           .group:0000000000000000 wm4.stddef.h.161.5349cb105733e8777bfb0cf53c4e3f34
                           .group:0000000000000000 wm4._types.h.183.c226d164ceca1f2ecb9ae9360c54a098
                           .group:0000000000000000 wm4.reent.h.17.850ac0a908956e5fb788be1b80de2f32
                           .group:0000000000000000 wm4.cdefs.h.47.ba62642086d429b4f95c2381cae1c0aa
                           .group:0000000000000000 wm4.string.h.15.dab3980bf35408a4c507182805e2de3a
                           .group:0000000000000000 wm4.stddef.h.161.19e15733342b50ead2919490b095303e

UNDEFINED SYMBOLS
g_ui8CurrentAESOp
IntDisable
