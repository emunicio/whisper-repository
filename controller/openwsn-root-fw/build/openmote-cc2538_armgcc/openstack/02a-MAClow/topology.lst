   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"topology.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.rodata
  20              		.align	2
  23              	rreg_uriquery:
  24 0000 683D7563 		.ascii	"h=ucb\000"
  24      6200
  25 0006 0000     		.align	2
  28              	infoBoardname:
  29 0008 43433235 		.ascii	"CC2538\000"
  29      333800
  30 000f 00       		.align	2
  33              	infouCName:
  34 0010 43433235 		.ascii	"CC2538\000"
  34      333800
  35 0017 00       		.align	2
  38              	infoRadioName:
  39 0018 43433235 		.ascii	"CC2538 SoC\000"
  39      33382053 
  39      6F4300
  40 0023 00       		.align	2
  43              	infoStackName:
  44 0024 4F70656E 		.ascii	"OpenWSN \000"
  44      57534E20 
  44      00
  45 002d 000000   		.align	2
  48              	linklocalprefix:
  49 0030 FE       		.byte	-2
  50 0031 80       		.byte	-128
  51 0032 00       		.byte	0
  52 0033 00       		.byte	0
  53 0034 00       		.byte	0
  54 0035 00       		.byte	0
  55 0036 00       		.byte	0
  56 0037 00       		.byte	0
  57              		.text
  58              		.align	2
  59              		.global	topology_isAcceptablePacket
  60              		.thumb
  61              		.thumb_func
  63              	topology_isAcceptablePacket:
  64              	.LFB0:
  65              		.file 1 "build/openmote-cc2538_armgcc/openstack/02a-MAClow/topology.c"
   1:build/openmote-cc2538_armgcc/openstack/02a-MAClow/topology.c **** #include "opendefs.h"
   2:build/openmote-cc2538_armgcc/openstack/02a-MAClow/topology.c **** #include "topology.h"
   3:build/openmote-cc2538_armgcc/openstack/02a-MAClow/topology.c **** #include "idmanager.h"
   4:build/openmote-cc2538_armgcc/openstack/02a-MAClow/topology.c **** 
   5:build/openmote-cc2538_armgcc/openstack/02a-MAClow/topology.c **** //=========================== defines =========================================
   6:build/openmote-cc2538_armgcc/openstack/02a-MAClow/topology.c **** 
   7:build/openmote-cc2538_armgcc/openstack/02a-MAClow/topology.c **** //=========================== variables =======================================
   8:build/openmote-cc2538_armgcc/openstack/02a-MAClow/topology.c **** 
   9:build/openmote-cc2538_armgcc/openstack/02a-MAClow/topology.c **** //=========================== prototypes ======================================
  10:build/openmote-cc2538_armgcc/openstack/02a-MAClow/topology.c **** 
  11:build/openmote-cc2538_armgcc/openstack/02a-MAClow/topology.c **** //=========================== public ==========================================
  12:build/openmote-cc2538_armgcc/openstack/02a-MAClow/topology.c **** 
  13:build/openmote-cc2538_armgcc/openstack/02a-MAClow/topology.c **** /**
  14:build/openmote-cc2538_armgcc/openstack/02a-MAClow/topology.c **** \brief Force a topology.
  15:build/openmote-cc2538_armgcc/openstack/02a-MAClow/topology.c **** 
  16:build/openmote-cc2538_armgcc/openstack/02a-MAClow/topology.c **** This function is used to force a certain topology, by hard-coding the list of
  17:build/openmote-cc2538_armgcc/openstack/02a-MAClow/topology.c **** acceptable neighbors for a given mote. This function is invoked each time a
  18:build/openmote-cc2538_armgcc/openstack/02a-MAClow/topology.c **** packet is received. If it returns FALSE, the packet is silently dropped, as if
  19:build/openmote-cc2538_armgcc/openstack/02a-MAClow/topology.c **** it were never received. If it returns TRUE, the packet is accepted.
  20:build/openmote-cc2538_armgcc/openstack/02a-MAClow/topology.c **** 
  21:build/openmote-cc2538_armgcc/openstack/02a-MAClow/topology.c **** Typically, filtering packets is done by analyzing the IEEE802.15.4 header. An
  22:build/openmote-cc2538_armgcc/openstack/02a-MAClow/topology.c **** example body for this function which forces a topology is:
  23:build/openmote-cc2538_armgcc/openstack/02a-MAClow/topology.c **** 
  24:build/openmote-cc2538_armgcc/openstack/02a-MAClow/topology.c ****    switch (idmanager_getMyID(ADDR_64B)->addr_64b[7]) {
  25:build/openmote-cc2538_armgcc/openstack/02a-MAClow/topology.c ****       case TOPOLOGY_MOTE1:
  26:build/openmote-cc2538_armgcc/openstack/02a-MAClow/topology.c ****          if (ieee802514_header->src.addr_64b[7]==TOPOLOGY_MOTE2) {
  27:build/openmote-cc2538_armgcc/openstack/02a-MAClow/topology.c ****             returnVal=TRUE;
  28:build/openmote-cc2538_armgcc/openstack/02a-MAClow/topology.c ****          } else {
  29:build/openmote-cc2538_armgcc/openstack/02a-MAClow/topology.c ****             returnVal=FALSE;
  30:build/openmote-cc2538_armgcc/openstack/02a-MAClow/topology.c ****          }
  31:build/openmote-cc2538_armgcc/openstack/02a-MAClow/topology.c ****          break;
  32:build/openmote-cc2538_armgcc/openstack/02a-MAClow/topology.c ****       case TOPOLOGY_MOTE2:
  33:build/openmote-cc2538_armgcc/openstack/02a-MAClow/topology.c ****          if (ieee802514_header->src.addr_64b[7]==TOPOLOGY_MOTE1 ||
  34:build/openmote-cc2538_armgcc/openstack/02a-MAClow/topology.c ****              ieee802514_header->src.addr_64b[7]==TOPOLOGY_MOTE3) {
  35:build/openmote-cc2538_armgcc/openstack/02a-MAClow/topology.c ****             returnVal=TRUE;
  36:build/openmote-cc2538_armgcc/openstack/02a-MAClow/topology.c ****          } else {
  37:build/openmote-cc2538_armgcc/openstack/02a-MAClow/topology.c ****             returnVal=FALSE;
  38:build/openmote-cc2538_armgcc/openstack/02a-MAClow/topology.c ****          }
  39:build/openmote-cc2538_armgcc/openstack/02a-MAClow/topology.c ****          break;
  40:build/openmote-cc2538_armgcc/openstack/02a-MAClow/topology.c ****       default:
  41:build/openmote-cc2538_armgcc/openstack/02a-MAClow/topology.c ****          returnVal=TRUE;
  42:build/openmote-cc2538_armgcc/openstack/02a-MAClow/topology.c ****    }
  43:build/openmote-cc2538_armgcc/openstack/02a-MAClow/topology.c ****    return returnVal;
  44:build/openmote-cc2538_armgcc/openstack/02a-MAClow/topology.c **** 
  45:build/openmote-cc2538_armgcc/openstack/02a-MAClow/topology.c **** By default, however, the function should return TRUE to *not* force any
  46:build/openmote-cc2538_armgcc/openstack/02a-MAClow/topology.c **** topology.
  47:build/openmote-cc2538_armgcc/openstack/02a-MAClow/topology.c **** 
  48:build/openmote-cc2538_armgcc/openstack/02a-MAClow/topology.c **** \param[in] ieee802514_header The parsed IEEE802.15.4 MAC header.
  49:build/openmote-cc2538_armgcc/openstack/02a-MAClow/topology.c **** 
  50:build/openmote-cc2538_armgcc/openstack/02a-MAClow/topology.c **** \return TRUE if the packet can be received.
  51:build/openmote-cc2538_armgcc/openstack/02a-MAClow/topology.c **** \return FALSE if the packet should be silently dropped.
  52:build/openmote-cc2538_armgcc/openstack/02a-MAClow/topology.c **** */
  53:build/openmote-cc2538_armgcc/openstack/02a-MAClow/topology.c **** bool topology_isAcceptablePacket(ieee802154_header_iht* ieee802514_header) {
  66              		.loc 1 53 0
  67              		.cfi_startproc
  68              		@ args = 0, pretend = 0, frame = 8
  69              		@ frame_needed = 1, uses_anonymous_args = 0
  70              		@ link register save eliminated.
  71 0000 80B4     		push	{r7}
  72              		.cfi_def_cfa_offset 4
  73              		.cfi_offset 7, -4
  74 0002 83B0     		sub	sp, sp, #12
  75              		.cfi_def_cfa_offset 16
  76 0004 00AF     		add	r7, sp, #0
  77              		.cfi_def_cfa_register 7
  78 0006 7860     		str	r0, [r7, #4]
  54:build/openmote-cc2538_armgcc/openstack/02a-MAClow/topology.c **** #ifdef FORCETOPOLOGY
  55:build/openmote-cc2538_armgcc/openstack/02a-MAClow/topology.c ****    bool returnVal;
  56:build/openmote-cc2538_armgcc/openstack/02a-MAClow/topology.c ****    
  57:build/openmote-cc2538_armgcc/openstack/02a-MAClow/topology.c ****    returnVal=FALSE;
  58:build/openmote-cc2538_armgcc/openstack/02a-MAClow/topology.c ****    switch (idmanager_getMyID(ADDR_64B)->addr_64b[7]) {
  59:build/openmote-cc2538_armgcc/openstack/02a-MAClow/topology.c ****       case 0xdf:
  60:build/openmote-cc2538_armgcc/openstack/02a-MAClow/topology.c ****          if (
  61:build/openmote-cc2538_armgcc/openstack/02a-MAClow/topology.c ****                ieee802514_header->src.addr_64b[7]==0x66
  62:build/openmote-cc2538_armgcc/openstack/02a-MAClow/topology.c ****             ) {
  63:build/openmote-cc2538_armgcc/openstack/02a-MAClow/topology.c ****             returnVal=TRUE;
  64:build/openmote-cc2538_armgcc/openstack/02a-MAClow/topology.c ****          }
  65:build/openmote-cc2538_armgcc/openstack/02a-MAClow/topology.c ****          break;
  66:build/openmote-cc2538_armgcc/openstack/02a-MAClow/topology.c ****       case 0x66:
  67:build/openmote-cc2538_armgcc/openstack/02a-MAClow/topology.c ****          if (
  68:build/openmote-cc2538_armgcc/openstack/02a-MAClow/topology.c ****                ieee802514_header->src.addr_64b[7]==0xdf ||
  69:build/openmote-cc2538_armgcc/openstack/02a-MAClow/topology.c ****                ieee802514_header->src.addr_64b[7]==0x4f
  70:build/openmote-cc2538_armgcc/openstack/02a-MAClow/topology.c ****             ) {
  71:build/openmote-cc2538_armgcc/openstack/02a-MAClow/topology.c ****             returnVal=TRUE;
  72:build/openmote-cc2538_armgcc/openstack/02a-MAClow/topology.c ****          }
  73:build/openmote-cc2538_armgcc/openstack/02a-MAClow/topology.c ****          break;
  74:build/openmote-cc2538_armgcc/openstack/02a-MAClow/topology.c ****       case 0x4f:
  75:build/openmote-cc2538_armgcc/openstack/02a-MAClow/topology.c ****          if (
  76:build/openmote-cc2538_armgcc/openstack/02a-MAClow/topology.c ****                ieee802514_header->src.addr_64b[7]==0x66
  77:build/openmote-cc2538_armgcc/openstack/02a-MAClow/topology.c ****             ) {
  78:build/openmote-cc2538_armgcc/openstack/02a-MAClow/topology.c ****             returnVal=TRUE;
  79:build/openmote-cc2538_armgcc/openstack/02a-MAClow/topology.c ****          }
  80:build/openmote-cc2538_armgcc/openstack/02a-MAClow/topology.c ****          break;   
  81:build/openmote-cc2538_armgcc/openstack/02a-MAClow/topology.c ****    }
  82:build/openmote-cc2538_armgcc/openstack/02a-MAClow/topology.c ****    return returnVal;
  83:build/openmote-cc2538_armgcc/openstack/02a-MAClow/topology.c **** #else
  84:build/openmote-cc2538_armgcc/openstack/02a-MAClow/topology.c ****    return TRUE;
  79              		.loc 1 84 0
  80 0008 0123     		movs	r3, #1
  85:build/openmote-cc2538_armgcc/openstack/02a-MAClow/topology.c **** #endif
  86:build/openmote-cc2538_armgcc/openstack/02a-MAClow/topology.c **** }
  81              		.loc 1 86 0
  82 000a 1846     		mov	r0, r3
  83 000c 0C37     		adds	r7, r7, #12
  84              		.cfi_def_cfa_offset 4
  85 000e BD46     		mov	sp, r7
  86              		.cfi_def_cfa_register 13
  87              		@ sp needed
  88 0010 80BC     		pop	{r7}
  89              		.cfi_restore 7
  90              		.cfi_def_cfa_offset 0
  91 0012 7047     		bx	lr
  92              		.cfi_endproc
  93              	.LFE0:
  95              	.Letext0:
  96              		.file 2 "/usr/include/newlib/machine/_default_types.h"
  97              		.file 3 "/usr/include/newlib/sys/_stdint.h"
  98              		.file 4 "inc/opendefs.h"
  99              		.file 5 "build/openmote-cc2538_armgcc/openstack/02a-MAClow/IEEE802154.h"
 100              		.file 6 "bsp/boards/openmote-cc2538/board_info.h"
 101              		.file 7 "openstack/cross-layers/idmanager.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 topology.c
     /tmp/cctoXaNH.s:20     .rodata:0000000000000000 $d
     /tmp/cctoXaNH.s:23     .rodata:0000000000000000 rreg_uriquery
     /tmp/cctoXaNH.s:28     .rodata:0000000000000008 infoBoardname
     /tmp/cctoXaNH.s:33     .rodata:0000000000000010 infouCName
     /tmp/cctoXaNH.s:38     .rodata:0000000000000018 infoRadioName
     /tmp/cctoXaNH.s:43     .rodata:0000000000000024 infoStackName
     /tmp/cctoXaNH.s:48     .rodata:0000000000000030 linklocalprefix
     /tmp/cctoXaNH.s:58     .text:0000000000000000 $t
     /tmp/cctoXaNH.s:63     .text:0000000000000000 topology_isAcceptablePacket
                     .debug_frame:0000000000000010 $d
                           .group:0000000000000000 wm4.0.8e445c0106ab795ab4704214cba6f089
                           .group:0000000000000000 wm4._newlib_version.h.4.ad342815780c8db09778091a421b5b5b
                           .group:0000000000000000 wm4.features.h.33.d97f2d646536517df901beeb5b9993f5
                           .group:0000000000000000 wm4._default_types.h.15.933e8edd27a65e0b69af4a865eb623d2
                           .group:0000000000000000 wm4._intsup.h.10.b82bf99f69d6a5c085fc866de0d3eb9b
                           .group:0000000000000000 wm4._stdint.h.10.7a5f60e6741af4a5594a3867d347e1f9
                           .group:0000000000000000 wm4.stdint.h.23.373a9d32a9e4c2e88fd347156532d281
                           .group:0000000000000000 wm4.toolchain_defs.h.2.e5fd326231d01413e5361944b26cde07
                           .group:0000000000000000 wm4.newlib.h.8.36dd0417407b0a085bc04c49cc2ed13a
                           .group:0000000000000000 wm4.config.h.219.65a553ab5bef5482f0d7880b0d33015e
                           .group:0000000000000000 wm4._ansi.h.23.9f8fcfa20193763fcf364fb91705c94b
                           .group:0000000000000000 wm4.stddef.h.39.a38874c8f8a57e66301090908ec2a69f
                           .group:0000000000000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:0000000000000000 wm4._types.h.125.5cf8a495f1f7ef36777ad868a1e32068
                           .group:0000000000000000 wm4.stddef.h.161.5349cb105733e8777bfb0cf53c4e3f34
                           .group:0000000000000000 wm4._types.h.183.c226d164ceca1f2ecb9ae9360c54a098
                           .group:0000000000000000 wm4.reent.h.17.850ac0a908956e5fb788be1b80de2f32
                           .group:0000000000000000 wm4.cdefs.h.47.ba62642086d429b4f95c2381cae1c0aa
                           .group:0000000000000000 wm4.string.h.15.dab3980bf35408a4c507182805e2de3a
                           .group:0000000000000000 wm4.stddef.h.161.19e15733342b50ead2919490b095303e
                           .group:0000000000000000 wm4.stdbool.h.29.07dce69c3b78884144b7f7bd19483461
                           .group:0000000000000000 wm4.hw_types.h.67.b10589a0806dcc2d274d6fab6b736519
                           .group:0000000000000000 wm4.interrupt.h.41.272fc4ec0e276feb439e7974d0f77eaf
                           .group:0000000000000000 wm4.board_info.h.22.1291259c351bc018e4d4402148b3c6db
                           .group:0000000000000000 wm4.opendefs.h.23.47191652995b7fa35f12da40c3552cda
                           .group:0000000000000000 wm4.IEEE802154.h.2.38fb510ed33a23a9a0660164e6dfab69
                           .group:0000000000000000 wm4.idmanager.h.2.8c0e2159b32ef3125cbb1e984805cbfe

NO UNDEFINED SYMBOLS
