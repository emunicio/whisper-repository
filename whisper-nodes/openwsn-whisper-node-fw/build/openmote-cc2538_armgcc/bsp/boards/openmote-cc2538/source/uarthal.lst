   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"uarthal.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.align	2
  20              		.global	UARTParityModeSet
  21              		.thumb
  22              		.thumb_func
  24              	UARTParityModeSet:
  25              	.LFB0:
  26              		.file 1 "build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c"
   1:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** /******************************************************************************
   2:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** *  Filename:       uart.c
   3:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** *  Revised:        $Date: 2013-04-16 12:01:40 +0200 (Tue, 16 Apr 2013) $
   4:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** *  Revision:       $Revision: 9777 $
   5:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** *
   6:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** *  Description:    Driver for the UART.
   7:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** *
   8:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** *  Copyright (C) 2012 Texas Instruments Incorporated - http://www.ti.com/
   9:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** *
  10:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** *
  11:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** *  Redistribution and use in source and binary forms, with or without
  12:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** *  modification, are permitted provided that the following conditions
  13:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** *  are met:
  14:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** *
  15:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** *    Redistributions of source code must retain the above copyright
  16:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** *    notice, this list of conditions and the following disclaimer.
  17:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** *
  18:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** *    Redistributions in binary form must reproduce the above copyright
  19:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** *    notice, this list of conditions and the following disclaimer in the
  20:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** *    documentation and/or other materials provided with the distribution.
  21:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** *
  22:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** *    Neither the name of Texas Instruments Incorporated nor the names of
  23:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** *    its contributors may be used to endorse or promote products derived
  24:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** *    from this software without specific prior written permission.
  25:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** *
  26:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  27:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  28:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
  29:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
  30:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  31:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  32:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  33:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  34:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  35:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  36:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** *  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  37:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** *
  38:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** ******************************************************************************/
  39:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
  40:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
  41:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
  42:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \addtogroup uart_api
  43:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! @{
  44:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
  45:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
  46:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
  47:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** #include <headers/hw_ints.h>
  48:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** #include <headers/hw_memmap.h>
  49:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** #include <headers/hw_sys_ctrl.h>
  50:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** #include <headers/hw_uart.h>
  51:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** #include "debug.h"
  52:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** #include "interrupt.h"
  53:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** #include "uarthal.h"
  54:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
  55:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
  56:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
  57:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \internal
  58:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! Checks a UART base address
  59:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
  60:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
  61:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
  62:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! This function determines if a UART port base address is valid.
  63:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
  64:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \return Returns \b true if the base address is valid and \b false
  65:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! otherwise.
  66:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
  67:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
  68:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** #ifdef ENABLE_ASSERT
  69:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** static bool
  70:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** UARTBaseValid(uint32_t ui32Base)
  71:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** {
  72:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     return((ui32Base == UART0_BASE) || (ui32Base == UART1_BASE));
  73:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** }
  74:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** #endif
  75:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
  76:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
  77:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
  78:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! Sets the type of parity
  79:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
  80:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
  81:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32Parity specifies the type of parity to use.
  82:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
  83:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! This function sets the type of parity to use for transmitting and expect
  84:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! when receiving.  The \e ui32Parity parameter must be one of
  85:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \b UART_CONFIG_PAR_NONE, \b UART_CONFIG_PAR_EVEN, \b UART_CONFIG_PAR_ODD,
  86:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \b UART_CONFIG_PAR_ONE, or \b UART_CONFIG_PAR_ZERO.  The last two allow
  87:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! direct control of the parity bit; it is always either one or zero based on
  88:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! the mode.
  89:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
  90:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \return None
  91:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
  92:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
  93:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** void
  94:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** UARTParityModeSet(uint32_t ui32Base, uint32_t ui32Parity)
  95:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** {
  27              		.loc 1 95 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 8
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32 0000 80B4     		push	{r7}
  33              		.cfi_def_cfa_offset 4
  34              		.cfi_offset 7, -4
  35 0002 83B0     		sub	sp, sp, #12
  36              		.cfi_def_cfa_offset 16
  37 0004 00AF     		add	r7, sp, #0
  38              		.cfi_def_cfa_register 7
  39 0006 7860     		str	r0, [r7, #4]
  40 0008 3960     		str	r1, [r7]
  96:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
  97:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Check the arguments.
  98:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
  99:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 100:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ASSERT((ui32Parity == UART_CONFIG_PAR_NONE) ||
 101:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****            (ui32Parity == UART_CONFIG_PAR_EVEN) ||
 102:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****            (ui32Parity == UART_CONFIG_PAR_ODD) ||
 103:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****            (ui32Parity == UART_CONFIG_PAR_ONE) ||
 104:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****            (ui32Parity == UART_CONFIG_PAR_ZERO));
 105:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 106:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 107:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Set the parity mode.
 108:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 109:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_LCRH) = ((HWREG(ui32Base + UART_O_LCRH) &
  41              		.loc 1 109 0
  42 000a 7B68     		ldr	r3, [r7, #4]
  43 000c 2C33     		adds	r3, r3, #44
  44 000e 1946     		mov	r1, r3
  45 0010 7B68     		ldr	r3, [r7, #4]
  46 0012 2C33     		adds	r3, r3, #44
  47 0014 1B68     		ldr	r3, [r3]
  48 0016 23F08602 		bic	r2, r3, #134
 110:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****                                       ~(UART_LCRH_SPS | UART_LCRH_EPS |
 111:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****                                         UART_LCRH_PEN)) | ui32Parity);
  49              		.loc 1 111 0
  50 001a 3B68     		ldr	r3, [r7]
  51 001c 1343     		orrs	r3, r3, r2
 109:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****                                       ~(UART_LCRH_SPS | UART_LCRH_EPS |
  52              		.loc 1 109 0
  53 001e 0B60     		str	r3, [r1]
 112:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** }
  54              		.loc 1 112 0
  55 0020 00BF     		nop
  56 0022 0C37     		adds	r7, r7, #12
  57              		.cfi_def_cfa_offset 4
  58 0024 BD46     		mov	sp, r7
  59              		.cfi_def_cfa_register 13
  60              		@ sp needed
  61 0026 80BC     		pop	{r7}
  62              		.cfi_restore 7
  63              		.cfi_def_cfa_offset 0
  64 0028 7047     		bx	lr
  65              		.cfi_endproc
  66              	.LFE0:
  68 002a 00BF     		.align	2
  69              		.global	UARTParityModeGet
  70              		.thumb
  71              		.thumb_func
  73              	UARTParityModeGet:
  74              	.LFB1:
 113:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 114:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 115:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 116:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! Gets the type of parity currently being used
 117:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 118:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 119:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 120:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! This function gets the type of parity used for transmitting data and
 121:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! expected when receiving data.
 122:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 123:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \return Returns the current parity settings, specified as one of
 124:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \b UART_CONFIG_PAR_NONE, \b UART_CONFIG_PAR_EVEN, \b UART_CONFIG_PAR_ODD,
 125:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \b UART_CONFIG_PAR_ONE, or \b UART_CONFIG_PAR_ZERO.
 126:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 127:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 128:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** uint32_t
 129:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** UARTParityModeGet(uint32_t ui32Base)
 130:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** {
  75              		.loc 1 130 0
  76              		.cfi_startproc
  77              		@ args = 0, pretend = 0, frame = 8
  78              		@ frame_needed = 1, uses_anonymous_args = 0
  79              		@ link register save eliminated.
  80 002c 80B4     		push	{r7}
  81              		.cfi_def_cfa_offset 4
  82              		.cfi_offset 7, -4
  83 002e 83B0     		sub	sp, sp, #12
  84              		.cfi_def_cfa_offset 16
  85 0030 00AF     		add	r7, sp, #0
  86              		.cfi_def_cfa_register 7
  87 0032 7860     		str	r0, [r7, #4]
 131:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 132:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Check the arguments.
 133:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 134:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 135:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 136:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 137:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Return the current parity setting.
 138:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 139:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     return(HWREG(ui32Base + UART_O_LCRH) &
  88              		.loc 1 139 0
  89 0034 7B68     		ldr	r3, [r7, #4]
  90 0036 2C33     		adds	r3, r3, #44
  91 0038 1B68     		ldr	r3, [r3]
  92 003a 03F08603 		and	r3, r3, #134
 140:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****            (UART_LCRH_SPS | UART_LCRH_EPS | UART_LCRH_PEN));
 141:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** }
  93              		.loc 1 141 0
  94 003e 1846     		mov	r0, r3
  95 0040 0C37     		adds	r7, r7, #12
  96              		.cfi_def_cfa_offset 4
  97 0042 BD46     		mov	sp, r7
  98              		.cfi_def_cfa_register 13
  99              		@ sp needed
 100 0044 80BC     		pop	{r7}
 101              		.cfi_restore 7
 102              		.cfi_def_cfa_offset 0
 103 0046 7047     		bx	lr
 104              		.cfi_endproc
 105              	.LFE1:
 107              		.align	2
 108              		.global	UARTFIFOLevelSet
 109              		.thumb
 110              		.thumb_func
 112              	UARTFIFOLevelSet:
 113              	.LFB2:
 142:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 143:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 144:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 145:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! Sets the FIFO level at which interrupts are generated
 146:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 147:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 148:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32TxLevel is the transmit FIFO interrupt level, specified as one of
 149:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \b UART_FIFO_TX1_8, \b UART_FIFO_TX2_8, \b UART_FIFO_TX4_8,
 150:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \b UART_FIFO_TX6_8, or \b UART_FIFO_TX7_8.
 151:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32RxLevel is the receive FIFO interrupt level, specified as one of
 152:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \b UART_FIFO_RX1_8, \b UART_FIFO_RX2_8, \b UART_FIFO_RX4_8,
 153:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \b UART_FIFO_RX6_8, or \b UART_FIFO_RX7_8.
 154:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 155:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! This function sets the FIFO level at which transmit and receive interrupts
 156:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! are generated.
 157:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 158:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \return None
 159:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 160:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 161:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** void
 162:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** UARTFIFOLevelSet(uint32_t ui32Base, uint32_t ui32TxLevel,
 163:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****                  uint32_t ui32RxLevel)
 164:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** {
 114              		.loc 1 164 0
 115              		.cfi_startproc
 116              		@ args = 0, pretend = 0, frame = 16
 117              		@ frame_needed = 1, uses_anonymous_args = 0
 118              		@ link register save eliminated.
 119 0048 80B4     		push	{r7}
 120              		.cfi_def_cfa_offset 4
 121              		.cfi_offset 7, -4
 122 004a 85B0     		sub	sp, sp, #20
 123              		.cfi_def_cfa_offset 24
 124 004c 00AF     		add	r7, sp, #0
 125              		.cfi_def_cfa_register 7
 126 004e F860     		str	r0, [r7, #12]
 127 0050 B960     		str	r1, [r7, #8]
 128 0052 7A60     		str	r2, [r7, #4]
 165:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 166:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Check the arguments.
 167:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 168:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 169:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ASSERT((ui32TxLevel == UART_FIFO_TX1_8) ||
 170:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****            (ui32TxLevel == UART_FIFO_TX2_8) ||
 171:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****            (ui32TxLevel == UART_FIFO_TX4_8) ||
 172:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****            (ui32TxLevel == UART_FIFO_TX6_8) ||
 173:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****            (ui32TxLevel == UART_FIFO_TX7_8));
 174:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ASSERT((ui32RxLevel == UART_FIFO_RX1_8) ||
 175:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****            (ui32RxLevel == UART_FIFO_RX2_8) ||
 176:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****            (ui32RxLevel == UART_FIFO_RX4_8) ||
 177:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****            (ui32RxLevel == UART_FIFO_RX6_8) ||
 178:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****            (ui32RxLevel == UART_FIFO_RX7_8));
 179:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 180:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 181:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Set the FIFO interrupt levels.
 182:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 183:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
 129              		.loc 1 183 0
 130 0054 FB68     		ldr	r3, [r7, #12]
 131 0056 3433     		adds	r3, r3, #52
 132 0058 1946     		mov	r1, r3
 133 005a BA68     		ldr	r2, [r7, #8]
 134 005c 7B68     		ldr	r3, [r7, #4]
 135 005e 1343     		orrs	r3, r3, r2
 136 0060 0B60     		str	r3, [r1]
 184:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** }
 137              		.loc 1 184 0
 138 0062 00BF     		nop
 139 0064 1437     		adds	r7, r7, #20
 140              		.cfi_def_cfa_offset 4
 141 0066 BD46     		mov	sp, r7
 142              		.cfi_def_cfa_register 13
 143              		@ sp needed
 144 0068 80BC     		pop	{r7}
 145              		.cfi_restore 7
 146              		.cfi_def_cfa_offset 0
 147 006a 7047     		bx	lr
 148              		.cfi_endproc
 149              	.LFE2:
 151              		.align	2
 152              		.global	UARTFIFOLevelGet
 153              		.thumb
 154              		.thumb_func
 156              	UARTFIFOLevelGet:
 157              	.LFB3:
 185:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 186:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 187:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 188:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! Gets the FIFO level at which interrupts are generated
 189:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 190:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 191:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param pui32TxLevel is a pointer to storage for the transmit FIFO level,
 192:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! returned as one of \b UART_FIFO_TX1_8, \b UART_FIFO_TX2_8,
 193:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \b UART_FIFO_TX4_8, \b UART_FIFO_TX6_8, or \b UART_FIFO_TX7_8.
 194:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param pui32RxLevel is a pointer to storage for the receive FIFO level,
 195:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! returned as one of \b UART_FIFO_RX1_8, \b UART_FIFO_RX2_8,
 196:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \b UART_FIFO_RX4_8, \b UART_FIFO_RX6_8, or \b UART_FIFO_RX7_8.
 197:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 198:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! This function gets the FIFO level at which transmit and receive interrupts
 199:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! are generated.
 200:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 201:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \return None
 202:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 203:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 204:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** void
 205:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** UARTFIFOLevelGet(uint32_t ui32Base, uint32_t *pui32TxLevel,
 206:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****                  uint32_t *pui32RxLevel)
 207:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** {
 158              		.loc 1 207 0
 159              		.cfi_startproc
 160              		@ args = 0, pretend = 0, frame = 24
 161              		@ frame_needed = 1, uses_anonymous_args = 0
 162              		@ link register save eliminated.
 163 006c 80B4     		push	{r7}
 164              		.cfi_def_cfa_offset 4
 165              		.cfi_offset 7, -4
 166 006e 87B0     		sub	sp, sp, #28
 167              		.cfi_def_cfa_offset 32
 168 0070 00AF     		add	r7, sp, #0
 169              		.cfi_def_cfa_register 7
 170 0072 F860     		str	r0, [r7, #12]
 171 0074 B960     		str	r1, [r7, #8]
 172 0076 7A60     		str	r2, [r7, #4]
 208:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     uint32_t ui32Temp;
 209:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 210:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 211:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Check the arguments.
 212:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 213:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 214:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 215:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 216:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Read the FIFO level register.
 217:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 218:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ui32Temp = HWREG(ui32Base + UART_O_IFLS);
 173              		.loc 1 218 0
 174 0078 FB68     		ldr	r3, [r7, #12]
 175 007a 3433     		adds	r3, r3, #52
 176 007c 1B68     		ldr	r3, [r3]
 177 007e 7B61     		str	r3, [r7, #20]
 219:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 220:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 221:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Extract the transmit and receive FIFO levels.
 222:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 223:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     *pui32TxLevel = ui32Temp & UART_IFLS_TXIFLSEL_M;
 178              		.loc 1 223 0
 179 0080 7B69     		ldr	r3, [r7, #20]
 180 0082 03F00702 		and	r2, r3, #7
 181 0086 BB68     		ldr	r3, [r7, #8]
 182 0088 1A60     		str	r2, [r3]
 224:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     *pui32RxLevel = ui32Temp & UART_IFLS_RXIFLSEL_M;
 183              		.loc 1 224 0
 184 008a 7B69     		ldr	r3, [r7, #20]
 185 008c 03F03802 		and	r2, r3, #56
 186 0090 7B68     		ldr	r3, [r7, #4]
 187 0092 1A60     		str	r2, [r3]
 225:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** }
 188              		.loc 1 225 0
 189 0094 00BF     		nop
 190 0096 1C37     		adds	r7, r7, #28
 191              		.cfi_def_cfa_offset 4
 192 0098 BD46     		mov	sp, r7
 193              		.cfi_def_cfa_register 13
 194              		@ sp needed
 195 009a 80BC     		pop	{r7}
 196              		.cfi_restore 7
 197              		.cfi_def_cfa_offset 0
 198 009c 7047     		bx	lr
 199              		.cfi_endproc
 200              	.LFE3:
 202 009e 00BF     		.align	2
 203              		.global	UARTConfigSetExpClk
 204              		.thumb
 205              		.thumb_func
 207              	UARTConfigSetExpClk:
 208              	.LFB4:
 226:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 227:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 228:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 229:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! Sets the configuration of a UART
 230:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 231:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 232:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32UARTClk is the rate of the clock supplied to the UART module.
 233:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32Baud is the desired baud rate.
 234:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32Config is the data format for the port (number of data bits,
 235:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! number of stop bits, and parity).
 236:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 237:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! This function configures the UART for operation in the specified data
 238:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! format.  The baud rate is provided in the \e ui32Baud parameter and the data
 239:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! format in the \e ui32Config parameter.
 240:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 241:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! The \e ui32Config parameter is the logical OR of three values: the number of
 242:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! data bits, the number of stop bits, and the parity.  \b UART_CONFIG_WLEN_8,
 243:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \b UART_CONFIG_WLEN_7, \b UART_CONFIG_WLEN_6, and \b UART_CONFIG_WLEN_5
 244:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! select from eight to five data bits per byte (respectively).
 245:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \b UART_CONFIG_STOP_ONE and \b UART_CONFIG_STOP_TWO select one or two stop
 246:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! bits (respectively).  \b UART_CONFIG_PAR_NONE, \b UART_CONFIG_PAR_EVEN,
 247:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \b UART_CONFIG_PAR_ODD, \b UART_CONFIG_PAR_ONE, and \b UART_CONFIG_PAR_ZERO
 248:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! select the parity mode (no parity bit, even parity bit, odd parity bit,
 249:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! parity bit always one, and parity bit always zero, respectively).
 250:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 251:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! The peripheral clock is set in the System Control module.  The frequency of
 252:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! the system clock is the value returned by SysCtrlClockGet() or
 253:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! SysCtrlIOClockGet() depending on the chosen clock source as set by
 254:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! UARTClockSourceSet(), or it can be explicitly hard coded if it is constant
 255:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! and known (to save the code/execution overhead of a call to
 256:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! SysCtrlClockGet() or SysCtrlIOClockGet()).
 257:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 258:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! The CC2538 part has the ability to specify the UART baud clock
 259:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! source (via UARTClockSourceSet()), the peripheral clock can be changed to
 260:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! PIOSC.  In this case, the peripheral clock should be specified as
 261:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! 16,000,000 (the nominal rate of PIOSC).
 262:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 263:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \sa See  UARTClockSourceSet()
 264:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 265:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \return None
 266:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 267:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 268:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** void
 269:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** UARTConfigSetExpClk(uint32_t ui32Base, uint32_t ui32UARTClk,
 270:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****                     uint32_t ui32Baud, uint32_t ui32Config)
 271:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** {
 209              		.loc 1 271 0
 210              		.cfi_startproc
 211              		@ args = 0, pretend = 0, frame = 24
 212              		@ frame_needed = 1, uses_anonymous_args = 0
 213 00a0 80B5     		push	{r7, lr}
 214              		.cfi_def_cfa_offset 8
 215              		.cfi_offset 7, -8
 216              		.cfi_offset 14, -4
 217 00a2 86B0     		sub	sp, sp, #24
 218              		.cfi_def_cfa_offset 32
 219 00a4 00AF     		add	r7, sp, #0
 220              		.cfi_def_cfa_register 7
 221 00a6 F860     		str	r0, [r7, #12]
 222 00a8 B960     		str	r1, [r7, #8]
 223 00aa 7A60     		str	r2, [r7, #4]
 224 00ac 3B60     		str	r3, [r7]
 272:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     uint32_t ui32Div;
 273:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 274:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 275:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Check the arguments.
 276:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 277:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 278:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ASSERT(ui32Baud != 0);
 279:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 280:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 281:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Stop the UART.
 282:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 283:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     UARTDisable(ui32Base);
 225              		.loc 1 283 0
 226 00ae F868     		ldr	r0, [r7, #12]
 227 00b0 FFF7FEFF 		bl	UARTDisable
 284:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 285:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 286:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Is the required baud rate greater than the maximum rate supported
 287:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // without the use of high speed mode?
 288:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 289:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     if((ui32Baud * 16) > ui32UARTClk)
 228              		.loc 1 289 0
 229 00b4 7B68     		ldr	r3, [r7, #4]
 230 00b6 1A01     		lsls	r2, r3, #4
 231 00b8 BB68     		ldr	r3, [r7, #8]
 232 00ba 9A42     		cmp	r2, r3
 233 00bc 0CD9     		bls	.L7
 290:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     {
 291:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****         //
 292:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****         // Enable high speed mode.
 293:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****         //
 294:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****         HWREG(ui32Base + UART_O_CTL) |= UART_CTL_HSE;
 234              		.loc 1 294 0
 235 00be FB68     		ldr	r3, [r7, #12]
 236 00c0 3033     		adds	r3, r3, #48
 237 00c2 1A46     		mov	r2, r3
 238 00c4 FB68     		ldr	r3, [r7, #12]
 239 00c6 3033     		adds	r3, r3, #48
 240 00c8 1B68     		ldr	r3, [r3]
 241 00ca 43F02003 		orr	r3, r3, #32
 242 00ce 1360     		str	r3, [r2]
 295:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 296:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****         //
 297:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****         // Half the supplied baud rate to compensate for enabling high speed
 298:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****         // mode.  This allows the following code to be common to both cases.
 299:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****         //
 300:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****         ui32Baud /= 2;
 243              		.loc 1 300 0
 244 00d0 7B68     		ldr	r3, [r7, #4]
 245 00d2 5B08     		lsrs	r3, r3, #1
 246 00d4 7B60     		str	r3, [r7, #4]
 247 00d6 08E0     		b	.L8
 248              	.L7:
 301:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     }
 302:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     else
 303:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     {
 304:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****         //
 305:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****         // Disable high speed mode.
 306:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****         //
 307:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****         HWREG(ui32Base + UART_O_CTL) &= ~(UART_CTL_HSE);
 249              		.loc 1 307 0
 250 00d8 FB68     		ldr	r3, [r7, #12]
 251 00da 3033     		adds	r3, r3, #48
 252 00dc 1A46     		mov	r2, r3
 253 00de FB68     		ldr	r3, [r7, #12]
 254 00e0 3033     		adds	r3, r3, #48
 255 00e2 1B68     		ldr	r3, [r3]
 256 00e4 23F02003 		bic	r3, r3, #32
 257 00e8 1360     		str	r3, [r2]
 258              	.L8:
 308:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     }
 309:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 310:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 311:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Compute the fractional baud rate divider.
 312:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 313:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ui32Div = (((ui32UARTClk * 8) / ui32Baud) + 1) / 2;
 259              		.loc 1 313 0
 260 00ea BB68     		ldr	r3, [r7, #8]
 261 00ec DA00     		lsls	r2, r3, #3
 262 00ee 7B68     		ldr	r3, [r7, #4]
 263 00f0 B2FBF3F3 		udiv	r3, r2, r3
 264 00f4 0133     		adds	r3, r3, #1
 265 00f6 5B08     		lsrs	r3, r3, #1
 266 00f8 7B61     		str	r3, [r7, #20]
 314:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 315:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 316:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Set the baud rate.
 317:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 318:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_IBRD) = ui32Div / 64;
 267              		.loc 1 318 0
 268 00fa FB68     		ldr	r3, [r7, #12]
 269 00fc 2433     		adds	r3, r3, #36
 270 00fe 1A46     		mov	r2, r3
 271 0100 7B69     		ldr	r3, [r7, #20]
 272 0102 9B09     		lsrs	r3, r3, #6
 273 0104 1360     		str	r3, [r2]
 319:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_FBRD) = ui32Div % 64;
 274              		.loc 1 319 0
 275 0106 FB68     		ldr	r3, [r7, #12]
 276 0108 2833     		adds	r3, r3, #40
 277 010a 1A46     		mov	r2, r3
 278 010c 7B69     		ldr	r3, [r7, #20]
 279 010e 03F03F03 		and	r3, r3, #63
 280 0112 1360     		str	r3, [r2]
 320:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 321:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 322:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Set parity, data length, and number of stop bits.
 323:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 324:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_LCRH) = ui32Config;
 281              		.loc 1 324 0
 282 0114 FB68     		ldr	r3, [r7, #12]
 283 0116 2C33     		adds	r3, r3, #44
 284 0118 1A46     		mov	r2, r3
 285 011a 3B68     		ldr	r3, [r7]
 286 011c 1360     		str	r3, [r2]
 325:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 326:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 327:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Clear the flags register.
 328:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 329:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_FR) = 0;
 287              		.loc 1 329 0
 288 011e FB68     		ldr	r3, [r7, #12]
 289 0120 1833     		adds	r3, r3, #24
 290 0122 1A46     		mov	r2, r3
 291 0124 0023     		movs	r3, #0
 292 0126 1360     		str	r3, [r2]
 330:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** }
 293              		.loc 1 330 0
 294 0128 00BF     		nop
 295 012a 1837     		adds	r7, r7, #24
 296              		.cfi_def_cfa_offset 8
 297 012c BD46     		mov	sp, r7
 298              		.cfi_def_cfa_register 13
 299              		@ sp needed
 300 012e 80BD     		pop	{r7, pc}
 301              		.cfi_endproc
 302              	.LFE4:
 304              		.align	2
 305              		.global	UARTConfigGetExpClk
 306              		.thumb
 307              		.thumb_func
 309              	UARTConfigGetExpClk:
 310              	.LFB5:
 331:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 332:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 333:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 334:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! Gets the current configuration of a UART
 335:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 336:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 337:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32UARTClk is the rate of the clock supplied to the UART module.
 338:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param pui32Baud is a pointer to storage for the baud rate.
 339:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param pui32Config is a pointer to storage for the data format.
 340:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 341:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! The baud rate and data format for the UART is determined, given an
 342:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! explicitly provided peripheral clock (hence the ExpClk suffix).  The
 343:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! returned baud rate is the actual baud rate; it may not be the exact baud
 344:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! rate requested or an ``official'' baud rate.  The data format returned in
 345:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \e pui32Config is enumerated the same as the \e ui32Config parameter of
 346:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! UARTConfigSetExpClk().
 347:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 348:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! The peripheral clock is set in the System Control module.  The frequency of
 349:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! the system clock is the value returned by SysCtrlClockGet() or
 350:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! SysCtrlIOClockGet() depending on the chosen clock source as set by
 351:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! UARTClockSourceSet(), or it can be explicitly hard coded if it is constant
 352:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! and known (to save the code/execution overhead of a call to
 353:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! SysCtrlClockGet() or SysCtrlIOClockGet()).
 354:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 355:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! The CC2538 part has the ability to specify the UART baud clock
 356:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! source (via UARTClockSourceSet()), the peripheral clock can be changed to
 357:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! PIOSC.  In this case, the peripheral clock should be specified as
 358:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! 16,000,000 (the nominal rate of PIOSC).
 359:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 360:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \return None
 361:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 362:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 363:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** void
 364:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** UARTConfigGetExpClk(uint32_t ui32Base, uint32_t ui32UARTClk,
 365:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****                     uint32_t *pui32Baud, uint32_t *pui32Config)
 366:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** {
 311              		.loc 1 366 0
 312              		.cfi_startproc
 313              		@ args = 0, pretend = 0, frame = 24
 314              		@ frame_needed = 1, uses_anonymous_args = 0
 315              		@ link register save eliminated.
 316 0130 80B4     		push	{r7}
 317              		.cfi_def_cfa_offset 4
 318              		.cfi_offset 7, -4
 319 0132 87B0     		sub	sp, sp, #28
 320              		.cfi_def_cfa_offset 32
 321 0134 00AF     		add	r7, sp, #0
 322              		.cfi_def_cfa_register 7
 323 0136 F860     		str	r0, [r7, #12]
 324 0138 B960     		str	r1, [r7, #8]
 325 013a 7A60     		str	r2, [r7, #4]
 326 013c 3B60     		str	r3, [r7]
 367:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     uint32_t ui32Int, ui32Frac;
 368:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 369:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 370:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Check the arguments.
 371:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 372:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 373:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 374:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 375:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Compute the baud rate.
 376:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 377:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ui32Int = HWREG(ui32Base + UART_O_IBRD);
 327              		.loc 1 377 0
 328 013e FB68     		ldr	r3, [r7, #12]
 329 0140 2433     		adds	r3, r3, #36
 330 0142 1B68     		ldr	r3, [r3]
 331 0144 7B61     		str	r3, [r7, #20]
 378:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ui32Frac = HWREG(ui32Base + UART_O_FBRD);
 332              		.loc 1 378 0
 333 0146 FB68     		ldr	r3, [r7, #12]
 334 0148 2833     		adds	r3, r3, #40
 335 014a 1B68     		ldr	r3, [r3]
 336 014c 3B61     		str	r3, [r7, #16]
 379:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     *pui32Baud = (ui32UARTClk * 4) / ((64 * ui32Int) + ui32Frac);
 337              		.loc 1 379 0
 338 014e BB68     		ldr	r3, [r7, #8]
 339 0150 9A00     		lsls	r2, r3, #2
 340 0152 7B69     		ldr	r3, [r7, #20]
 341 0154 9901     		lsls	r1, r3, #6
 342 0156 3B69     		ldr	r3, [r7, #16]
 343 0158 0B44     		add	r3, r3, r1
 344 015a B2FBF3F2 		udiv	r2, r2, r3
 345 015e 7B68     		ldr	r3, [r7, #4]
 346 0160 1A60     		str	r2, [r3]
 380:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 381:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 382:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // See if high speed mode enabled.
 383:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 384:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     if(HWREG(ui32Base + UART_O_CTL) & UART_CTL_HSE)
 347              		.loc 1 384 0
 348 0162 FB68     		ldr	r3, [r7, #12]
 349 0164 3033     		adds	r3, r3, #48
 350 0166 1B68     		ldr	r3, [r3]
 351 0168 03F02003 		and	r3, r3, #32
 352 016c 002B     		cmp	r3, #0
 353 016e 04D0     		beq	.L10
 385:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     {
 386:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****         //
 387:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****         // High speed mode is enabled so the actual baud rate is actually
 388:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****         // double what was just calculated.
 389:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****         //
 390:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****         *pui32Baud *= 2;
 354              		.loc 1 390 0
 355 0170 7B68     		ldr	r3, [r7, #4]
 356 0172 1B68     		ldr	r3, [r3]
 357 0174 5A00     		lsls	r2, r3, #1
 358 0176 7B68     		ldr	r3, [r7, #4]
 359 0178 1A60     		str	r2, [r3]
 360              	.L10:
 391:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     }
 392:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 393:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 394:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Get the parity, data length, and number of stop bits.
 395:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 396:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     *pui32Config = (HWREG(ui32Base + UART_O_LCRH) &
 361              		.loc 1 396 0
 362 017a FB68     		ldr	r3, [r7, #12]
 363 017c 2C33     		adds	r3, r3, #44
 364 017e 1B68     		ldr	r3, [r3]
 365 0180 03F0EE02 		and	r2, r3, #238
 366 0184 3B68     		ldr	r3, [r7]
 367 0186 1A60     		str	r2, [r3]
 397:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****                     (UART_LCRH_SPS | UART_LCRH_WLEN_M | UART_LCRH_STP2 |
 398:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****                      UART_LCRH_EPS | UART_LCRH_PEN));
 399:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** }
 368              		.loc 1 399 0
 369 0188 00BF     		nop
 370 018a 1C37     		adds	r7, r7, #28
 371              		.cfi_def_cfa_offset 4
 372 018c BD46     		mov	sp, r7
 373              		.cfi_def_cfa_register 13
 374              		@ sp needed
 375 018e 80BC     		pop	{r7}
 376              		.cfi_restore 7
 377              		.cfi_def_cfa_offset 0
 378 0190 7047     		bx	lr
 379              		.cfi_endproc
 380              	.LFE5:
 382 0192 00BF     		.align	2
 383              		.global	UARTEnable
 384              		.thumb
 385              		.thumb_func
 387              	UARTEnable:
 388              	.LFB6:
 400:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 401:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 402:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 403:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! Enables transmitting and receiving
 404:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 405:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 406:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 407:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! This function sets the UARTEN, TXE, and RXE bits, and enables the transmit
 408:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! and receive FIFOs.
 409:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 410:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \return None
 411:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 412:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 413:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** void
 414:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** UARTEnable(uint32_t ui32Base)
 415:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** {
 389              		.loc 1 415 0
 390              		.cfi_startproc
 391              		@ args = 0, pretend = 0, frame = 8
 392              		@ frame_needed = 1, uses_anonymous_args = 0
 393              		@ link register save eliminated.
 394 0194 80B4     		push	{r7}
 395              		.cfi_def_cfa_offset 4
 396              		.cfi_offset 7, -4
 397 0196 83B0     		sub	sp, sp, #12
 398              		.cfi_def_cfa_offset 16
 399 0198 00AF     		add	r7, sp, #0
 400              		.cfi_def_cfa_register 7
 401 019a 7860     		str	r0, [r7, #4]
 416:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 417:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Check the arguments.
 418:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 419:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 420:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 421:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 422:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Enable the FIFO.
 423:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 424:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
 402              		.loc 1 424 0
 403 019c 7B68     		ldr	r3, [r7, #4]
 404 019e 2C33     		adds	r3, r3, #44
 405 01a0 1A46     		mov	r2, r3
 406 01a2 7B68     		ldr	r3, [r7, #4]
 407 01a4 2C33     		adds	r3, r3, #44
 408 01a6 1B68     		ldr	r3, [r3]
 409 01a8 43F01003 		orr	r3, r3, #16
 410 01ac 1360     		str	r3, [r2]
 425:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 426:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 427:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Enable RX, TX, and the UART.
 428:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 429:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
 411              		.loc 1 429 0
 412 01ae 7B68     		ldr	r3, [r7, #4]
 413 01b0 3033     		adds	r3, r3, #48
 414 01b2 1A46     		mov	r2, r3
 415 01b4 7B68     		ldr	r3, [r7, #4]
 416 01b6 3033     		adds	r3, r3, #48
 417 01b8 1B68     		ldr	r3, [r3]
 418 01ba 43F44073 		orr	r3, r3, #768
 419 01be 43F00103 		orr	r3, r3, #1
 420 01c2 1360     		str	r3, [r2]
 430:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****                                      UART_CTL_RXE);
 431:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** }
 421              		.loc 1 431 0
 422 01c4 00BF     		nop
 423 01c6 0C37     		adds	r7, r7, #12
 424              		.cfi_def_cfa_offset 4
 425 01c8 BD46     		mov	sp, r7
 426              		.cfi_def_cfa_register 13
 427              		@ sp needed
 428 01ca 80BC     		pop	{r7}
 429              		.cfi_restore 7
 430              		.cfi_def_cfa_offset 0
 431 01cc 7047     		bx	lr
 432              		.cfi_endproc
 433              	.LFE6:
 435 01ce 00BF     		.align	2
 436              		.global	UARTDisable
 437              		.thumb
 438              		.thumb_func
 440              	UARTDisable:
 441              	.LFB7:
 432:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 433:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 434:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 435:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! Disables transmitting and receiving
 436:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 437:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 438:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 439:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! This function clears the UARTEN, TXE, and RXE bits, waits for the end of
 440:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! transmission of the current character, and flushes the transmit FIFO.
 441:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 442:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \return None
 443:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 444:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 445:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** void
 446:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** UARTDisable(uint32_t ui32Base)
 447:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** {
 442              		.loc 1 447 0
 443              		.cfi_startproc
 444              		@ args = 0, pretend = 0, frame = 8
 445              		@ frame_needed = 1, uses_anonymous_args = 0
 446              		@ link register save eliminated.
 447 01d0 80B4     		push	{r7}
 448              		.cfi_def_cfa_offset 4
 449              		.cfi_offset 7, -4
 450 01d2 83B0     		sub	sp, sp, #12
 451              		.cfi_def_cfa_offset 16
 452 01d4 00AF     		add	r7, sp, #0
 453              		.cfi_def_cfa_register 7
 454 01d6 7860     		str	r0, [r7, #4]
 448:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 449:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Check the arguments.
 450:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 451:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 452:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 453:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 454:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Wait for end of TX.
 455:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 456:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     while(HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY)
 455              		.loc 1 456 0
 456 01d8 00BF     		nop
 457              	.L13:
 458              		.loc 1 456 0 is_stmt 0 discriminator 1
 459 01da 7B68     		ldr	r3, [r7, #4]
 460 01dc 1833     		adds	r3, r3, #24
 461 01de 1B68     		ldr	r3, [r3]
 462 01e0 03F00803 		and	r3, r3, #8
 463 01e4 002B     		cmp	r3, #0
 464 01e6 F8D1     		bne	.L13
 457:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     {
 458:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     }
 459:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 460:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 461:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Disable the FIFO.
 462:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 463:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_LCRH) &= ~(UART_LCRH_FEN);
 465              		.loc 1 463 0 is_stmt 1
 466 01e8 7B68     		ldr	r3, [r7, #4]
 467 01ea 2C33     		adds	r3, r3, #44
 468 01ec 1A46     		mov	r2, r3
 469 01ee 7B68     		ldr	r3, [r7, #4]
 470 01f0 2C33     		adds	r3, r3, #44
 471 01f2 1B68     		ldr	r3, [r3]
 472 01f4 23F01003 		bic	r3, r3, #16
 473 01f8 1360     		str	r3, [r2]
 464:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 465:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 466:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Disable the UART.
 467:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 468:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_CTL) &= ~(UART_CTL_UARTEN | UART_CTL_TXE |
 474              		.loc 1 468 0
 475 01fa 7B68     		ldr	r3, [r7, #4]
 476 01fc 3033     		adds	r3, r3, #48
 477 01fe 1A46     		mov	r2, r3
 478 0200 7B68     		ldr	r3, [r7, #4]
 479 0202 3033     		adds	r3, r3, #48
 480 0204 1B68     		ldr	r3, [r3]
 481 0206 23F44073 		bic	r3, r3, #768
 482 020a 23F00103 		bic	r3, r3, #1
 483 020e 1360     		str	r3, [r2]
 469:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****                                       UART_CTL_RXE);
 470:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** }
 484              		.loc 1 470 0
 485 0210 00BF     		nop
 486 0212 0C37     		adds	r7, r7, #12
 487              		.cfi_def_cfa_offset 4
 488 0214 BD46     		mov	sp, r7
 489              		.cfi_def_cfa_register 13
 490              		@ sp needed
 491 0216 80BC     		pop	{r7}
 492              		.cfi_restore 7
 493              		.cfi_def_cfa_offset 0
 494 0218 7047     		bx	lr
 495              		.cfi_endproc
 496              	.LFE7:
 498 021a 00BF     		.align	2
 499              		.global	UARTFIFOEnable
 500              		.thumb
 501              		.thumb_func
 503              	UARTFIFOEnable:
 504              	.LFB8:
 471:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 472:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 473:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 474:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! Enables the transmit and receive FIFOs
 475:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 476:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 477:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 478:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! This functions enables the transmit and receive FIFOs in the UART.
 479:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 480:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \return None
 481:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 482:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 483:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** void
 484:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** UARTFIFOEnable(uint32_t ui32Base)
 485:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** {
 505              		.loc 1 485 0
 506              		.cfi_startproc
 507              		@ args = 0, pretend = 0, frame = 8
 508              		@ frame_needed = 1, uses_anonymous_args = 0
 509              		@ link register save eliminated.
 510 021c 80B4     		push	{r7}
 511              		.cfi_def_cfa_offset 4
 512              		.cfi_offset 7, -4
 513 021e 83B0     		sub	sp, sp, #12
 514              		.cfi_def_cfa_offset 16
 515 0220 00AF     		add	r7, sp, #0
 516              		.cfi_def_cfa_register 7
 517 0222 7860     		str	r0, [r7, #4]
 486:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 487:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Check the arguments.
 488:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 489:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 490:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 491:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 492:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Enable the FIFO.
 493:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 494:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
 518              		.loc 1 494 0
 519 0224 7B68     		ldr	r3, [r7, #4]
 520 0226 2C33     		adds	r3, r3, #44
 521 0228 1A46     		mov	r2, r3
 522 022a 7B68     		ldr	r3, [r7, #4]
 523 022c 2C33     		adds	r3, r3, #44
 524 022e 1B68     		ldr	r3, [r3]
 525 0230 43F01003 		orr	r3, r3, #16
 526 0234 1360     		str	r3, [r2]
 495:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** }
 527              		.loc 1 495 0
 528 0236 00BF     		nop
 529 0238 0C37     		adds	r7, r7, #12
 530              		.cfi_def_cfa_offset 4
 531 023a BD46     		mov	sp, r7
 532              		.cfi_def_cfa_register 13
 533              		@ sp needed
 534 023c 80BC     		pop	{r7}
 535              		.cfi_restore 7
 536              		.cfi_def_cfa_offset 0
 537 023e 7047     		bx	lr
 538              		.cfi_endproc
 539              	.LFE8:
 541              		.align	2
 542              		.global	UARTFIFODisable
 543              		.thumb
 544              		.thumb_func
 546              	UARTFIFODisable:
 547              	.LFB9:
 496:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 497:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 498:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 499:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! Disables the transmit and receive FIFOs
 500:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 501:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 502:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 503:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! This functions disables the transmit and receive FIFOs in the UART.
 504:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 505:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \return None
 506:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 507:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 508:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** void
 509:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** UARTFIFODisable(uint32_t ui32Base)
 510:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** {
 548              		.loc 1 510 0
 549              		.cfi_startproc
 550              		@ args = 0, pretend = 0, frame = 8
 551              		@ frame_needed = 1, uses_anonymous_args = 0
 552              		@ link register save eliminated.
 553 0240 80B4     		push	{r7}
 554              		.cfi_def_cfa_offset 4
 555              		.cfi_offset 7, -4
 556 0242 83B0     		sub	sp, sp, #12
 557              		.cfi_def_cfa_offset 16
 558 0244 00AF     		add	r7, sp, #0
 559              		.cfi_def_cfa_register 7
 560 0246 7860     		str	r0, [r7, #4]
 511:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 512:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Check the arguments.
 513:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 514:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 515:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 516:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 517:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Disable the FIFO.
 518:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 519:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_LCRH) &= ~(UART_LCRH_FEN);
 561              		.loc 1 519 0
 562 0248 7B68     		ldr	r3, [r7, #4]
 563 024a 2C33     		adds	r3, r3, #44
 564 024c 1A46     		mov	r2, r3
 565 024e 7B68     		ldr	r3, [r7, #4]
 566 0250 2C33     		adds	r3, r3, #44
 567 0252 1B68     		ldr	r3, [r3]
 568 0254 23F01003 		bic	r3, r3, #16
 569 0258 1360     		str	r3, [r2]
 520:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** }
 570              		.loc 1 520 0
 571 025a 00BF     		nop
 572 025c 0C37     		adds	r7, r7, #12
 573              		.cfi_def_cfa_offset 4
 574 025e BD46     		mov	sp, r7
 575              		.cfi_def_cfa_register 13
 576              		@ sp needed
 577 0260 80BC     		pop	{r7}
 578              		.cfi_restore 7
 579              		.cfi_def_cfa_offset 0
 580 0262 7047     		bx	lr
 581              		.cfi_endproc
 582              	.LFE9:
 584              		.align	2
 585              		.global	UARTEnableSIR
 586              		.thumb
 587              		.thumb_func
 589              	UARTEnableSIR:
 590              	.LFB10:
 521:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 522:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 523:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 524:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! Enables SIR (IrDA) mode on the specified UART
 525:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 526:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 527:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param bLowPower indicates if SIR Low Power Mode is to be used.
 528:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 529:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! This function enables the SIREN control bit for IrDA mode on the UART.  If
 530:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! the \e bLowPower flag is set, then SIRLP bit will also be set.
 531:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 532:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \return None
 533:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 534:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 535:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** void
 536:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** UARTEnableSIR(uint32_t ui32Base, bool bLowPower)
 537:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** {
 591              		.loc 1 537 0
 592              		.cfi_startproc
 593              		@ args = 0, pretend = 0, frame = 8
 594              		@ frame_needed = 1, uses_anonymous_args = 0
 595              		@ link register save eliminated.
 596 0264 80B4     		push	{r7}
 597              		.cfi_def_cfa_offset 4
 598              		.cfi_offset 7, -4
 599 0266 83B0     		sub	sp, sp, #12
 600              		.cfi_def_cfa_offset 16
 601 0268 00AF     		add	r7, sp, #0
 602              		.cfi_def_cfa_register 7
 603 026a 7860     		str	r0, [r7, #4]
 604 026c 0B46     		mov	r3, r1
 605 026e FB70     		strb	r3, [r7, #3]
 538:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 539:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Check the arguments.
 540:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 541:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 542:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 543:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 544:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Enable SIR and SIRLP (if appropriate).
 545:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 546:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     if(bLowPower)
 606              		.loc 1 546 0
 607 0270 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 608 0272 002B     		cmp	r3, #0
 609 0274 09D0     		beq	.L17
 547:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     {
 548:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****         HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_SIREN | UART_CTL_SIRLP);
 610              		.loc 1 548 0
 611 0276 7B68     		ldr	r3, [r7, #4]
 612 0278 3033     		adds	r3, r3, #48
 613 027a 1A46     		mov	r2, r3
 614 027c 7B68     		ldr	r3, [r7, #4]
 615 027e 3033     		adds	r3, r3, #48
 616 0280 1B68     		ldr	r3, [r3]
 617 0282 43F00603 		orr	r3, r3, #6
 618 0286 1360     		str	r3, [r2]
 549:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     }
 550:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     else
 551:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     {
 552:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****         HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_SIREN);
 553:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     }
 554:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** }
 619              		.loc 1 554 0
 620 0288 08E0     		b	.L19
 621              	.L17:
 552:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     }
 622              		.loc 1 552 0
 623 028a 7B68     		ldr	r3, [r7, #4]
 624 028c 3033     		adds	r3, r3, #48
 625 028e 1A46     		mov	r2, r3
 626 0290 7B68     		ldr	r3, [r7, #4]
 627 0292 3033     		adds	r3, r3, #48
 628 0294 1B68     		ldr	r3, [r3]
 629 0296 43F00203 		orr	r3, r3, #2
 630 029a 1360     		str	r3, [r2]
 631              	.L19:
 632              		.loc 1 554 0
 633 029c 00BF     		nop
 634 029e 0C37     		adds	r7, r7, #12
 635              		.cfi_def_cfa_offset 4
 636 02a0 BD46     		mov	sp, r7
 637              		.cfi_def_cfa_register 13
 638              		@ sp needed
 639 02a2 80BC     		pop	{r7}
 640              		.cfi_restore 7
 641              		.cfi_def_cfa_offset 0
 642 02a4 7047     		bx	lr
 643              		.cfi_endproc
 644              	.LFE10:
 646 02a6 00BF     		.align	2
 647              		.global	UARTDisableSIR
 648              		.thumb
 649              		.thumb_func
 651              	UARTDisableSIR:
 652              	.LFB11:
 555:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 556:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 557:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 558:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! Disables SIR (IrDA) mode on the specified UART
 559:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 560:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 561:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 562:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! This function clears the SIREN (IrDA) and SIRLP (Low Power) bits.
 563:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 564:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \return None
 565:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 566:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 567:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** void
 568:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** UARTDisableSIR(uint32_t ui32Base)
 569:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** {
 653              		.loc 1 569 0
 654              		.cfi_startproc
 655              		@ args = 0, pretend = 0, frame = 8
 656              		@ frame_needed = 1, uses_anonymous_args = 0
 657              		@ link register save eliminated.
 658 02a8 80B4     		push	{r7}
 659              		.cfi_def_cfa_offset 4
 660              		.cfi_offset 7, -4
 661 02aa 83B0     		sub	sp, sp, #12
 662              		.cfi_def_cfa_offset 16
 663 02ac 00AF     		add	r7, sp, #0
 664              		.cfi_def_cfa_register 7
 665 02ae 7860     		str	r0, [r7, #4]
 570:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 571:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Check the arguments.
 572:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 573:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 574:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 575:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 576:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Disable SIR and SIRLP (if appropriate).
 577:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 578:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_CTL) &= ~(UART_CTL_SIREN | UART_CTL_SIRLP);
 666              		.loc 1 578 0
 667 02b0 7B68     		ldr	r3, [r7, #4]
 668 02b2 3033     		adds	r3, r3, #48
 669 02b4 1A46     		mov	r2, r3
 670 02b6 7B68     		ldr	r3, [r7, #4]
 671 02b8 3033     		adds	r3, r3, #48
 672 02ba 1B68     		ldr	r3, [r3]
 673 02bc 23F00603 		bic	r3, r3, #6
 674 02c0 1360     		str	r3, [r2]
 579:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** }
 675              		.loc 1 579 0
 676 02c2 00BF     		nop
 677 02c4 0C37     		adds	r7, r7, #12
 678              		.cfi_def_cfa_offset 4
 679 02c6 BD46     		mov	sp, r7
 680              		.cfi_def_cfa_register 13
 681              		@ sp needed
 682 02c8 80BC     		pop	{r7}
 683              		.cfi_restore 7
 684              		.cfi_def_cfa_offset 0
 685 02ca 7047     		bx	lr
 686              		.cfi_endproc
 687              	.LFE11:
 689              		.align	2
 690              		.global	UARTTxIntModeSet
 691              		.thumb
 692              		.thumb_func
 694              	UARTTxIntModeSet:
 695              	.LFB12:
 580:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 581:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 582:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 583:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! Sets the operating mode for the UART transmit interrupt
 584:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 585:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 586:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32Mode is the operating mode for the transmit interrupt.  It may be
 587:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \b UART_TXINT_MODE_EOT to trigger interrupts when the transmitter is idle
 588:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! or \b UART_TXINT_MODE_FIFO to trigger based on the current transmit FIFO
 589:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! level.
 590:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 591:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! This function allows the mode of the UART transmit interrupt to be set.  By
 592:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! default, the transmit interrupt is asserted when the FIFO level falls past
 593:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! a threshold set via a call to UARTFIFOLevelSet().  Alternatively, if this
 594:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! function is called with \e ui32Mode set to \b UART_TXINT_MODE_EOT, the
 595:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! transmit interrupt is asserted once the transmitter is completely idle -
 596:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! the transmit FIFO is empty and all bits, including any stop bits, have
 597:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! cleared the transmitter.
 598:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 599:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \return None
 600:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 601:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 602:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** void
 603:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** UARTTxIntModeSet(uint32_t ui32Base, uint32_t ui32Mode)
 604:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** {
 696              		.loc 1 604 0
 697              		.cfi_startproc
 698              		@ args = 0, pretend = 0, frame = 8
 699              		@ frame_needed = 1, uses_anonymous_args = 0
 700              		@ link register save eliminated.
 701 02cc 80B4     		push	{r7}
 702              		.cfi_def_cfa_offset 4
 703              		.cfi_offset 7, -4
 704 02ce 83B0     		sub	sp, sp, #12
 705              		.cfi_def_cfa_offset 16
 706 02d0 00AF     		add	r7, sp, #0
 707              		.cfi_def_cfa_register 7
 708 02d2 7860     		str	r0, [r7, #4]
 709 02d4 3960     		str	r1, [r7]
 605:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 606:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Check the arguments.
 607:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 608:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 609:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ASSERT((ui32Mode == UART_TXINT_MODE_EOT) ||
 610:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****            (ui32Mode == UART_TXINT_MODE_FIFO));
 611:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 612:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 613:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Set or clear the EOT bit of the UART control register as appropriate.
 614:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 615:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_CTL) = ((HWREG(ui32Base + UART_O_CTL) &
 710              		.loc 1 615 0
 711 02d6 7B68     		ldr	r3, [r7, #4]
 712 02d8 3033     		adds	r3, r3, #48
 713 02da 1946     		mov	r1, r3
 714 02dc 7B68     		ldr	r3, [r7, #4]
 715 02de 3033     		adds	r3, r3, #48
 716 02e0 1B68     		ldr	r3, [r3]
 717 02e2 23F01002 		bic	r2, r3, #16
 616:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****                                      ~(UART_TXINT_MODE_EOT |
 617:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****                                        UART_TXINT_MODE_FIFO)) | ui32Mode);
 718              		.loc 1 617 0
 719 02e6 3B68     		ldr	r3, [r7]
 720 02e8 1343     		orrs	r3, r3, r2
 615:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****                                      ~(UART_TXINT_MODE_EOT |
 721              		.loc 1 615 0
 722 02ea 0B60     		str	r3, [r1]
 618:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** }
 723              		.loc 1 618 0
 724 02ec 00BF     		nop
 725 02ee 0C37     		adds	r7, r7, #12
 726              		.cfi_def_cfa_offset 4
 727 02f0 BD46     		mov	sp, r7
 728              		.cfi_def_cfa_register 13
 729              		@ sp needed
 730 02f2 80BC     		pop	{r7}
 731              		.cfi_restore 7
 732              		.cfi_def_cfa_offset 0
 733 02f4 7047     		bx	lr
 734              		.cfi_endproc
 735              	.LFE12:
 737 02f6 00BF     		.align	2
 738              		.global	UARTTxIntModeGet
 739              		.thumb
 740              		.thumb_func
 742              	UARTTxIntModeGet:
 743              	.LFB13:
 619:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 620:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 621:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 622:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! Returns the current operating mode for the UART transmit interrupt
 623:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 624:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 625:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 626:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! This function returns the current operating mode for the UART transmit
 627:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! interrupt.  The return value is \b UART_TXINT_MODE_EOT if the transmit
 628:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! interrupt is currently set to be asserted once the transmitter is
 629:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! completely idle - the transmit FIFO is empty and all bits, including any
 630:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! stop bits, have cleared the transmitter.  The return value is
 631:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \b UART_TXINT_MODE_FIFO if the interrupt is set to be asserted based upon
 632:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! the level of the transmit FIFO.
 633:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 634:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \return Returns \b UART_TXINT_MODE_FIFO or \b UART_TXINT_MODE_EOT.
 635:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 636:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 637:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** uint32_t
 638:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** UARTTxIntModeGet(uint32_t ui32Base)
 639:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** {
 744              		.loc 1 639 0
 745              		.cfi_startproc
 746              		@ args = 0, pretend = 0, frame = 8
 747              		@ frame_needed = 1, uses_anonymous_args = 0
 748              		@ link register save eliminated.
 749 02f8 80B4     		push	{r7}
 750              		.cfi_def_cfa_offset 4
 751              		.cfi_offset 7, -4
 752 02fa 83B0     		sub	sp, sp, #12
 753              		.cfi_def_cfa_offset 16
 754 02fc 00AF     		add	r7, sp, #0
 755              		.cfi_def_cfa_register 7
 756 02fe 7860     		str	r0, [r7, #4]
 640:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 641:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Check the arguments.
 642:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 643:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 644:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 645:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 646:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Return the current transmit interrupt mode.
 647:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 648:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     return(HWREG(ui32Base + UART_O_CTL) & (UART_TXINT_MODE_EOT |
 757              		.loc 1 648 0
 758 0300 7B68     		ldr	r3, [r7, #4]
 759 0302 3033     		adds	r3, r3, #48
 760 0304 1B68     		ldr	r3, [r3]
 761 0306 03F01003 		and	r3, r3, #16
 649:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****                                            UART_TXINT_MODE_FIFO));
 650:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** }
 762              		.loc 1 650 0
 763 030a 1846     		mov	r0, r3
 764 030c 0C37     		adds	r7, r7, #12
 765              		.cfi_def_cfa_offset 4
 766 030e BD46     		mov	sp, r7
 767              		.cfi_def_cfa_register 13
 768              		@ sp needed
 769 0310 80BC     		pop	{r7}
 770              		.cfi_restore 7
 771              		.cfi_def_cfa_offset 0
 772 0312 7047     		bx	lr
 773              		.cfi_endproc
 774              	.LFE13:
 776              		.align	2
 777              		.global	UARTCharsAvail
 778              		.thumb
 779              		.thumb_func
 781              	UARTCharsAvail:
 782              	.LFB14:
 651:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 652:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 653:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 654:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! Determines if there are any characters in the receive FIFO
 655:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 656:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 657:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 658:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! This function returns a flag indicating whether or not there is data
 659:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! available in the receive FIFO.
 660:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 661:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \return Returns \b true if there is data in the receive FIFO or \b false
 662:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! if there is no data in the receive FIFO.
 663:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 664:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 665:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** bool
 666:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** UARTCharsAvail(uint32_t ui32Base)
 667:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** {
 783              		.loc 1 667 0
 784              		.cfi_startproc
 785              		@ args = 0, pretend = 0, frame = 8
 786              		@ frame_needed = 1, uses_anonymous_args = 0
 787              		@ link register save eliminated.
 788 0314 80B4     		push	{r7}
 789              		.cfi_def_cfa_offset 4
 790              		.cfi_offset 7, -4
 791 0316 83B0     		sub	sp, sp, #12
 792              		.cfi_def_cfa_offset 16
 793 0318 00AF     		add	r7, sp, #0
 794              		.cfi_def_cfa_register 7
 795 031a 7860     		str	r0, [r7, #4]
 668:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 669:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Check the arguments.
 670:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 671:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 672:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 673:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 674:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Return the availability of characters.
 675:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 676:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     return((HWREG(ui32Base + UART_O_FR) & UART_FR_RXFE) ? false : true);
 796              		.loc 1 676 0
 797 031c 7B68     		ldr	r3, [r7, #4]
 798 031e 1833     		adds	r3, r3, #24
 799 0320 1B68     		ldr	r3, [r3]
 800 0322 03F01003 		and	r3, r3, #16
 801 0326 002B     		cmp	r3, #0
 802 0328 0CBF     		ite	eq
 803 032a 0123     		moveq	r3, #1
 804 032c 0023     		movne	r3, #0
 805 032e DBB2     		uxtb	r3, r3
 677:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** }
 806              		.loc 1 677 0
 807 0330 1846     		mov	r0, r3
 808 0332 0C37     		adds	r7, r7, #12
 809              		.cfi_def_cfa_offset 4
 810 0334 BD46     		mov	sp, r7
 811              		.cfi_def_cfa_register 13
 812              		@ sp needed
 813 0336 80BC     		pop	{r7}
 814              		.cfi_restore 7
 815              		.cfi_def_cfa_offset 0
 816 0338 7047     		bx	lr
 817              		.cfi_endproc
 818              	.LFE14:
 820 033a 00BF     		.align	2
 821              		.global	UARTSpaceAvail
 822              		.thumb
 823              		.thumb_func
 825              	UARTSpaceAvail:
 826              	.LFB15:
 678:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 679:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 680:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 681:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! Determines if there is any space in the transmit FIFO
 682:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 683:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 684:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 685:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! This function returns a flag indicating whether or not there is space
 686:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! available in the transmit FIFO.
 687:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 688:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \return Returns \b true if there is space available in the transmit FIFO
 689:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! or \b false if there is no space available in the transmit FIFO.
 690:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 691:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 692:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** bool
 693:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** UARTSpaceAvail(uint32_t ui32Base)
 694:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** {
 827              		.loc 1 694 0
 828              		.cfi_startproc
 829              		@ args = 0, pretend = 0, frame = 8
 830              		@ frame_needed = 1, uses_anonymous_args = 0
 831              		@ link register save eliminated.
 832 033c 80B4     		push	{r7}
 833              		.cfi_def_cfa_offset 4
 834              		.cfi_offset 7, -4
 835 033e 83B0     		sub	sp, sp, #12
 836              		.cfi_def_cfa_offset 16
 837 0340 00AF     		add	r7, sp, #0
 838              		.cfi_def_cfa_register 7
 839 0342 7860     		str	r0, [r7, #4]
 695:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 696:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Check the arguments.
 697:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 698:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 699:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 700:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 701:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Return the availability of space.
 702:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 703:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     return((HWREG(ui32Base + UART_O_FR) & UART_FR_TXFF) ? false : true);
 840              		.loc 1 703 0
 841 0344 7B68     		ldr	r3, [r7, #4]
 842 0346 1833     		adds	r3, r3, #24
 843 0348 1B68     		ldr	r3, [r3]
 844 034a 03F02003 		and	r3, r3, #32
 845 034e 002B     		cmp	r3, #0
 846 0350 0CBF     		ite	eq
 847 0352 0123     		moveq	r3, #1
 848 0354 0023     		movne	r3, #0
 849 0356 DBB2     		uxtb	r3, r3
 704:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** }
 850              		.loc 1 704 0
 851 0358 1846     		mov	r0, r3
 852 035a 0C37     		adds	r7, r7, #12
 853              		.cfi_def_cfa_offset 4
 854 035c BD46     		mov	sp, r7
 855              		.cfi_def_cfa_register 13
 856              		@ sp needed
 857 035e 80BC     		pop	{r7}
 858              		.cfi_restore 7
 859              		.cfi_def_cfa_offset 0
 860 0360 7047     		bx	lr
 861              		.cfi_endproc
 862              	.LFE15:
 864 0362 00BF     		.align	2
 865              		.global	UARTCharGetNonBlocking
 866              		.thumb
 867              		.thumb_func
 869              	UARTCharGetNonBlocking:
 870              	.LFB16:
 705:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 706:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 707:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 708:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! Receives a character from the specified port
 709:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 710:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 711:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 712:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! This function gets a character from the receive FIFO for the specified
 713:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! port.
 714:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 715:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \return Returns the character read from the specified port, cast as a
 716:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \e int32_t.  A \b -1 is returned if there are no characters present in the
 717:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! receive FIFO.  The UARTCharsAvail() function should be called before
 718:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! attempting to call this function.
 719:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 720:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 721:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** int32_t
 722:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** UARTCharGetNonBlocking(uint32_t ui32Base)
 723:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** {
 871              		.loc 1 723 0
 872              		.cfi_startproc
 873              		@ args = 0, pretend = 0, frame = 8
 874              		@ frame_needed = 1, uses_anonymous_args = 0
 875              		@ link register save eliminated.
 876 0364 80B4     		push	{r7}
 877              		.cfi_def_cfa_offset 4
 878              		.cfi_offset 7, -4
 879 0366 83B0     		sub	sp, sp, #12
 880              		.cfi_def_cfa_offset 16
 881 0368 00AF     		add	r7, sp, #0
 882              		.cfi_def_cfa_register 7
 883 036a 7860     		str	r0, [r7, #4]
 724:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 725:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Check the arguments.
 726:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 727:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 728:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 729:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 730:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // See if there are any characters in the receive FIFO.
 731:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 732:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     if(!(HWREG(ui32Base + UART_O_FR) & UART_FR_RXFE))
 884              		.loc 1 732 0
 885 036c 7B68     		ldr	r3, [r7, #4]
 886 036e 1833     		adds	r3, r3, #24
 887 0370 1B68     		ldr	r3, [r3]
 888 0372 03F01003 		and	r3, r3, #16
 889 0376 002B     		cmp	r3, #0
 890 0378 02D1     		bne	.L29
 733:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     {
 734:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****         //
 735:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****         // Read and return the next character.
 736:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****         //
 737:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****         return(HWREG(ui32Base + UART_O_DR));
 891              		.loc 1 737 0
 892 037a 7B68     		ldr	r3, [r7, #4]
 893 037c 1B68     		ldr	r3, [r3]
 894 037e 01E0     		b	.L30
 895              	.L29:
 738:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     }
 739:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     else
 740:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     {
 741:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****         //
 742:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****         // There are no characters, so return a failure.
 743:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****         //
 744:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****         return(-1);
 896              		.loc 1 744 0
 897 0380 4FF0FF33 		mov	r3, #-1
 898              	.L30:
 745:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     }
 746:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** }
 899              		.loc 1 746 0
 900 0384 1846     		mov	r0, r3
 901 0386 0C37     		adds	r7, r7, #12
 902              		.cfi_def_cfa_offset 4
 903 0388 BD46     		mov	sp, r7
 904              		.cfi_def_cfa_register 13
 905              		@ sp needed
 906 038a 80BC     		pop	{r7}
 907              		.cfi_restore 7
 908              		.cfi_def_cfa_offset 0
 909 038c 7047     		bx	lr
 910              		.cfi_endproc
 911              	.LFE16:
 913 038e 00BF     		.align	2
 914              		.global	UARTCharGet
 915              		.thumb
 916              		.thumb_func
 918              	UARTCharGet:
 919              	.LFB17:
 747:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 748:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 749:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 750:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! Waits for a character from the specified port
 751:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 752:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 753:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 754:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! This function gets a character from the receive FIFO for the specified
 755:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! port.  If there are no characters available, this function waits until a
 756:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! character is received before returning.
 757:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 758:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \return Returns the character read from the specified port, cast as a
 759:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \e int32_t.
 760:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 761:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 762:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** int32_t
 763:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** UARTCharGet(uint32_t ui32Base)
 764:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** {
 920              		.loc 1 764 0
 921              		.cfi_startproc
 922              		@ args = 0, pretend = 0, frame = 8
 923              		@ frame_needed = 1, uses_anonymous_args = 0
 924              		@ link register save eliminated.
 925 0390 80B4     		push	{r7}
 926              		.cfi_def_cfa_offset 4
 927              		.cfi_offset 7, -4
 928 0392 83B0     		sub	sp, sp, #12
 929              		.cfi_def_cfa_offset 16
 930 0394 00AF     		add	r7, sp, #0
 931              		.cfi_def_cfa_register 7
 932 0396 7860     		str	r0, [r7, #4]
 765:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 766:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Check the arguments.
 767:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 768:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 769:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 770:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 771:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Wait until a char is available.
 772:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 773:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     while(HWREG(ui32Base + UART_O_FR) & UART_FR_RXFE)
 933              		.loc 1 773 0
 934 0398 00BF     		nop
 935              	.L32:
 936              		.loc 1 773 0 is_stmt 0 discriminator 1
 937 039a 7B68     		ldr	r3, [r7, #4]
 938 039c 1833     		adds	r3, r3, #24
 939 039e 1B68     		ldr	r3, [r3]
 940 03a0 03F01003 		and	r3, r3, #16
 941 03a4 002B     		cmp	r3, #0
 942 03a6 F8D1     		bne	.L32
 774:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     {
 775:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     }
 776:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 777:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 778:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Now get the char.
 779:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 780:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     return(HWREG(ui32Base + UART_O_DR));
 943              		.loc 1 780 0 is_stmt 1
 944 03a8 7B68     		ldr	r3, [r7, #4]
 945 03aa 1B68     		ldr	r3, [r3]
 781:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** }
 946              		.loc 1 781 0
 947 03ac 1846     		mov	r0, r3
 948 03ae 0C37     		adds	r7, r7, #12
 949              		.cfi_def_cfa_offset 4
 950 03b0 BD46     		mov	sp, r7
 951              		.cfi_def_cfa_register 13
 952              		@ sp needed
 953 03b2 80BC     		pop	{r7}
 954              		.cfi_restore 7
 955              		.cfi_def_cfa_offset 0
 956 03b4 7047     		bx	lr
 957              		.cfi_endproc
 958              	.LFE17:
 960 03b6 00BF     		.align	2
 961              		.global	UARTCharPutNonBlocking
 962              		.thumb
 963              		.thumb_func
 965              	UARTCharPutNonBlocking:
 966              	.LFB18:
 782:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 783:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 784:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 785:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! Sends a character to the specified port
 786:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 787:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 788:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui8Data is the character to be transmitted.
 789:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 790:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! This function writes the character \e ui8Data to the transmit FIFO for the
 791:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! specified port.  This function does not block, so if there is no space
 792:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! available, then a \b false is returned, and the application must retry the
 793:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! function later.
 794:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 795:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \return Returns \b true if the character was successfully placed in the
 796:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! transmit FIFO or \b false if there was no space available in the transmit
 797:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! FIFO.
 798:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 799:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 800:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** bool
 801:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** UARTCharPutNonBlocking(uint32_t ui32Base, uint8_t ui8Data)
 802:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** {
 967              		.loc 1 802 0
 968              		.cfi_startproc
 969              		@ args = 0, pretend = 0, frame = 8
 970              		@ frame_needed = 1, uses_anonymous_args = 0
 971              		@ link register save eliminated.
 972 03b8 80B4     		push	{r7}
 973              		.cfi_def_cfa_offset 4
 974              		.cfi_offset 7, -4
 975 03ba 83B0     		sub	sp, sp, #12
 976              		.cfi_def_cfa_offset 16
 977 03bc 00AF     		add	r7, sp, #0
 978              		.cfi_def_cfa_register 7
 979 03be 7860     		str	r0, [r7, #4]
 980 03c0 0B46     		mov	r3, r1
 981 03c2 FB70     		strb	r3, [r7, #3]
 803:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 804:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Check the arguments.
 805:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 806:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 807:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 808:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 809:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // See if there is space in the transmit FIFO.
 810:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 811:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     if(!(HWREG(ui32Base + UART_O_FR) & UART_FR_TXFF))
 982              		.loc 1 811 0
 983 03c4 7B68     		ldr	r3, [r7, #4]
 984 03c6 1833     		adds	r3, r3, #24
 985 03c8 1B68     		ldr	r3, [r3]
 986 03ca 03F02003 		and	r3, r3, #32
 987 03ce 002B     		cmp	r3, #0
 988 03d0 04D1     		bne	.L35
 812:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     {
 813:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****         //
 814:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****         // Write this character to the transmit FIFO.
 815:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****         //
 816:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****         HWREG(ui32Base + UART_O_DR) = ui8Data;
 989              		.loc 1 816 0
 990 03d2 7B68     		ldr	r3, [r7, #4]
 991 03d4 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 992 03d6 1A60     		str	r2, [r3]
 817:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 818:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****         //
 819:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****         // Success.
 820:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****         //
 821:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****         return(true);
 993              		.loc 1 821 0
 994 03d8 0123     		movs	r3, #1
 995 03da 00E0     		b	.L36
 996              	.L35:
 822:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     }
 823:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     else
 824:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     {
 825:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****         //
 826:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****         // There is no space in the transmit FIFO, so return a failure.
 827:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****         //
 828:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****         return(false);
 997              		.loc 1 828 0
 998 03dc 0023     		movs	r3, #0
 999              	.L36:
 829:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     }
 830:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** }
 1000              		.loc 1 830 0
 1001 03de 1846     		mov	r0, r3
 1002 03e0 0C37     		adds	r7, r7, #12
 1003              		.cfi_def_cfa_offset 4
 1004 03e2 BD46     		mov	sp, r7
 1005              		.cfi_def_cfa_register 13
 1006              		@ sp needed
 1007 03e4 80BC     		pop	{r7}
 1008              		.cfi_restore 7
 1009              		.cfi_def_cfa_offset 0
 1010 03e6 7047     		bx	lr
 1011              		.cfi_endproc
 1012              	.LFE18:
 1014              		.align	2
 1015              		.global	UARTCharPut
 1016              		.thumb
 1017              		.thumb_func
 1019              	UARTCharPut:
 1020              	.LFB19:
 831:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 832:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 833:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 834:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! Waits to send a character from the specified port
 835:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 836:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 837:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui8Data is the character to be transmitted.
 838:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 839:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! This function sends the character \e ui8Data to the transmit FIFO for the
 840:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! specified port.  If there is no space available in the transmit FIFO, this
 841:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! function waits until there is space available before returning.
 842:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 843:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \return None
 844:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 845:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 846:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** void
 847:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** UARTCharPut(uint32_t ui32Base, uint8_t ui8Data)
 848:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** {
 1021              		.loc 1 848 0
 1022              		.cfi_startproc
 1023              		@ args = 0, pretend = 0, frame = 8
 1024              		@ frame_needed = 1, uses_anonymous_args = 0
 1025              		@ link register save eliminated.
 1026 03e8 80B4     		push	{r7}
 1027              		.cfi_def_cfa_offset 4
 1028              		.cfi_offset 7, -4
 1029 03ea 83B0     		sub	sp, sp, #12
 1030              		.cfi_def_cfa_offset 16
 1031 03ec 00AF     		add	r7, sp, #0
 1032              		.cfi_def_cfa_register 7
 1033 03ee 7860     		str	r0, [r7, #4]
 1034 03f0 0B46     		mov	r3, r1
 1035 03f2 FB70     		strb	r3, [r7, #3]
 849:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 850:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Check the arguments.
 851:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 852:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 853:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 854:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 855:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Wait until space is available.
 856:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 857:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     while(HWREG(ui32Base + UART_O_FR) & UART_FR_TXFF)
 1036              		.loc 1 857 0
 1037 03f4 00BF     		nop
 1038              	.L38:
 1039              		.loc 1 857 0 is_stmt 0 discriminator 1
 1040 03f6 7B68     		ldr	r3, [r7, #4]
 1041 03f8 1833     		adds	r3, r3, #24
 1042 03fa 1B68     		ldr	r3, [r3]
 1043 03fc 03F02003 		and	r3, r3, #32
 1044 0400 002B     		cmp	r3, #0
 1045 0402 F8D1     		bne	.L38
 858:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     {
 859:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     }
 860:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 861:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 862:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Send the char.
 863:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 864:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_DR) = ui8Data;
 1046              		.loc 1 864 0 is_stmt 1
 1047 0404 7B68     		ldr	r3, [r7, #4]
 1048 0406 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 1049 0408 1A60     		str	r2, [r3]
 865:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** }
 1050              		.loc 1 865 0
 1051 040a 00BF     		nop
 1052 040c 0C37     		adds	r7, r7, #12
 1053              		.cfi_def_cfa_offset 4
 1054 040e BD46     		mov	sp, r7
 1055              		.cfi_def_cfa_register 13
 1056              		@ sp needed
 1057 0410 80BC     		pop	{r7}
 1058              		.cfi_restore 7
 1059              		.cfi_def_cfa_offset 0
 1060 0412 7047     		bx	lr
 1061              		.cfi_endproc
 1062              	.LFE19:
 1064              		.align	2
 1065              		.global	UARTBreakCtl
 1066              		.thumb
 1067              		.thumb_func
 1069              	UARTBreakCtl:
 1070              	.LFB20:
 866:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 867:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 868:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 869:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! Causes a BREAK to be sent
 870:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 871:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 872:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param bBreakState controls the output level.
 873:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 874:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! Calling this function with \e bBreakState set to \b true asserts a break
 875:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! condition on the UART.  Calling this function with \e bBreakState set to
 876:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \b false removes the break condition.  For proper transmission of a break
 877:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! command, the break must be asserted for at least two complete frames.
 878:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 879:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \return None
 880:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 881:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 882:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** void
 883:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** UARTBreakCtl(uint32_t ui32Base, bool bBreakState)
 884:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** {
 1071              		.loc 1 884 0
 1072              		.cfi_startproc
 1073              		@ args = 0, pretend = 0, frame = 8
 1074              		@ frame_needed = 1, uses_anonymous_args = 0
 1075              		@ link register save eliminated.
 1076 0414 80B4     		push	{r7}
 1077              		.cfi_def_cfa_offset 4
 1078              		.cfi_offset 7, -4
 1079 0416 83B0     		sub	sp, sp, #12
 1080              		.cfi_def_cfa_offset 16
 1081 0418 00AF     		add	r7, sp, #0
 1082              		.cfi_def_cfa_register 7
 1083 041a 7860     		str	r0, [r7, #4]
 1084 041c 0B46     		mov	r3, r1
 1085 041e FB70     		strb	r3, [r7, #3]
 885:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 886:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Check the arguments.
 887:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 888:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 889:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 890:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 891:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Set the break condition as requested.
 892:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 893:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_LCRH) =
 1086              		.loc 1 893 0
 1087 0420 7B68     		ldr	r3, [r7, #4]
 1088 0422 2C33     		adds	r3, r3, #44
 1089 0424 1A46     		mov	r2, r3
 894:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****         (bBreakState ?
 895:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****          (HWREG(ui32Base + UART_O_LCRH) | UART_LCRH_BRK) :
 1090              		.loc 1 895 0
 1091 0426 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1092 0428 002B     		cmp	r3, #0
 1093 042a 05D0     		beq	.L40
 1094              		.loc 1 895 0 is_stmt 0 discriminator 1
 1095 042c 7B68     		ldr	r3, [r7, #4]
 1096 042e 2C33     		adds	r3, r3, #44
 1097 0430 1B68     		ldr	r3, [r3]
 1098 0432 43F00103 		orr	r3, r3, #1
 1099 0436 04E0     		b	.L41
 1100              	.L40:
 896:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****          (HWREG(ui32Base + UART_O_LCRH) & ~(UART_LCRH_BRK)));
 1101              		.loc 1 896 0 is_stmt 1 discriminator 2
 1102 0438 7B68     		ldr	r3, [r7, #4]
 1103 043a 2C33     		adds	r3, r3, #44
 1104 043c 1B68     		ldr	r3, [r3]
 895:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****          (HWREG(ui32Base + UART_O_LCRH) & ~(UART_LCRH_BRK)));
 1105              		.loc 1 895 0 discriminator 2
 1106 043e 23F00103 		bic	r3, r3, #1
 1107              	.L41:
 893:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****         (bBreakState ?
 1108              		.loc 1 893 0
 1109 0442 1360     		str	r3, [r2]
 897:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** }
 1110              		.loc 1 897 0
 1111 0444 00BF     		nop
 1112 0446 0C37     		adds	r7, r7, #12
 1113              		.cfi_def_cfa_offset 4
 1114 0448 BD46     		mov	sp, r7
 1115              		.cfi_def_cfa_register 13
 1116              		@ sp needed
 1117 044a 80BC     		pop	{r7}
 1118              		.cfi_restore 7
 1119              		.cfi_def_cfa_offset 0
 1120 044c 7047     		bx	lr
 1121              		.cfi_endproc
 1122              	.LFE20:
 1124 044e 00BF     		.align	2
 1125              		.global	UARTBusy
 1126              		.thumb
 1127              		.thumb_func
 1129              	UARTBusy:
 1130              	.LFB21:
 898:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 899:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 900:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 901:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! Determines whether the UART transmitter is busy or not
 902:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 903:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 904:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 905:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! Allows the caller to determine whether all transmitted bytes have cleared
 906:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! the transmitter hardware.  If \b false is returned, the transmit FIFO is
 907:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! empty and all bits of the last transmitted character, including all stop
 908:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! bits, have left the hardware shift register.
 909:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 910:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \return Returns \b true if the UART is transmitting or \b false if all
 911:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! transmissions are complete.
 912:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 913:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 914:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** bool
 915:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** UARTBusy(uint32_t ui32Base)
 916:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** {
 1131              		.loc 1 916 0
 1132              		.cfi_startproc
 1133              		@ args = 0, pretend = 0, frame = 8
 1134              		@ frame_needed = 1, uses_anonymous_args = 0
 1135              		@ link register save eliminated.
 1136 0450 80B4     		push	{r7}
 1137              		.cfi_def_cfa_offset 4
 1138              		.cfi_offset 7, -4
 1139 0452 83B0     		sub	sp, sp, #12
 1140              		.cfi_def_cfa_offset 16
 1141 0454 00AF     		add	r7, sp, #0
 1142              		.cfi_def_cfa_register 7
 1143 0456 7860     		str	r0, [r7, #4]
 917:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 918:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Check the argument.
 919:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 920:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 921:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 922:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 923:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Determine if the UART is busy.
 924:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 925:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ? true : false);
 1144              		.loc 1 925 0
 1145 0458 7B68     		ldr	r3, [r7, #4]
 1146 045a 1833     		adds	r3, r3, #24
 1147 045c 1B68     		ldr	r3, [r3]
 1148 045e 03F00803 		and	r3, r3, #8
 1149 0462 002B     		cmp	r3, #0
 1150 0464 14BF     		ite	ne
 1151 0466 0123     		movne	r3, #1
 1152 0468 0023     		moveq	r3, #0
 1153 046a DBB2     		uxtb	r3, r3
 926:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** }
 1154              		.loc 1 926 0
 1155 046c 1846     		mov	r0, r3
 1156 046e 0C37     		adds	r7, r7, #12
 1157              		.cfi_def_cfa_offset 4
 1158 0470 BD46     		mov	sp, r7
 1159              		.cfi_def_cfa_register 13
 1160              		@ sp needed
 1161 0472 80BC     		pop	{r7}
 1162              		.cfi_restore 7
 1163              		.cfi_def_cfa_offset 0
 1164 0474 7047     		bx	lr
 1165              		.cfi_endproc
 1166              	.LFE21:
 1168 0476 00BF     		.align	2
 1169              		.global	UARTIntRegister
 1170              		.thumb
 1171              		.thumb_func
 1173              	UARTIntRegister:
 1174              	.LFB22:
 927:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 928:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 929:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 930:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! Registers an interrupt handler for a UART interrupt
 931:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 932:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 933:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param pfnHandler is a pointer to the function to be called when the
 934:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! UART interrupt occurs.
 935:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 936:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! This function does the actual registering of the interrupt handler.  This
 937:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! function enables the global interrupt in the interrupt controller; specific
 938:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! UART interrupts must be enabled via UARTIntEnable().  It is the interrupt
 939:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! handler's responsibility to clear the interrupt source.
 940:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 941:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \sa IntRegister() for important information about registering interrupt
 942:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! handlers.
 943:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 944:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \return None
 945:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 946:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 947:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** void
 948:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** UARTIntRegister(uint32_t ui32Base, void (*pfnHandler)(void))
 949:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** {
 1175              		.loc 1 949 0
 1176              		.cfi_startproc
 1177              		@ args = 0, pretend = 0, frame = 16
 1178              		@ frame_needed = 1, uses_anonymous_args = 0
 1179 0478 80B5     		push	{r7, lr}
 1180              		.cfi_def_cfa_offset 8
 1181              		.cfi_offset 7, -8
 1182              		.cfi_offset 14, -4
 1183 047a 84B0     		sub	sp, sp, #16
 1184              		.cfi_def_cfa_offset 24
 1185 047c 00AF     		add	r7, sp, #0
 1186              		.cfi_def_cfa_register 7
 1187 047e 7860     		str	r0, [r7, #4]
 1188 0480 3960     		str	r1, [r7]
 950:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     uint32_t ui32Int;
 951:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 952:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 953:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Check the arguments.
 954:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 955:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 956:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 957:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 958:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Determine the interrupt number based on the UART port.
 959:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 960:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ui32Int = ((ui32Base == UART0_BASE) ? INT_UART0 : INT_UART1);
 1189              		.loc 1 960 0
 1190 0482 7B68     		ldr	r3, [r7, #4]
 1191 0484 084A     		ldr	r2, .L47
 1192 0486 9342     		cmp	r3, r2
 1193 0488 01D1     		bne	.L45
 1194              		.loc 1 960 0 is_stmt 0 discriminator 1
 1195 048a 1523     		movs	r3, #21
 1196 048c 00E0     		b	.L46
 1197              	.L45:
 1198              		.loc 1 960 0 discriminator 2
 1199 048e 1623     		movs	r3, #22
 1200              	.L46:
 1201              		.loc 1 960 0 discriminator 4
 1202 0490 FB60     		str	r3, [r7, #12]
 961:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 962:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 963:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Register the interrupt handler.
 964:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 965:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     IntRegister(ui32Int, pfnHandler);
 1203              		.loc 1 965 0 is_stmt 1 discriminator 4
 1204 0492 3968     		ldr	r1, [r7]
 1205 0494 F868     		ldr	r0, [r7, #12]
 1206 0496 FFF7FEFF 		bl	IntRegister
 966:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 967:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 968:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Enable the UART interrupt.
 969:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 970:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     IntEnable(ui32Int);
 1207              		.loc 1 970 0 discriminator 4
 1208 049a F868     		ldr	r0, [r7, #12]
 1209 049c FFF7FEFF 		bl	IntEnable
 971:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** }
 1210              		.loc 1 971 0 discriminator 4
 1211 04a0 00BF     		nop
 1212 04a2 1037     		adds	r7, r7, #16
 1213              		.cfi_def_cfa_offset 8
 1214 04a4 BD46     		mov	sp, r7
 1215              		.cfi_def_cfa_register 13
 1216              		@ sp needed
 1217 04a6 80BD     		pop	{r7, pc}
 1218              	.L48:
 1219              		.align	2
 1220              	.L47:
 1221 04a8 00C00040 		.word	1073790976
 1222              		.cfi_endproc
 1223              	.LFE22:
 1225              		.align	2
 1226              		.global	UARTIntUnregister
 1227              		.thumb
 1228              		.thumb_func
 1230              	UARTIntUnregister:
 1231              	.LFB23:
 972:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 973:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 974:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 975:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! Unregisters an interrupt handler for a UART interrupt
 976:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 977:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
 978:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 979:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! This function does the actual unregistering of the interrupt handler.  It
 980:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! clears the handler to be called when a UART interrupt occurs.  This
 981:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! function also masks off the interrupt in the interrupt controller so that
 982:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! the interrupt handler no longer is called.
 983:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 984:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \sa IntRegister() for important information about registering interrupt
 985:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! handlers.
 986:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
 987:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \return None
 988:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
 989:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
 990:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** void
 991:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** UARTIntUnregister(uint32_t ui32Base)
 992:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** {
 1232              		.loc 1 992 0
 1233              		.cfi_startproc
 1234              		@ args = 0, pretend = 0, frame = 16
 1235              		@ frame_needed = 1, uses_anonymous_args = 0
 1236 04ac 80B5     		push	{r7, lr}
 1237              		.cfi_def_cfa_offset 8
 1238              		.cfi_offset 7, -8
 1239              		.cfi_offset 14, -4
 1240 04ae 84B0     		sub	sp, sp, #16
 1241              		.cfi_def_cfa_offset 24
 1242 04b0 00AF     		add	r7, sp, #0
 1243              		.cfi_def_cfa_register 7
 1244 04b2 7860     		str	r0, [r7, #4]
 993:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     uint32_t ui32Int;
 994:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
 995:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 996:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Check the arguments.
 997:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
 998:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
 999:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
1000:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1001:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Determine the interrupt number based on the UART port.
1002:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1003:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ui32Int = ((ui32Base == UART0_BASE) ? INT_UART0 : INT_UART1);
 1245              		.loc 1 1003 0
 1246 04b4 7B68     		ldr	r3, [r7, #4]
 1247 04b6 084A     		ldr	r2, .L52
 1248 04b8 9342     		cmp	r3, r2
 1249 04ba 01D1     		bne	.L50
 1250              		.loc 1 1003 0 is_stmt 0 discriminator 1
 1251 04bc 1523     		movs	r3, #21
 1252 04be 00E0     		b	.L51
 1253              	.L50:
 1254              		.loc 1 1003 0 discriminator 2
 1255 04c0 1623     		movs	r3, #22
 1256              	.L51:
 1257              		.loc 1 1003 0 discriminator 4
 1258 04c2 FB60     		str	r3, [r7, #12]
1004:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
1005:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1006:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Disable the interrupt.
1007:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1008:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     IntDisable(ui32Int);
 1259              		.loc 1 1008 0 is_stmt 1 discriminator 4
 1260 04c4 F868     		ldr	r0, [r7, #12]
 1261 04c6 FFF7FEFF 		bl	IntDisable
1009:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
1010:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1011:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Unregister the interrupt handler.
1012:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1013:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     IntUnregister(ui32Int);
 1262              		.loc 1 1013 0 discriminator 4
 1263 04ca F868     		ldr	r0, [r7, #12]
 1264 04cc FFF7FEFF 		bl	IntUnregister
1014:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** }
 1265              		.loc 1 1014 0 discriminator 4
 1266 04d0 00BF     		nop
 1267 04d2 1037     		adds	r7, r7, #16
 1268              		.cfi_def_cfa_offset 8
 1269 04d4 BD46     		mov	sp, r7
 1270              		.cfi_def_cfa_register 13
 1271              		@ sp needed
 1272 04d6 80BD     		pop	{r7, pc}
 1273              	.L53:
 1274              		.align	2
 1275              	.L52:
 1276 04d8 00C00040 		.word	1073790976
 1277              		.cfi_endproc
 1278              	.LFE23:
 1280              		.align	2
 1281              		.global	UARTIntEnable
 1282              		.thumb
 1283              		.thumb_func
 1285              	UARTIntEnable:
 1286              	.LFB24:
1015:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
1016:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
1017:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
1018:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! Enables individual UART interrupt sources
1019:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1020:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
1021:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32IntFlags is the bit mask of the interrupt sources to be enabled.
1022:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1023:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! This function enables the indicated UART interrupt sources.  Only the
1024:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! sources that are enabled can be reflected to the processor interrupt;
1025:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! disabled sources have no effect on the processor.
1026:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1027:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! The \e ui32IntFlags parameter is the logical OR of any of the following:
1028:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1029:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! - \b UART_INT_9BIT - 9-bit address match interrupt
1030:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! - \b UART_INT_OE - Overrun Error interrupt
1031:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! - \b UART_INT_BE - Break Error interrupt
1032:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! - \b UART_INT_PE - Parity Error interrupt
1033:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! - \b UART_INT_FE - Framing Error interrupt
1034:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! - \b UART_INT_RT - Receive Timeout interrupt
1035:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! - \b UART_INT_TX - Transmit interrupt
1036:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! - \b UART_INT_RX - Receive interrupt
1037:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! - \b UART_INT_CTS - CTS interrupt (UART1 only)
1038:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1039:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \return None
1040:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
1041:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
1042:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** void
1043:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** UARTIntEnable(uint32_t ui32Base, uint32_t ui32IntFlags)
1044:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** {
 1287              		.loc 1 1044 0
 1288              		.cfi_startproc
 1289              		@ args = 0, pretend = 0, frame = 8
 1290              		@ frame_needed = 1, uses_anonymous_args = 0
 1291              		@ link register save eliminated.
 1292 04dc 80B4     		push	{r7}
 1293              		.cfi_def_cfa_offset 4
 1294              		.cfi_offset 7, -4
 1295 04de 83B0     		sub	sp, sp, #12
 1296              		.cfi_def_cfa_offset 16
 1297 04e0 00AF     		add	r7, sp, #0
 1298              		.cfi_def_cfa_register 7
 1299 04e2 7860     		str	r0, [r7, #4]
 1300 04e4 3960     		str	r1, [r7]
1045:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1046:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Check the arguments.
1047:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1048:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
1049:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
1050:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1051:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Enable the specified interrupts.
1052:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1053:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_IM) |= ui32IntFlags;
 1301              		.loc 1 1053 0
 1302 04e6 7B68     		ldr	r3, [r7, #4]
 1303 04e8 3833     		adds	r3, r3, #56
 1304 04ea 1946     		mov	r1, r3
 1305 04ec 7B68     		ldr	r3, [r7, #4]
 1306 04ee 3833     		adds	r3, r3, #56
 1307 04f0 1A68     		ldr	r2, [r3]
 1308 04f2 3B68     		ldr	r3, [r7]
 1309 04f4 1343     		orrs	r3, r3, r2
 1310 04f6 0B60     		str	r3, [r1]
1054:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** }
 1311              		.loc 1 1054 0
 1312 04f8 00BF     		nop
 1313 04fa 0C37     		adds	r7, r7, #12
 1314              		.cfi_def_cfa_offset 4
 1315 04fc BD46     		mov	sp, r7
 1316              		.cfi_def_cfa_register 13
 1317              		@ sp needed
 1318 04fe 80BC     		pop	{r7}
 1319              		.cfi_restore 7
 1320              		.cfi_def_cfa_offset 0
 1321 0500 7047     		bx	lr
 1322              		.cfi_endproc
 1323              	.LFE24:
 1325 0502 00BF     		.align	2
 1326              		.global	UARTIntDisable
 1327              		.thumb
 1328              		.thumb_func
 1330              	UARTIntDisable:
 1331              	.LFB25:
1055:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
1056:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
1057:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
1058:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! Disables individual UART interrupt sources
1059:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1060:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
1061:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32IntFlags is the bit mask of the interrupt sources to be disabled.
1062:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1063:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! This function disables the indicated UART interrupt sources.  Only the
1064:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! sources that are enabled can be reflected to the processor interrupt;
1065:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! disabled sources have no effect on the processor.
1066:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1067:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! The \e ui32IntFlags parameter has the same definition as the \e ui32IntFlags
1068:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! parameter to UARTIntEnable().
1069:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1070:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \return None
1071:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
1072:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
1073:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** void
1074:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** UARTIntDisable(uint32_t ui32Base, uint32_t ui32IntFlags)
1075:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** {
 1332              		.loc 1 1075 0
 1333              		.cfi_startproc
 1334              		@ args = 0, pretend = 0, frame = 8
 1335              		@ frame_needed = 1, uses_anonymous_args = 0
 1336              		@ link register save eliminated.
 1337 0504 80B4     		push	{r7}
 1338              		.cfi_def_cfa_offset 4
 1339              		.cfi_offset 7, -4
 1340 0506 83B0     		sub	sp, sp, #12
 1341              		.cfi_def_cfa_offset 16
 1342 0508 00AF     		add	r7, sp, #0
 1343              		.cfi_def_cfa_register 7
 1344 050a 7860     		str	r0, [r7, #4]
 1345 050c 3960     		str	r1, [r7]
1076:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1077:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Check the arguments.
1078:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1079:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
1080:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
1081:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1082:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Disable the specified interrupts.
1083:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1084:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_IM) &= ~(ui32IntFlags);
 1346              		.loc 1 1084 0
 1347 050e 7B68     		ldr	r3, [r7, #4]
 1348 0510 3833     		adds	r3, r3, #56
 1349 0512 1946     		mov	r1, r3
 1350 0514 7B68     		ldr	r3, [r7, #4]
 1351 0516 3833     		adds	r3, r3, #56
 1352 0518 1A68     		ldr	r2, [r3]
 1353 051a 3B68     		ldr	r3, [r7]
 1354 051c DB43     		mvns	r3, r3
 1355 051e 1340     		ands	r3, r3, r2
 1356 0520 0B60     		str	r3, [r1]
1085:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** }
 1357              		.loc 1 1085 0
 1358 0522 00BF     		nop
 1359 0524 0C37     		adds	r7, r7, #12
 1360              		.cfi_def_cfa_offset 4
 1361 0526 BD46     		mov	sp, r7
 1362              		.cfi_def_cfa_register 13
 1363              		@ sp needed
 1364 0528 80BC     		pop	{r7}
 1365              		.cfi_restore 7
 1366              		.cfi_def_cfa_offset 0
 1367 052a 7047     		bx	lr
 1368              		.cfi_endproc
 1369              	.LFE25:
 1371              		.align	2
 1372              		.global	UARTIntStatus
 1373              		.thumb
 1374              		.thumb_func
 1376              	UARTIntStatus:
 1377              	.LFB26:
1086:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
1087:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
1088:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
1089:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! Gets the current interrupt status
1090:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1091:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
1092:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param bMasked is \b false if the raw interrupt status is required and
1093:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \b true if the masked interrupt status is required.
1094:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1095:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! This function returns the interrupt status for the specified UART.  Either
1096:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! the raw interrupt status or the status of interrupts that are allowed to
1097:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! reflect to the processor can be returned.
1098:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1099:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \return Returns the current interrupt status, enumerated as a bit field of
1100:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! values described in UARTIntEnable().
1101:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
1102:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
1103:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** uint32_t
1104:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** UARTIntStatus(uint32_t ui32Base, bool bMasked)
1105:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** {
 1378              		.loc 1 1105 0
 1379              		.cfi_startproc
 1380              		@ args = 0, pretend = 0, frame = 8
 1381              		@ frame_needed = 1, uses_anonymous_args = 0
 1382              		@ link register save eliminated.
 1383 052c 80B4     		push	{r7}
 1384              		.cfi_def_cfa_offset 4
 1385              		.cfi_offset 7, -4
 1386 052e 83B0     		sub	sp, sp, #12
 1387              		.cfi_def_cfa_offset 16
 1388 0530 00AF     		add	r7, sp, #0
 1389              		.cfi_def_cfa_register 7
 1390 0532 7860     		str	r0, [r7, #4]
 1391 0534 0B46     		mov	r3, r1
 1392 0536 FB70     		strb	r3, [r7, #3]
1106:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1107:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Check the arguments.
1108:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1109:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
1110:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
1111:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1112:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Return either the interrupt status or the raw interrupt status as
1113:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // requested.
1114:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1115:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     if(bMasked)
 1393              		.loc 1 1115 0
 1394 0538 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1395 053a 002B     		cmp	r3, #0
 1396 053c 03D0     		beq	.L57
1116:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     {
1117:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****         return(HWREG(ui32Base + UART_O_MIS));
 1397              		.loc 1 1117 0
 1398 053e 7B68     		ldr	r3, [r7, #4]
 1399 0540 4033     		adds	r3, r3, #64
 1400 0542 1B68     		ldr	r3, [r3]
 1401 0544 02E0     		b	.L58
 1402              	.L57:
1118:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     }
1119:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     else
1120:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     {
1121:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****         return(HWREG(ui32Base + UART_O_RIS));
 1403              		.loc 1 1121 0
 1404 0546 7B68     		ldr	r3, [r7, #4]
 1405 0548 3C33     		adds	r3, r3, #60
 1406 054a 1B68     		ldr	r3, [r3]
 1407              	.L58:
1122:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     }
1123:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** }
 1408              		.loc 1 1123 0
 1409 054c 1846     		mov	r0, r3
 1410 054e 0C37     		adds	r7, r7, #12
 1411              		.cfi_def_cfa_offset 4
 1412 0550 BD46     		mov	sp, r7
 1413              		.cfi_def_cfa_register 13
 1414              		@ sp needed
 1415 0552 80BC     		pop	{r7}
 1416              		.cfi_restore 7
 1417              		.cfi_def_cfa_offset 0
 1418 0554 7047     		bx	lr
 1419              		.cfi_endproc
 1420              	.LFE26:
 1422 0556 00BF     		.align	2
 1423              		.global	UARTIntClear
 1424              		.thumb
 1425              		.thumb_func
 1427              	UARTIntClear:
 1428              	.LFB27:
1124:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
1125:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
1126:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
1127:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! Clears UART interrupt sources
1128:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1129:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
1130:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32IntFlags is a bit mask of the interrupt sources to be cleared.
1131:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1132:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! The specified UART interrupt sources are cleared, so that they no longer
1133:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! assert.  This function must be called in the interrupt handler to keep the
1134:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! interrupt from being recognized again immediately upon exit.
1135:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1136:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! The \e ui32IntFlags parameter has the same definition as the \e ui32IntFlags
1137:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! parameter to UARTIntEnable().
1138:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1139:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \note Because there is a write buffer in the Cortex-M3 processor, it may
1140:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! take several clock cycles before the interrupt source is actually cleared.
1141:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! Therefore, it is recommended that the interrupt source be cleared early in
1142:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! the interrupt handler (as opposed to the very last action) to avoid
1143:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! returning from the interrupt handler before the interrupt source is
1144:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! actually cleared.  Failure to do so may result in the interrupt handler
1145:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! being immediately reentered (because the interrupt controller still sees
1146:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! the interrupt source asserted).
1147:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1148:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \return None
1149:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
1150:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
1151:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** void
1152:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** UARTIntClear(uint32_t ui32Base, uint32_t ui32IntFlags)
1153:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** {
 1429              		.loc 1 1153 0
 1430              		.cfi_startproc
 1431              		@ args = 0, pretend = 0, frame = 8
 1432              		@ frame_needed = 1, uses_anonymous_args = 0
 1433              		@ link register save eliminated.
 1434 0558 80B4     		push	{r7}
 1435              		.cfi_def_cfa_offset 4
 1436              		.cfi_offset 7, -4
 1437 055a 83B0     		sub	sp, sp, #12
 1438              		.cfi_def_cfa_offset 16
 1439 055c 00AF     		add	r7, sp, #0
 1440              		.cfi_def_cfa_register 7
 1441 055e 7860     		str	r0, [r7, #4]
 1442 0560 3960     		str	r1, [r7]
1154:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1155:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Check the arguments.
1156:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1157:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
1158:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
1159:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1160:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Clear the requested interrupt sources.
1161:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1162:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
 1443              		.loc 1 1162 0
 1444 0562 7B68     		ldr	r3, [r7, #4]
 1445 0564 4433     		adds	r3, r3, #68
 1446 0566 1A46     		mov	r2, r3
 1447 0568 3B68     		ldr	r3, [r7]
 1448 056a 1360     		str	r3, [r2]
1163:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** }
 1449              		.loc 1 1163 0
 1450 056c 00BF     		nop
 1451 056e 0C37     		adds	r7, r7, #12
 1452              		.cfi_def_cfa_offset 4
 1453 0570 BD46     		mov	sp, r7
 1454              		.cfi_def_cfa_register 13
 1455              		@ sp needed
 1456 0572 80BC     		pop	{r7}
 1457              		.cfi_restore 7
 1458              		.cfi_def_cfa_offset 0
 1459 0574 7047     		bx	lr
 1460              		.cfi_endproc
 1461              	.LFE27:
 1463 0576 00BF     		.align	2
 1464              		.global	UARTDMAEnable
 1465              		.thumb
 1466              		.thumb_func
 1468              	UARTDMAEnable:
 1469              	.LFB28:
1164:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
1165:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
1166:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
1167:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! Enable UART DMA operation
1168:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1169:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
1170:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32DMAFlags is a bit mask of the DMA features to enable.
1171:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1172:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! The specified UART DMA features are enabled.  The UART can be
1173:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! configured to use DMA for transmit or receive, and to disable
1174:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! receive if an error occurs.  The \e ui32DMAFlags parameter is the
1175:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! logical OR of any of the following values:
1176:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1177:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! - UART_DMA_RX - enable DMA for receive
1178:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! - UART_DMA_TX - enable DMA for transmit
1179:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! - UART_DMA_ERR_RXSTOP - disable DMA receive on UART error
1180:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1181:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \note The uDMA controller must also be set up before DMA can be used
1182:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! with the UART.
1183:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1184:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \return None
1185:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
1186:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
1187:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** void
1188:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** UARTDMAEnable(uint32_t ui32Base, uint32_t ui32DMAFlags)
1189:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** {
 1470              		.loc 1 1189 0
 1471              		.cfi_startproc
 1472              		@ args = 0, pretend = 0, frame = 8
 1473              		@ frame_needed = 1, uses_anonymous_args = 0
 1474              		@ link register save eliminated.
 1475 0578 80B4     		push	{r7}
 1476              		.cfi_def_cfa_offset 4
 1477              		.cfi_offset 7, -4
 1478 057a 83B0     		sub	sp, sp, #12
 1479              		.cfi_def_cfa_offset 16
 1480 057c 00AF     		add	r7, sp, #0
 1481              		.cfi_def_cfa_register 7
 1482 057e 7860     		str	r0, [r7, #4]
 1483 0580 3960     		str	r1, [r7]
1190:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1191:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Check the arguments.
1192:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1193:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
1194:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
1195:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1196:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Set the requested bits in the UART DMA control register.
1197:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1198:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_DMACTL) |= ui32DMAFlags;
 1484              		.loc 1 1198 0
 1485 0582 7B68     		ldr	r3, [r7, #4]
 1486 0584 4833     		adds	r3, r3, #72
 1487 0586 1946     		mov	r1, r3
 1488 0588 7B68     		ldr	r3, [r7, #4]
 1489 058a 4833     		adds	r3, r3, #72
 1490 058c 1A68     		ldr	r2, [r3]
 1491 058e 3B68     		ldr	r3, [r7]
 1492 0590 1343     		orrs	r3, r3, r2
 1493 0592 0B60     		str	r3, [r1]
1199:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** }
 1494              		.loc 1 1199 0
 1495 0594 00BF     		nop
 1496 0596 0C37     		adds	r7, r7, #12
 1497              		.cfi_def_cfa_offset 4
 1498 0598 BD46     		mov	sp, r7
 1499              		.cfi_def_cfa_register 13
 1500              		@ sp needed
 1501 059a 80BC     		pop	{r7}
 1502              		.cfi_restore 7
 1503              		.cfi_def_cfa_offset 0
 1504 059c 7047     		bx	lr
 1505              		.cfi_endproc
 1506              	.LFE28:
 1508 059e 00BF     		.align	2
 1509              		.global	UARTDMADisable
 1510              		.thumb
 1511              		.thumb_func
 1513              	UARTDMADisable:
 1514              	.LFB29:
1200:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
1201:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
1202:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
1203:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! Disable UART DMA operation
1204:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1205:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
1206:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32DMAFlags is a bit mask of the DMA features to disable.
1207:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1208:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! This function is used to disable UART DMA features that were enabled
1209:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! by UARTDMAEnable().  The specified UART DMA features are disabled.  The
1210:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \e ui32DMAFlags parameter is the logical OR of any of the following values:
1211:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1212:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! - UART_DMA_RX - disable DMA for receive
1213:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! - UART_DMA_TX - disable DMA for transmit
1214:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! - UART_DMA_ERR_RXSTOP - do not disable DMA receive on UART error
1215:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1216:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \return None
1217:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
1218:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
1219:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** void
1220:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** UARTDMADisable(uint32_t ui32Base, uint32_t ui32DMAFlags)
1221:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** {
 1515              		.loc 1 1221 0
 1516              		.cfi_startproc
 1517              		@ args = 0, pretend = 0, frame = 8
 1518              		@ frame_needed = 1, uses_anonymous_args = 0
 1519              		@ link register save eliminated.
 1520 05a0 80B4     		push	{r7}
 1521              		.cfi_def_cfa_offset 4
 1522              		.cfi_offset 7, -4
 1523 05a2 83B0     		sub	sp, sp, #12
 1524              		.cfi_def_cfa_offset 16
 1525 05a4 00AF     		add	r7, sp, #0
 1526              		.cfi_def_cfa_register 7
 1527 05a6 7860     		str	r0, [r7, #4]
 1528 05a8 3960     		str	r1, [r7]
1222:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1223:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Check the arguments.
1224:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1225:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
1226:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
1227:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1228:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Clear the requested bits in the UART DMA control register.
1229:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1230:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_DMACTL) &= ~ui32DMAFlags;
 1529              		.loc 1 1230 0
 1530 05aa 7B68     		ldr	r3, [r7, #4]
 1531 05ac 4833     		adds	r3, r3, #72
 1532 05ae 1946     		mov	r1, r3
 1533 05b0 7B68     		ldr	r3, [r7, #4]
 1534 05b2 4833     		adds	r3, r3, #72
 1535 05b4 1A68     		ldr	r2, [r3]
 1536 05b6 3B68     		ldr	r3, [r7]
 1537 05b8 DB43     		mvns	r3, r3
 1538 05ba 1340     		ands	r3, r3, r2
 1539 05bc 0B60     		str	r3, [r1]
1231:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** }
 1540              		.loc 1 1231 0
 1541 05be 00BF     		nop
 1542 05c0 0C37     		adds	r7, r7, #12
 1543              		.cfi_def_cfa_offset 4
 1544 05c2 BD46     		mov	sp, r7
 1545              		.cfi_def_cfa_register 13
 1546              		@ sp needed
 1547 05c4 80BC     		pop	{r7}
 1548              		.cfi_restore 7
 1549              		.cfi_def_cfa_offset 0
 1550 05c6 7047     		bx	lr
 1551              		.cfi_endproc
 1552              	.LFE29:
 1554              		.align	2
 1555              		.global	UARTRxErrorGet
 1556              		.thumb
 1557              		.thumb_func
 1559              	UARTRxErrorGet:
 1560              	.LFB30:
1232:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
1233:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
1234:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
1235:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! Gets current receiver errors
1236:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1237:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
1238:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1239:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! This function returns the current state of each of the 4 receiver error
1240:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! sources.  The returned errors are equivalent to the four error bits
1241:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! returned via the previous call to UARTCharGet() or UARTCharGetNonBlocking()
1242:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! with the exception that the overrun error is set immediately the overrun
1243:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! occurs rather than when a character is next read.
1244:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1245:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \return Returns a logical OR combination of the receiver error flags,
1246:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \b UART_RXERROR_FRAMING, \b UART_RXERROR_PARITY, \b UART_RXERROR_BREAK
1247:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! and \b UART_RXERROR_OVERRUN.
1248:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
1249:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
1250:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** uint32_t
1251:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** UARTRxErrorGet(uint32_t ui32Base)
1252:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** {
 1561              		.loc 1 1252 0
 1562              		.cfi_startproc
 1563              		@ args = 0, pretend = 0, frame = 8
 1564              		@ frame_needed = 1, uses_anonymous_args = 0
 1565              		@ link register save eliminated.
 1566 05c8 80B4     		push	{r7}
 1567              		.cfi_def_cfa_offset 4
 1568              		.cfi_offset 7, -4
 1569 05ca 83B0     		sub	sp, sp, #12
 1570              		.cfi_def_cfa_offset 16
 1571 05cc 00AF     		add	r7, sp, #0
 1572              		.cfi_def_cfa_register 7
 1573 05ce 7860     		str	r0, [r7, #4]
1253:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1254:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Check the arguments.
1255:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1256:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
1257:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
1258:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1259:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Return the current value of the receive status register.
1260:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1261:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     return(HWREG(ui32Base + UART_O_RSR) & 0x0000000F);
 1574              		.loc 1 1261 0
 1575 05d0 7B68     		ldr	r3, [r7, #4]
 1576 05d2 0433     		adds	r3, r3, #4
 1577 05d4 1B68     		ldr	r3, [r3]
 1578 05d6 03F00F03 		and	r3, r3, #15
1262:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** }
 1579              		.loc 1 1262 0
 1580 05da 1846     		mov	r0, r3
 1581 05dc 0C37     		adds	r7, r7, #12
 1582              		.cfi_def_cfa_offset 4
 1583 05de BD46     		mov	sp, r7
 1584              		.cfi_def_cfa_register 13
 1585              		@ sp needed
 1586 05e0 80BC     		pop	{r7}
 1587              		.cfi_restore 7
 1588              		.cfi_def_cfa_offset 0
 1589 05e2 7047     		bx	lr
 1590              		.cfi_endproc
 1591              	.LFE30:
 1593              		.align	2
 1594              		.global	UARTRxErrorClear
 1595              		.thumb
 1596              		.thumb_func
 1598              	UARTRxErrorClear:
 1599              	.LFB31:
1263:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
1264:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
1265:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
1266:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! Clears all reported receiver errors
1267:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1268:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
1269:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1270:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! This function is used to clear all receiver error conditions reported via
1271:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! UARTRxErrorGet().  If using the overrun, framing error, parity error or
1272:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! break interrupts, this function must be called after clearing the interrupt
1273:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! to ensure that later errors of the same type trigger another interrupt.
1274:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1275:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \return None
1276:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
1277:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
1278:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** void
1279:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** UARTRxErrorClear(uint32_t ui32Base)
1280:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** {
 1600              		.loc 1 1280 0
 1601              		.cfi_startproc
 1602              		@ args = 0, pretend = 0, frame = 8
 1603              		@ frame_needed = 1, uses_anonymous_args = 0
 1604              		@ link register save eliminated.
 1605 05e4 80B4     		push	{r7}
 1606              		.cfi_def_cfa_offset 4
 1607              		.cfi_offset 7, -4
 1608 05e6 83B0     		sub	sp, sp, #12
 1609              		.cfi_def_cfa_offset 16
 1610 05e8 00AF     		add	r7, sp, #0
 1611              		.cfi_def_cfa_register 7
 1612 05ea 7860     		str	r0, [r7, #4]
1281:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1282:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Check the arguments.
1283:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1284:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
1285:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
1286:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1287:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Any write to the Error Clear Register will clear all bits which are
1288:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // currently set.
1289:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1290:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_ECR) = 0;
 1613              		.loc 1 1290 0
 1614 05ec 7B68     		ldr	r3, [r7, #4]
 1615 05ee 0433     		adds	r3, r3, #4
 1616 05f0 1A46     		mov	r2, r3
 1617 05f2 0023     		movs	r3, #0
 1618 05f4 1360     		str	r3, [r2]
1291:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** }
 1619              		.loc 1 1291 0
 1620 05f6 00BF     		nop
 1621 05f8 0C37     		adds	r7, r7, #12
 1622              		.cfi_def_cfa_offset 4
 1623 05fa BD46     		mov	sp, r7
 1624              		.cfi_def_cfa_register 13
 1625              		@ sp needed
 1626 05fc 80BC     		pop	{r7}
 1627              		.cfi_restore 7
 1628              		.cfi_def_cfa_offset 0
 1629 05fe 7047     		bx	lr
 1630              		.cfi_endproc
 1631              	.LFE31:
 1633              		.align	2
 1634              		.global	UARTClockSourceSet
 1635              		.thumb
 1636              		.thumb_func
 1638              	UARTClockSourceSet:
 1639              	.LFB32:
1292:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
1293:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
1294:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
1295:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! Sets the baud clock source for the specified UART
1296:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1297:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
1298:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32Source is the baud clock source for the UART.
1299:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1300:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! This function allows the baud clock source for the UART to be selected.
1301:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! The possible clock source are the system clock (\b UART_CLOCK_SYSTEM) or
1302:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! the precision internal oscillator (\b UART_CLOCK_PIOSC).
1303:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1304:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! If \b UART_CLOCK_SYSTEM is chosen, the IO clock frequency must thus be
1305:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! queried by SysCtrlClcokSet().
1306:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! If \b UART_CLOCK_PIOSC the SysCtrlIOClcokSet() function must be used.
1307:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1308:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! Changing the baud clock source will change the baud rate generated by the
1309:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! UART.  Therefore, the baud rate should be reconfigured after any change to
1310:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! the baud clock source.
1311:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1312:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \note If the precision internal oscillator (\b UART_CLOCK_PIOSC) is used
1313:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! for the UART baud clock, the system clock frequency must be at least
1314:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! 9 MHz in Run mode.
1315:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1316:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \sa UARTConfigSetExpClk()
1317:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1318:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \return None
1319:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
1320:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
1321:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** void
1322:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** UARTClockSourceSet(uint32_t ui32Base, uint32_t ui32Source)
1323:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** {
 1640              		.loc 1 1323 0
 1641              		.cfi_startproc
 1642              		@ args = 0, pretend = 0, frame = 8
 1643              		@ frame_needed = 1, uses_anonymous_args = 0
 1644              		@ link register save eliminated.
 1645 0600 80B4     		push	{r7}
 1646              		.cfi_def_cfa_offset 4
 1647              		.cfi_offset 7, -4
 1648 0602 83B0     		sub	sp, sp, #12
 1649              		.cfi_def_cfa_offset 16
 1650 0604 00AF     		add	r7, sp, #0
 1651              		.cfi_def_cfa_register 7
 1652 0606 7860     		str	r0, [r7, #4]
 1653 0608 3960     		str	r1, [r7]
1324:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1325:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Check the arguments.
1326:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1327:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
1328:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ASSERT((ui32Source == UART_CLOCK_SYSTEM) || (ui32Source == UART_CLOCK_PIOSC));
1329:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
1330:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1331:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Set the UART clock source.
1332:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1333:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_CC) = ui32Source;
 1654              		.loc 1 1333 0
 1655 060a 7B68     		ldr	r3, [r7, #4]
 1656 060c 03F6C873 		addw	r3, r3, #4040
 1657 0610 1A46     		mov	r2, r3
 1658 0612 3B68     		ldr	r3, [r7]
 1659 0614 1360     		str	r3, [r2]
1334:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** }
 1660              		.loc 1 1334 0
 1661 0616 00BF     		nop
 1662 0618 0C37     		adds	r7, r7, #12
 1663              		.cfi_def_cfa_offset 4
 1664 061a BD46     		mov	sp, r7
 1665              		.cfi_def_cfa_register 13
 1666              		@ sp needed
 1667 061c 80BC     		pop	{r7}
 1668              		.cfi_restore 7
 1669              		.cfi_def_cfa_offset 0
 1670 061e 7047     		bx	lr
 1671              		.cfi_endproc
 1672              	.LFE32:
 1674              		.align	2
 1675              		.global	UARTClockSourceGet
 1676              		.thumb
 1677              		.thumb_func
 1679              	UARTClockSourceGet:
 1680              	.LFB33:
1335:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
1336:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
1337:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
1338:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! Gets the baud clock source for the specified UART
1339:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1340:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
1341:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1342:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! This function returns the baud clock source for the specified UART.  The
1343:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! possible baud clock source are the system clock (\b UART_CLOCK_SYSTEM) or
1344:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! the precision internal oscillator (\b UART_CLOCK_PIOSC).
1345:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1346:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \return None
1347:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
1348:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
1349:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** uint32_t
1350:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** UARTClockSourceGet(uint32_t ui32Base)
1351:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** {
 1681              		.loc 1 1351 0
 1682              		.cfi_startproc
 1683              		@ args = 0, pretend = 0, frame = 8
 1684              		@ frame_needed = 1, uses_anonymous_args = 0
 1685              		@ link register save eliminated.
 1686 0620 80B4     		push	{r7}
 1687              		.cfi_def_cfa_offset 4
 1688              		.cfi_offset 7, -4
 1689 0622 83B0     		sub	sp, sp, #12
 1690              		.cfi_def_cfa_offset 16
 1691 0624 00AF     		add	r7, sp, #0
 1692              		.cfi_def_cfa_register 7
 1693 0626 7860     		str	r0, [r7, #4]
1352:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1353:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Check the arguments.
1354:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1355:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
1356:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
1357:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1358:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Return the UART clock source.
1359:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1360:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     return(HWREG(ui32Base + UART_O_CC));
 1694              		.loc 1 1360 0
 1695 0628 7B68     		ldr	r3, [r7, #4]
 1696 062a 03F6C873 		addw	r3, r3, #4040
 1697 062e 1B68     		ldr	r3, [r3]
1361:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** }
 1698              		.loc 1 1361 0
 1699 0630 1846     		mov	r0, r3
 1700 0632 0C37     		adds	r7, r7, #12
 1701              		.cfi_def_cfa_offset 4
 1702 0634 BD46     		mov	sp, r7
 1703              		.cfi_def_cfa_register 13
 1704              		@ sp needed
 1705 0636 80BC     		pop	{r7}
 1706              		.cfi_restore 7
 1707              		.cfi_def_cfa_offset 0
 1708 0638 7047     		bx	lr
 1709              		.cfi_endproc
 1710              	.LFE33:
 1712 063a 00BF     		.align	2
 1713              		.global	UART9BitEnable
 1714              		.thumb
 1715              		.thumb_func
 1717              	UART9BitEnable:
 1718              	.LFB34:
1362:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
1363:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
1364:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
1365:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! Enables 9-bit mode on the specified UART
1366:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1367:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
1368:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1369:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! This function enables the 9-bit operational mode of the UART.
1370:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1371:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \return None
1372:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
1373:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
1374:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** void
1375:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** UART9BitEnable(uint32_t ui32Base)
1376:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** {
 1719              		.loc 1 1376 0
 1720              		.cfi_startproc
 1721              		@ args = 0, pretend = 0, frame = 8
 1722              		@ frame_needed = 1, uses_anonymous_args = 0
 1723              		@ link register save eliminated.
 1724 063c 80B4     		push	{r7}
 1725              		.cfi_def_cfa_offset 4
 1726              		.cfi_offset 7, -4
 1727 063e 83B0     		sub	sp, sp, #12
 1728              		.cfi_def_cfa_offset 16
 1729 0640 00AF     		add	r7, sp, #0
 1730              		.cfi_def_cfa_register 7
 1731 0642 7860     		str	r0, [r7, #4]
1377:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1378:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Check the arguments.
1379:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1380:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
1381:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
1382:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1383:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Enable 9-bit mode.
1384:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1385:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_NINEBITADDR) |= UART_NINEBITADDR_NINEBITEN;
 1732              		.loc 1 1385 0
 1733 0644 7B68     		ldr	r3, [r7, #4]
 1734 0646 A433     		adds	r3, r3, #164
 1735 0648 1A46     		mov	r2, r3
 1736 064a 7B68     		ldr	r3, [r7, #4]
 1737 064c A433     		adds	r3, r3, #164
 1738 064e 1B68     		ldr	r3, [r3]
 1739 0650 43F40043 		orr	r3, r3, #32768
 1740 0654 1360     		str	r3, [r2]
1386:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** }
 1741              		.loc 1 1386 0
 1742 0656 00BF     		nop
 1743 0658 0C37     		adds	r7, r7, #12
 1744              		.cfi_def_cfa_offset 4
 1745 065a BD46     		mov	sp, r7
 1746              		.cfi_def_cfa_register 13
 1747              		@ sp needed
 1748 065c 80BC     		pop	{r7}
 1749              		.cfi_restore 7
 1750              		.cfi_def_cfa_offset 0
 1751 065e 7047     		bx	lr
 1752              		.cfi_endproc
 1753              	.LFE34:
 1755              		.align	2
 1756              		.global	UART9BitDisable
 1757              		.thumb
 1758              		.thumb_func
 1760              	UART9BitDisable:
 1761              	.LFB35:
1387:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
1388:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
1389:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
1390:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! Disables 9-bit mode on the specified UART
1391:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1392:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
1393:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1394:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! This function disables the 9-bit operational mode of the UART.
1395:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1396:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \return None
1397:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
1398:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
1399:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** void
1400:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** UART9BitDisable(uint32_t ui32Base)
1401:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** {
 1762              		.loc 1 1401 0
 1763              		.cfi_startproc
 1764              		@ args = 0, pretend = 0, frame = 8
 1765              		@ frame_needed = 1, uses_anonymous_args = 0
 1766              		@ link register save eliminated.
 1767 0660 80B4     		push	{r7}
 1768              		.cfi_def_cfa_offset 4
 1769              		.cfi_offset 7, -4
 1770 0662 83B0     		sub	sp, sp, #12
 1771              		.cfi_def_cfa_offset 16
 1772 0664 00AF     		add	r7, sp, #0
 1773              		.cfi_def_cfa_register 7
 1774 0666 7860     		str	r0, [r7, #4]
1402:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1403:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Check the arguments.
1404:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1405:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
1406:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
1407:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1408:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Disable 9-bit mode.
1409:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1410:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_NINEBITADDR) &= ~UART_NINEBITADDR_NINEBITEN;
 1775              		.loc 1 1410 0
 1776 0668 7B68     		ldr	r3, [r7, #4]
 1777 066a A433     		adds	r3, r3, #164
 1778 066c 1A46     		mov	r2, r3
 1779 066e 7B68     		ldr	r3, [r7, #4]
 1780 0670 A433     		adds	r3, r3, #164
 1781 0672 1B68     		ldr	r3, [r3]
 1782 0674 23F40043 		bic	r3, r3, #32768
 1783 0678 1360     		str	r3, [r2]
1411:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** }
 1784              		.loc 1 1411 0
 1785 067a 00BF     		nop
 1786 067c 0C37     		adds	r7, r7, #12
 1787              		.cfi_def_cfa_offset 4
 1788 067e BD46     		mov	sp, r7
 1789              		.cfi_def_cfa_register 13
 1790              		@ sp needed
 1791 0680 80BC     		pop	{r7}
 1792              		.cfi_restore 7
 1793              		.cfi_def_cfa_offset 0
 1794 0682 7047     		bx	lr
 1795              		.cfi_endproc
 1796              	.LFE35:
 1798              		.align	2
 1799              		.global	UART9BitAddrSet
 1800              		.thumb
 1801              		.thumb_func
 1803              	UART9BitAddrSet:
 1804              	.LFB36:
1412:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
1413:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
1414:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
1415:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! Sets the device address(es) for 9-bit mode
1416:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1417:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
1418:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui8Addr is the device address.
1419:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui8Mask is the device address mask.
1420:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1421:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! This function sets the device address, or range of device addresses, that
1422:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! respond to requests on the 9-bit UART port.  The received address is masked
1423:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! with the mask and then compared against the given address, allowing either
1424:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! a single address (if \b ui8Mask is 0xff) or a set of addresses to be
1425:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! matched.
1426:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1427:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \return None
1428:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
1429:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
1430:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** void
1431:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** UART9BitAddrSet(uint32_t ui32Base, uint8_t ui8Addr,
1432:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****                 uint8_t ui8Mask)
1433:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** {
 1805              		.loc 1 1433 0
 1806              		.cfi_startproc
 1807              		@ args = 0, pretend = 0, frame = 8
 1808              		@ frame_needed = 1, uses_anonymous_args = 0
 1809              		@ link register save eliminated.
 1810 0684 80B4     		push	{r7}
 1811              		.cfi_def_cfa_offset 4
 1812              		.cfi_offset 7, -4
 1813 0686 83B0     		sub	sp, sp, #12
 1814              		.cfi_def_cfa_offset 16
 1815 0688 00AF     		add	r7, sp, #0
 1816              		.cfi_def_cfa_register 7
 1817 068a 7860     		str	r0, [r7, #4]
 1818 068c 0B46     		mov	r3, r1
 1819 068e FB70     		strb	r3, [r7, #3]
 1820 0690 1346     		mov	r3, r2
 1821 0692 BB70     		strb	r3, [r7, #2]
1434:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1435:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Check the arguments.
1436:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1437:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
1438:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
1439:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1440:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Set the address and mask.
1441:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1442:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_NINEBITADDR) = ui8Addr << UART_NINEBITADDR_ADDR_S;
 1822              		.loc 1 1442 0
 1823 0694 7B68     		ldr	r3, [r7, #4]
 1824 0696 A433     		adds	r3, r3, #164
 1825 0698 1A46     		mov	r2, r3
 1826 069a FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1827 069c 1360     		str	r3, [r2]
1443:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_NINEBITAMASK) = ui8Mask << UART_NINEBITAMASK_MASK_S;
 1828              		.loc 1 1443 0
 1829 069e 7B68     		ldr	r3, [r7, #4]
 1830 06a0 A833     		adds	r3, r3, #168
 1831 06a2 1A46     		mov	r2, r3
 1832 06a4 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 1833 06a6 1360     		str	r3, [r2]
1444:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** }
 1834              		.loc 1 1444 0
 1835 06a8 00BF     		nop
 1836 06aa 0C37     		adds	r7, r7, #12
 1837              		.cfi_def_cfa_offset 4
 1838 06ac BD46     		mov	sp, r7
 1839              		.cfi_def_cfa_register 13
 1840              		@ sp needed
 1841 06ae 80BC     		pop	{r7}
 1842              		.cfi_restore 7
 1843              		.cfi_def_cfa_offset 0
 1844 06b0 7047     		bx	lr
 1845              		.cfi_endproc
 1846              	.LFE36:
 1848 06b2 00BF     		.align	2
 1849              		.global	UART9BitAddrSend
 1850              		.thumb
 1851              		.thumb_func
 1853              	UART9BitAddrSend:
 1854              	.LFB37:
1445:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
1446:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
1447:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
1448:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! Sends an address character from the specified port when operating in 9-bit
1449:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! mode
1450:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1451:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui32Base is the base address of the UART port.
1452:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \param ui8Addr is the address to be transmitted.
1453:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1454:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! This function waits until all data has been sent from the specified port
1455:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! and then sends the given address as an address byte.  It then waits until
1456:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! the address byte has been transmitted before returning.
1457:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1458:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! The normal data functions (UARTCharPut(), UARTCharPutNonBlocking(),
1459:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! UARTCharGet(), and UARTCharGetNonBlocking()) are used to send and receive
1460:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! data characters in 9-bit mode.
1461:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //!
1462:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //! \return None
1463:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //
1464:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** //*****************************************************************************
1465:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** void
1466:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** UART9BitAddrSend(uint32_t ui32Base, uint8_t ui8Addr)
1467:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** {
 1855              		.loc 1 1467 0
 1856              		.cfi_startproc
 1857              		@ args = 0, pretend = 0, frame = 16
 1858              		@ frame_needed = 1, uses_anonymous_args = 0
 1859              		@ link register save eliminated.
 1860 06b4 80B4     		push	{r7}
 1861              		.cfi_def_cfa_offset 4
 1862              		.cfi_offset 7, -4
 1863 06b6 85B0     		sub	sp, sp, #20
 1864              		.cfi_def_cfa_offset 24
 1865 06b8 00AF     		add	r7, sp, #0
 1866              		.cfi_def_cfa_register 7
 1867 06ba 7860     		str	r0, [r7, #4]
 1868 06bc 0B46     		mov	r3, r1
 1869 06be FB70     		strb	r3, [r7, #3]
1468:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     uint32_t ui32LCRH;
1469:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
1470:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1471:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Check the arguments.
1472:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1473:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ASSERT(UARTBaseValid(ui32Base));
1474:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
1475:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1476:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Wait until the FIFO is empty and the UART is not busy.
1477:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1478:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     while((HWREG(ui32Base + UART_O_FR) & (UART_FR_TXFE | UART_FR_BUSY)) !=
 1870              		.loc 1 1478 0
 1871 06c0 00BF     		nop
 1872              	.L72:
 1873              		.loc 1 1478 0 is_stmt 0 discriminator 1
 1874 06c2 7B68     		ldr	r3, [r7, #4]
 1875 06c4 1833     		adds	r3, r3, #24
 1876 06c6 1B68     		ldr	r3, [r3]
 1877 06c8 03F08803 		and	r3, r3, #136
 1878 06cc 802B     		cmp	r3, #128
 1879 06ce F8D1     		bne	.L72
1479:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****             UART_FR_TXFE)
1480:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     {
1481:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     }
1482:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
1483:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
1484:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1485:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Force the address/data bit to 1 to indicate this is an address byte.
1486:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1487:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     ui32LCRH = HWREG(ui32Base + UART_O_LCRH);
 1880              		.loc 1 1487 0 is_stmt 1
 1881 06d0 7B68     		ldr	r3, [r7, #4]
 1882 06d2 2C33     		adds	r3, r3, #44
 1883 06d4 1B68     		ldr	r3, [r3]
 1884 06d6 FB60     		str	r3, [r7, #12]
1488:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_LCRH) = ((ui32LCRH & ~UART_LCRH_EPS) | UART_LCRH_SPS |
 1885              		.loc 1 1488 0
 1886 06d8 7B68     		ldr	r3, [r7, #4]
 1887 06da 2C33     		adds	r3, r3, #44
 1888 06dc 1A46     		mov	r2, r3
 1889 06de FB68     		ldr	r3, [r7, #12]
 1890 06e0 23F08603 		bic	r3, r3, #134
 1891 06e4 43F08203 		orr	r3, r3, #130
 1892 06e8 1360     		str	r3, [r2]
1489:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****                                      UART_LCRH_PEN);
1490:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
1491:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1492:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Send the address.
1493:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1494:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_DR) = ui8Addr;
 1893              		.loc 1 1494 0
 1894 06ea 7B68     		ldr	r3, [r7, #4]
 1895 06ec FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 1896 06ee 1A60     		str	r2, [r3]
1495:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
1496:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1497:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Wait until the address has been sent.
1498:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1499:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     while((HWREG(ui32Base + UART_O_FR) & (UART_FR_TXFE | UART_FR_BUSY)) !=
 1897              		.loc 1 1499 0
 1898 06f0 00BF     		nop
 1899              	.L73:
 1900              		.loc 1 1499 0 is_stmt 0 discriminator 1
 1901 06f2 7B68     		ldr	r3, [r7, #4]
 1902 06f4 1833     		adds	r3, r3, #24
 1903 06f6 1B68     		ldr	r3, [r3]
 1904 06f8 03F08803 		and	r3, r3, #136
 1905 06fc 802B     		cmp	r3, #128
 1906 06fe F8D1     		bne	.L73
1500:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****             UART_FR_TXFE)
1501:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     {
1502:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     }
1503:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** 
1504:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1505:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     // Restore the address/data setting.
1506:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     //
1507:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c ****     HWREG(ui32Base + UART_O_LCRH) = ui32LCRH;
 1907              		.loc 1 1507 0 is_stmt 1
 1908 0700 7B68     		ldr	r3, [r7, #4]
 1909 0702 2C33     		adds	r3, r3, #44
 1910 0704 1A46     		mov	r2, r3
 1911 0706 FB68     		ldr	r3, [r7, #12]
 1912 0708 1360     		str	r3, [r2]
1508:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/uarthal.c **** }
 1913              		.loc 1 1508 0
 1914 070a 00BF     		nop
 1915 070c 1437     		adds	r7, r7, #20
 1916              		.cfi_def_cfa_offset 4
 1917 070e BD46     		mov	sp, r7
 1918              		.cfi_def_cfa_register 13
 1919              		@ sp needed
 1920 0710 80BC     		pop	{r7}
 1921              		.cfi_restore 7
 1922              		.cfi_def_cfa_offset 0
 1923 0712 7047     		bx	lr
 1924              		.cfi_endproc
 1925              	.LFE37:
 1927              	.Letext0:
 1928              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 1929              		.file 3 "/usr/include/newlib/sys/_stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 uarthal.c
     /tmp/ccbZxLCB.s:19     .text:0000000000000000 $t
     /tmp/ccbZxLCB.s:24     .text:0000000000000000 UARTParityModeSet
     /tmp/ccbZxLCB.s:73     .text:000000000000002c UARTParityModeGet
     /tmp/ccbZxLCB.s:112    .text:0000000000000048 UARTFIFOLevelSet
     /tmp/ccbZxLCB.s:156    .text:000000000000006c UARTFIFOLevelGet
     /tmp/ccbZxLCB.s:207    .text:00000000000000a0 UARTConfigSetExpClk
     /tmp/ccbZxLCB.s:440    .text:00000000000001d0 UARTDisable
     /tmp/ccbZxLCB.s:309    .text:0000000000000130 UARTConfigGetExpClk
     /tmp/ccbZxLCB.s:387    .text:0000000000000194 UARTEnable
     /tmp/ccbZxLCB.s:503    .text:000000000000021c UARTFIFOEnable
     /tmp/ccbZxLCB.s:546    .text:0000000000000240 UARTFIFODisable
     /tmp/ccbZxLCB.s:589    .text:0000000000000264 UARTEnableSIR
     /tmp/ccbZxLCB.s:651    .text:00000000000002a8 UARTDisableSIR
     /tmp/ccbZxLCB.s:694    .text:00000000000002cc UARTTxIntModeSet
     /tmp/ccbZxLCB.s:742    .text:00000000000002f8 UARTTxIntModeGet
     /tmp/ccbZxLCB.s:781    .text:0000000000000314 UARTCharsAvail
     /tmp/ccbZxLCB.s:825    .text:000000000000033c UARTSpaceAvail
     /tmp/ccbZxLCB.s:869    .text:0000000000000364 UARTCharGetNonBlocking
     /tmp/ccbZxLCB.s:918    .text:0000000000000390 UARTCharGet
     /tmp/ccbZxLCB.s:965    .text:00000000000003b8 UARTCharPutNonBlocking
     /tmp/ccbZxLCB.s:1019   .text:00000000000003e8 UARTCharPut
     /tmp/ccbZxLCB.s:1069   .text:0000000000000414 UARTBreakCtl
     /tmp/ccbZxLCB.s:1129   .text:0000000000000450 UARTBusy
     /tmp/ccbZxLCB.s:1173   .text:0000000000000478 UARTIntRegister
     /tmp/ccbZxLCB.s:1221   .text:00000000000004a8 $d
     /tmp/ccbZxLCB.s:1225   .text:00000000000004ac $t
     /tmp/ccbZxLCB.s:1230   .text:00000000000004ac UARTIntUnregister
     /tmp/ccbZxLCB.s:1276   .text:00000000000004d8 $d
     /tmp/ccbZxLCB.s:1280   .text:00000000000004dc $t
     /tmp/ccbZxLCB.s:1285   .text:00000000000004dc UARTIntEnable
     /tmp/ccbZxLCB.s:1330   .text:0000000000000504 UARTIntDisable
     /tmp/ccbZxLCB.s:1376   .text:000000000000052c UARTIntStatus
     /tmp/ccbZxLCB.s:1427   .text:0000000000000558 UARTIntClear
     /tmp/ccbZxLCB.s:1468   .text:0000000000000578 UARTDMAEnable
     /tmp/ccbZxLCB.s:1513   .text:00000000000005a0 UARTDMADisable
     /tmp/ccbZxLCB.s:1559   .text:00000000000005c8 UARTRxErrorGet
     /tmp/ccbZxLCB.s:1598   .text:00000000000005e4 UARTRxErrorClear
     /tmp/ccbZxLCB.s:1638   .text:0000000000000600 UARTClockSourceSet
     /tmp/ccbZxLCB.s:1679   .text:0000000000000620 UARTClockSourceGet
     /tmp/ccbZxLCB.s:1717   .text:000000000000063c UART9BitEnable
     /tmp/ccbZxLCB.s:1760   .text:0000000000000660 UART9BitDisable
     /tmp/ccbZxLCB.s:1803   .text:0000000000000684 UART9BitAddrSet
     /tmp/ccbZxLCB.s:1853   .text:00000000000006b4 UART9BitAddrSend
                     .debug_frame:0000000000000010 $d
                           .group:0000000000000000 wm4.0.8e445c0106ab795ab4704214cba6f089
                           .group:0000000000000000 wm4.hw_ints.h.42.85b9479f2be35b086f1bb7cbb15bc097
                           .group:0000000000000000 wm4.hw_memmap.h.39.19283c377d449c9bca5fdd8ccb62628c
                           .group:0000000000000000 wm4.hw_sys_ctrl.h.39.50b4d7775c38e82076d0eb3bdc2daf82
                           .group:0000000000000000 wm4.hw_uart.h.39.98a53ad3c72429c06a23b03415b2e5a7
                           .group:0000000000000000 wm4._newlib_version.h.4.ad342815780c8db09778091a421b5b5b
                           .group:0000000000000000 wm4.features.h.33.d97f2d646536517df901beeb5b9993f5
                           .group:0000000000000000 wm4._default_types.h.15.933e8edd27a65e0b69af4a865eb623d2
                           .group:0000000000000000 wm4._intsup.h.10.b82bf99f69d6a5c085fc866de0d3eb9b
                           .group:0000000000000000 wm4._stdint.h.10.7a5f60e6741af4a5594a3867d347e1f9
                           .group:0000000000000000 wm4.stdint.h.23.373a9d32a9e4c2e88fd347156532d281
                           .group:0000000000000000 wm4.stdbool.h.29.07dce69c3b78884144b7f7bd19483461
                           .group:0000000000000000 wm4.hw_types.h.67.b10589a0806dcc2d274d6fab6b736519
                           .group:0000000000000000 wm4.interrupt.h.41.272fc4ec0e276feb439e7974d0f77eaf
                           .group:0000000000000000 wm4.uarthal.h.41.25db9539abdf5c44b7896bf33c1e7f12

UNDEFINED SYMBOLS
IntRegister
IntEnable
IntDisable
IntUnregister
