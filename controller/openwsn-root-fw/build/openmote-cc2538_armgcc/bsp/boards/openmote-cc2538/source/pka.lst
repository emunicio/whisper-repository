   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"pka.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.align	2
  20              		.global	PKAEnableInt
  21              		.thumb
  22              		.thumb_func
  24              	PKAEnableInt:
  25              	.LFB0:
  26              		.file 1 "build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c"
   1:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** /******************************************************************************
   2:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** *  Filename:       pka.c
   3:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** *  Revised:        $Date: 2012-10-01 11:15:04 -0700 (Mon, 01 Oct 2012) $
   4:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** *  Revision:       $Revision: 31660 $
   5:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** *
   6:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** *  Description:    Driver for the PKA HW module.
   7:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** *
   8:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** *  Copyright (C) 2013 Texas Instruments Incorporated - http://www.ti.com/
   9:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** *
  10:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** *
  11:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** *  Redistribution and use in source and binary forms, with or without
  12:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** *  modification, are permitted provided that the following conditions
  13:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** *  are met:
  14:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** *
  15:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** *    Redistributions of source code must retain the above copyright
  16:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** *    notice, this list of conditions and the following disclaimer.
  17:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** *
  18:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** *    Redistributions in binary form must reproduce the above copyright
  19:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** *    notice, this list of conditions and the following disclaimer in the
  20:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** *    documentation and/or other materials provided with the distribution.
  21:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** *
  22:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** *    Neither the name of Texas Instruments Incorporated nor the names of
  23:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** *    its contributors may be used to endorse or promote products derived
  24:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** *    from this software without specific prior written permission.
  25:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** *
  26:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  27:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  28:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
  29:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
  30:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  31:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  32:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  33:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  34:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  35:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  36:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** *  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  37:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** *
  38:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** ******************************************************************************/
  39:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
  40:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
  41:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
  42:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \addtogroup pka_driver
  43:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! @{
  44:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
  45:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
  46:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
  47:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** #include <headers/hw_ints.h>
  48:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** #include <headers/hw_memmap.h>
  49:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** #include <headers/hw_pka.h>
  50:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** #include <headers/hw_types.h>
  51:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** #include "interrupt.h"
  52:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** #include "pka.h"
  53:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** #include "sys_ctrl.h"
  54:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** #include "debug.h"
  55:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
  56:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
  57:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
  58:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** // Macro definition for NULL
  59:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
  60:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
  61:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
  62:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** #ifndef NULL
  63:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** #define NULL                    ((void*)0)
  64:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** #endif
  65:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
  66:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
  67:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
  68:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** // Define for the maximum curve size supported by the PKA module in 32 bit
  69:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** // word.
  70:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** // \note PKA hardware module can support upto 384 bit curve size due to the
  71:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //       2K of PKA RAM.
  72:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
  73:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
  74:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** #define PKA_MAX_CURVE_SIZE_32_BIT_WORD \
  75:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****                                 12
  76:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
  77:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
  78:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
  79:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** // Define for the maximum length of the big number supported by the PKA module
  80:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** // in 32 bit word.
  81:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
  82:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
  83:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** #define PKA_MAX_LEN_IN_32_BIT_WORD \
  84:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****                                 PKA_MAX_CURVE_SIZE_32_BIT_WORD
  85:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
  86:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
  87:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
  88:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** // Define for the PKA RAM size.
  89:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
  90:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //****************************************************************************
  91:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** #define PKA_RAM_SIZE            2000
  92:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
  93:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
  94:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
  95:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
  96:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! Enables the PKA interrupt.
  97:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
  98:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! This function enables the PKA interrupt.
  99:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
 100:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \return None.
 101:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
 102:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
 103:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** void
 104:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** PKAEnableInt(void)
 105:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** {
  27              		.loc 1 105 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31 0000 80B5     		push	{r7, lr}
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 7, -8
  34              		.cfi_offset 14, -4
  35 0002 00AF     		add	r7, sp, #0
  36              		.cfi_def_cfa_register 7
 106:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 107:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Enable the PKA interrupt.
 108:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 109:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     IntEnable(INT_PKA);
  37              		.loc 1 109 0
  38 0004 A020     		movs	r0, #160
  39 0006 FFF7FEFF 		bl	IntEnable
 110:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** }
  40              		.loc 1 110 0
  41 000a 00BF     		nop
  42 000c 80BD     		pop	{r7, pc}
  43              		.cfi_endproc
  44              	.LFE0:
  46 000e 00BF     		.align	2
  47              		.global	PKADisableInt
  48              		.thumb
  49              		.thumb_func
  51              	PKADisableInt:
  52              	.LFB1:
 111:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 112:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
 113:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
 114:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! Disables the PKA interrupt.
 115:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
 116:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! This function disables the PKA interrupt.
 117:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
 118:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \return None.
 119:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
 120:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
 121:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** void
 122:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** PKADisableInt( void )
 123:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** {
  53              		.loc 1 123 0
  54              		.cfi_startproc
  55              		@ args = 0, pretend = 0, frame = 0
  56              		@ frame_needed = 1, uses_anonymous_args = 0
  57 0010 80B5     		push	{r7, lr}
  58              		.cfi_def_cfa_offset 8
  59              		.cfi_offset 7, -8
  60              		.cfi_offset 14, -4
  61 0012 00AF     		add	r7, sp, #0
  62              		.cfi_def_cfa_register 7
 124:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 125:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Disables the PKA interrupt.
 126:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 127:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     IntDisable(INT_PKA);
  63              		.loc 1 127 0
  64 0014 A020     		movs	r0, #160
  65 0016 FFF7FEFF 		bl	IntDisable
 128:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** }
  66              		.loc 1 128 0
  67 001a 00BF     		nop
  68 001c 80BD     		pop	{r7, pc}
  69              		.cfi_endproc
  70              	.LFE1:
  72 001e 00BF     		.align	2
  73              		.global	PKAClearInt
  74              		.thumb
  75              		.thumb_func
  77              	PKAClearInt:
  78              	.LFB2:
 129:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 130:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
 131:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
 132:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! Clears the PKA interrupt.
 133:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
 134:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! This function unpends PKA interrupt.  This will cause any previously
 135:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! generated PKA interrupts that have not been handled yet to be discarded.
 136:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
 137:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \return None.
 138:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
 139:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
 140:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** void
 141:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** PKAClearInt(void)
 142:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** {
  79              		.loc 1 142 0
  80              		.cfi_startproc
  81              		@ args = 0, pretend = 0, frame = 0
  82              		@ frame_needed = 1, uses_anonymous_args = 0
  83 0020 80B5     		push	{r7, lr}
  84              		.cfi_def_cfa_offset 8
  85              		.cfi_offset 7, -8
  86              		.cfi_offset 14, -4
  87 0022 00AF     		add	r7, sp, #0
  88              		.cfi_def_cfa_register 7
 143:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 144:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // UnPends the PKA interrupt.
 145:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 146:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     IntPendClear(INT_PKA);
  89              		.loc 1 146 0
  90 0024 A020     		movs	r0, #160
  91 0026 FFF7FEFF 		bl	IntPendClear
 147:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** }
  92              		.loc 1 147 0
  93 002a 00BF     		nop
  94 002c 80BD     		pop	{r7, pc}
  95              		.cfi_endproc
  96              	.LFE2:
  98 002e 00BF     		.align	2
  99              		.global	PKARegInt
 100              		.thumb
 101              		.thumb_func
 103              	PKARegInt:
 104              	.LFB3:
 148:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 149:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
 150:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
 151:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! Registers an interrupt handler for PKA interrupt.
 152:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
 153:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param pfnHandler is a pointer to the function to be called when the
 154:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! PKA interrupt occurs.
 155:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
 156:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! This function does the actual registering of the interrupt handler.  This
 157:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! will not enable the PKA interrupt in the interrupt controller, a call to
 158:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! the function \sa PKAEnableInt() is needed to enable the PKA interrupt.
 159:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
 160:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \sa IntRegister() for important information about registering interrupt
 161:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! handlers.
 162:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
 163:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \return None.
 164:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
 165:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
 166:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** void
 167:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** PKARegInt(void (*pfnHandler)(void))
 168:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** {
 105              		.loc 1 168 0
 106              		.cfi_startproc
 107              		@ args = 0, pretend = 0, frame = 8
 108              		@ frame_needed = 1, uses_anonymous_args = 0
 109 0030 80B5     		push	{r7, lr}
 110              		.cfi_def_cfa_offset 8
 111              		.cfi_offset 7, -8
 112              		.cfi_offset 14, -4
 113 0032 82B0     		sub	sp, sp, #8
 114              		.cfi_def_cfa_offset 16
 115 0034 00AF     		add	r7, sp, #0
 116              		.cfi_def_cfa_register 7
 117 0036 7860     		str	r0, [r7, #4]
 169:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 170:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Register the interrupt handler.
 171:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 172:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     IntRegister(INT_PKA, pfnHandler);
 118              		.loc 1 172 0
 119 0038 7968     		ldr	r1, [r7, #4]
 120 003a A020     		movs	r0, #160
 121 003c FFF7FEFF 		bl	IntRegister
 173:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** }
 122              		.loc 1 173 0
 123 0040 00BF     		nop
 124 0042 0837     		adds	r7, r7, #8
 125              		.cfi_def_cfa_offset 8
 126 0044 BD46     		mov	sp, r7
 127              		.cfi_def_cfa_register 13
 128              		@ sp needed
 129 0046 80BD     		pop	{r7, pc}
 130              		.cfi_endproc
 131              	.LFE3:
 133              		.align	2
 134              		.global	PKAUnRegInt
 135              		.thumb
 136              		.thumb_func
 138              	PKAUnRegInt:
 139              	.LFB4:
 174:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 175:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
 176:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
 177:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! Unregisters an interrupt handler for the PKA interrupt.
 178:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
 179:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! This function deregisters the interrupt service routine.  This function
 180:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! will not disable the interrupt and an explicit call to \sa PKADisableInt()
 181:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! is needed.
 182:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
 183:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \return None.
 184:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
 185:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
 186:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** void
 187:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** PKAUnRegInt(void)
 188:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** {
 140              		.loc 1 188 0
 141              		.cfi_startproc
 142              		@ args = 0, pretend = 0, frame = 0
 143              		@ frame_needed = 1, uses_anonymous_args = 0
 144 0048 80B5     		push	{r7, lr}
 145              		.cfi_def_cfa_offset 8
 146              		.cfi_offset 7, -8
 147              		.cfi_offset 14, -4
 148 004a 00AF     		add	r7, sp, #0
 149              		.cfi_def_cfa_register 7
 189:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 190:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Unregister the interrupt handler.
 191:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 192:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     IntUnregister(INT_PKA);
 150              		.loc 1 192 0
 151 004c A020     		movs	r0, #160
 152 004e FFF7FEFF 		bl	IntUnregister
 193:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** }
 153              		.loc 1 193 0
 154 0052 00BF     		nop
 155 0054 80BD     		pop	{r7, pc}
 156              		.cfi_endproc
 157              	.LFE4:
 159 0056 00BF     		.align	2
 160              		.global	PKAGetOpsStatus
 161              		.thumb
 162              		.thumb_func
 164              	PKAGetOpsStatus:
 165              	.LFB5:
 194:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 195:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
 196:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
 197:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! Provides the PKA operation status.
 198:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
 199:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! This function provides information on whether any PKA operation is in
 200:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! progress or not. This function allows to check the PKA operation status
 201:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! before starting any new PKA operation.
 202:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
 203:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \return Returns: 
 204:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_INPRG if the PKA operation is in progress.
 205:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_OPERATION_NOT_INPRG if the PKA operation is not in progress.
 206:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
 207:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
 208:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** tPKAStatus
 209:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** PKAGetOpsStatus(void)
 210:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** {
 166              		.loc 1 210 0
 167              		.cfi_startproc
 168              		@ args = 0, pretend = 0, frame = 0
 169              		@ frame_needed = 1, uses_anonymous_args = 0
 170              		@ link register save eliminated.
 171 0058 80B4     		push	{r7}
 172              		.cfi_def_cfa_offset 4
 173              		.cfi_offset 7, -4
 174 005a 00AF     		add	r7, sp, #0
 175              		.cfi_def_cfa_register 7
 211:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     if((HWREG(PKA_FUNCTION) & PKA_FUNCTION_RUN) != 0)
 176              		.loc 1 211 0
 177 005c 064B     		ldr	r3, .L9
 178 005e 1B68     		ldr	r3, [r3]
 179 0060 03F40043 		and	r3, r3, #32768
 180 0064 002B     		cmp	r3, #0
 181 0066 01D0     		beq	.L7
 212:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 213:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         return (PKA_STATUS_OPERATION_INPRG);
 182              		.loc 1 213 0
 183 0068 0723     		movs	r3, #7
 184 006a 00E0     		b	.L8
 185              	.L7:
 214:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
 215:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     else
 216:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 217:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         return (PKA_STATUS_OPERATION_NOT_INPRG);
 186              		.loc 1 217 0
 187 006c 0823     		movs	r3, #8
 188              	.L8:
 218:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
 219:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** }
 189              		.loc 1 219 0
 190 006e 1846     		mov	r0, r3
 191 0070 BD46     		mov	sp, r7
 192              		.cfi_def_cfa_register 13
 193              		@ sp needed
 194 0072 80BC     		pop	{r7}
 195              		.cfi_restore 7
 196              		.cfi_def_cfa_offset 0
 197 0074 7047     		bx	lr
 198              	.L10:
 199 0076 00BF     		.align	2
 200              	.L9:
 201 0078 1C400044 		.word	1140867100
 202              		.cfi_endproc
 203              	.LFE5:
 205              		.align	2
 206              		.global	PKABigNumModStart
 207              		.thumb
 208              		.thumb_func
 210              	PKABigNumModStart:
 211              	.LFB6:
 220:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 221:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
 222:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
 223:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! Starts the big number modulus operation.
 224:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
 225:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param pui32BNum is the pointer to the big number on which modulo operation
 226:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! needs to be carried out.
 227:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param ui8BNSize is the size of the big number \sa pui32BNum in 32-bit
 228:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! word.
 229:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param pui32Modulus is the pointer to the divisor.
 230:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param ui8ModSize is the size of the divisor \sa pui32Modulus.
 231:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param pui32ResultVector is the pointer to the result vector location
 232:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! which will be set by this function.
 233:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
 234:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! This function starts the modulo operation on the big num \sa pui32BNum
 235:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! using the divisor \sa pui32Modulus.  The PKA RAM location where the result
 236:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! will be available is stored in \sa pui32ResultVector.
 237:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
 238:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!\return Returns: 
 239:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_SUCCESS if successful in starting the operation.  
 240:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_OPERATION_INPRG, if the PKA hw module is busy doing
 241:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! some other operation.
 242:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
 243:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
 244:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** tPKAStatus
 245:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** PKABigNumModStart(uint32_t* pui32BNum, uint8_t ui8BNSize,
 246:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****                   uint32_t* pui32Modulus, uint8_t ui8ModSize,
 247:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****                   uint32_t* pui32ResultVector)
 248:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** {
 212              		.loc 1 248 0
 213              		.cfi_startproc
 214              		@ args = 4, pretend = 0, frame = 32
 215              		@ frame_needed = 1, uses_anonymous_args = 0
 216              		@ link register save eliminated.
 217 007c 80B4     		push	{r7}
 218              		.cfi_def_cfa_offset 4
 219              		.cfi_offset 7, -4
 220 007e 89B0     		sub	sp, sp, #36
 221              		.cfi_def_cfa_offset 40
 222 0080 00AF     		add	r7, sp, #0
 223              		.cfi_def_cfa_register 7
 224 0082 F860     		str	r0, [r7, #12]
 225 0084 7A60     		str	r2, [r7, #4]
 226 0086 1A46     		mov	r2, r3
 227 0088 0B46     		mov	r3, r1
 228 008a FB72     		strb	r3, [r7, #11]
 229 008c 1346     		mov	r3, r2
 230 008e BB72     		strb	r3, [r7, #10]
 249:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     uint8_t extraBuf;
 250:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     uint32_t offset;
 251:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     int i;
 252:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 253:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 254:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Check the arguments.
 255:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 256:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != pui32BNum);
 257:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != pui32Modulus);
 258:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != pui32ResultVector);
 259:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 260:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 261:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // make sure no operation is in progress.
 262:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 263:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     if((HWREG(PKA_FUNCTION) & PKA_FUNCTION_RUN) != 0)
 231              		.loc 1 263 0
 232 0090 3C4B     		ldr	r3, .L18
 233 0092 1B68     		ldr	r3, [r3]
 234 0094 03F40043 		and	r3, r3, #32768
 235 0098 002B     		cmp	r3, #0
 236 009a 01D0     		beq	.L12
 264:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 265:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         return (PKA_STATUS_OPERATION_INPRG);
 237              		.loc 1 265 0
 238 009c 0723     		movs	r3, #7
 239 009e 6BE0     		b	.L13
 240              	.L12:
 266:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
 267:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 268:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 269:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // calculate the extra buffer requirement.
 270:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 271:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     extraBuf = 2 + ui8ModSize % 2;
 241              		.loc 1 271 0
 242 00a0 BB7A     		ldrb	r3, [r7, #10]
 243 00a2 03F00103 		and	r3, r3, #1
 244 00a6 DBB2     		uxtb	r3, r3
 245 00a8 0233     		adds	r3, r3, #2
 246 00aa FB76     		strb	r3, [r7, #27]
 272:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 273:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     offset = 0;
 247              		.loc 1 273 0
 248 00ac 0023     		movs	r3, #0
 249 00ae 7B61     		str	r3, [r7, #20]
 274:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 275:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 276:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Update the A ptr with the offset address of the PKA RAM location
 277:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // where the number will be stored.
 278:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 279:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG( (PKA_APTR) ) = offset >>2;
 250              		.loc 1 279 0
 251 00b0 354A     		ldr	r2, .L18+4
 252 00b2 7B69     		ldr	r3, [r7, #20]
 253 00b4 9B08     		lsrs	r3, r3, #2
 254 00b6 1360     		str	r3, [r2]
 280:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 281:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 282:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Load the number in PKA RAM
 283:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 284:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     for(i = 0; i < ui8BNSize; i++)
 255              		.loc 1 284 0
 256 00b8 0023     		movs	r3, #0
 257 00ba FB61     		str	r3, [r7, #28]
 258 00bc 12E0     		b	.L14
 259              	.L15:
 285:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 286:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) = pui32BNum[i];
 260              		.loc 1 286 0 discriminator 3
 261 00be FB69     		ldr	r3, [r7, #28]
 262 00c0 9B00     		lsls	r3, r3, #2
 263 00c2 1A46     		mov	r2, r3
 264 00c4 7B69     		ldr	r3, [r7, #20]
 265 00c6 1344     		add	r3, r3, r2
 266 00c8 03F18843 		add	r3, r3, #1140850688
 267 00cc 03F5C043 		add	r3, r3, #24576
 268 00d0 1946     		mov	r1, r3
 269 00d2 FB69     		ldr	r3, [r7, #28]
 270 00d4 9B00     		lsls	r3, r3, #2
 271 00d6 FA68     		ldr	r2, [r7, #12]
 272 00d8 1344     		add	r3, r3, r2
 273 00da 1B68     		ldr	r3, [r3]
 274 00dc 0B60     		str	r3, [r1]
 284:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 275              		.loc 1 284 0 discriminator 3
 276 00de FB69     		ldr	r3, [r7, #28]
 277 00e0 0133     		adds	r3, r3, #1
 278 00e2 FB61     		str	r3, [r7, #28]
 279              	.L14:
 284:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 280              		.loc 1 284 0 is_stmt 0 discriminator 1
 281 00e4 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 282 00e6 FB69     		ldr	r3, [r7, #28]
 283 00e8 9A42     		cmp	r2, r3
 284 00ea E8DC     		bgt	.L15
 287:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
 288:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 289:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 290:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // determine the offset for the next data input.
 291:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 292:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     offset += 4 * (i + ui8BNSize % 2);
 285              		.loc 1 292 0 is_stmt 1
 286 00ec FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 287 00ee 03F00102 		and	r2, r3, #1
 288 00f2 FB69     		ldr	r3, [r7, #28]
 289 00f4 1344     		add	r3, r3, r2
 290 00f6 9B00     		lsls	r3, r3, #2
 291 00f8 1A46     		mov	r2, r3
 292 00fa 7B69     		ldr	r3, [r7, #20]
 293 00fc 1344     		add	r3, r3, r2
 294 00fe 7B61     		str	r3, [r7, #20]
 293:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 294:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 295:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Update the B ptr with the offset address of the PKA RAM location
 296:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // where the divisor will be stored.
 297:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 298:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG( (PKA_BPTR) ) = offset >> 2;
 295              		.loc 1 298 0
 296 0100 224A     		ldr	r2, .L18+8
 297 0102 7B69     		ldr	r3, [r7, #20]
 298 0104 9B08     		lsrs	r3, r3, #2
 299 0106 1360     		str	r3, [r2]
 299:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 300:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 301:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Load the divisor in PKA RAM.
 302:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 303:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     for(i = 0; i < ui8ModSize;  i++)
 300              		.loc 1 303 0
 301 0108 0023     		movs	r3, #0
 302 010a FB61     		str	r3, [r7, #28]
 303 010c 12E0     		b	.L16
 304              	.L17:
 304:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 305:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) = pui32Modulus[i];
 305              		.loc 1 305 0 discriminator 3
 306 010e FB69     		ldr	r3, [r7, #28]
 307 0110 9B00     		lsls	r3, r3, #2
 308 0112 1A46     		mov	r2, r3
 309 0114 7B69     		ldr	r3, [r7, #20]
 310 0116 1344     		add	r3, r3, r2
 311 0118 03F18843 		add	r3, r3, #1140850688
 312 011c 03F5C043 		add	r3, r3, #24576
 313 0120 1946     		mov	r1, r3
 314 0122 FB69     		ldr	r3, [r7, #28]
 315 0124 9B00     		lsls	r3, r3, #2
 316 0126 7A68     		ldr	r2, [r7, #4]
 317 0128 1344     		add	r3, r3, r2
 318 012a 1B68     		ldr	r3, [r3]
 319 012c 0B60     		str	r3, [r1]
 303:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 320              		.loc 1 303 0 discriminator 3
 321 012e FB69     		ldr	r3, [r7, #28]
 322 0130 0133     		adds	r3, r3, #1
 323 0132 FB61     		str	r3, [r7, #28]
 324              	.L16:
 303:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 325              		.loc 1 303 0 is_stmt 0 discriminator 1
 326 0134 BA7A     		ldrb	r2, [r7, #10]	@ zero_extendqisi2
 327 0136 FB69     		ldr	r3, [r7, #28]
 328 0138 9A42     		cmp	r2, r3
 329 013a E8DC     		bgt	.L17
 306:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
 307:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 308:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 309:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // determine the offset for the next data.
 310:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 311:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     offset += 4 * (i + extraBuf);
 330              		.loc 1 311 0 is_stmt 1
 331 013c FA7E     		ldrb	r2, [r7, #27]	@ zero_extendqisi2
 332 013e FB69     		ldr	r3, [r7, #28]
 333 0140 1344     		add	r3, r3, r2
 334 0142 9B00     		lsls	r3, r3, #2
 335 0144 1A46     		mov	r2, r3
 336 0146 7B69     		ldr	r3, [r7, #20]
 337 0148 1344     		add	r3, r3, r2
 338 014a 7B61     		str	r3, [r7, #20]
 312:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 313:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 314:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Copy the result vector address location.
 315:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 316:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     *pui32ResultVector = PKA_RAM_BASE + offset;
 339              		.loc 1 316 0
 340 014c 7B69     		ldr	r3, [r7, #20]
 341 014e 03F18843 		add	r3, r3, #1140850688
 342 0152 03F5C043 		add	r3, r3, #24576
 343 0156 BA6A     		ldr	r2, [r7, #40]
 344 0158 1360     		str	r3, [r2]
 317:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 318:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 319:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Load C ptr with the result location in PKA RAM
 320:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 321:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG( (PKA_CPTR) ) = offset >> 2;
 345              		.loc 1 321 0
 346 015a 0D4A     		ldr	r2, .L18+12
 347 015c 7B69     		ldr	r3, [r7, #20]
 348 015e 9B08     		lsrs	r3, r3, #2
 349 0160 1360     		str	r3, [r2]
 322:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 323:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 324:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Load A length registers with Big number length in 32 bit words.
 325:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 326:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG( (PKA_ALENGTH) ) = ui8BNSize;
 350              		.loc 1 326 0
 351 0162 0C4A     		ldr	r2, .L18+16
 352 0164 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 353 0166 1360     		str	r3, [r2]
 327:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 328:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 329:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Load B length registers  Divisor length in 32-bit words.
 330:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 331:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG( (PKA_BLENGTH) ) = ui8ModSize;
 354              		.loc 1 331 0
 355 0168 0B4A     		ldr	r2, .L18+20
 356 016a BB7A     		ldrb	r3, [r7, #10]	@ zero_extendqisi2
 357 016c 1360     		str	r3, [r2]
 332:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 333:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 334:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Start the PKCP modulo operation by setting the PKA Function register.
 335:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 336:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG( (PKA_FUNCTION) ) = (PKA_FUNCTION_RUN | PKA_FUNCTION_MODULO);
 358              		.loc 1 336 0
 359 016e 054B     		ldr	r3, .L18
 360 0170 4FF40242 		mov	r2, #33280
 361 0174 1A60     		str	r2, [r3]
 337:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 338:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     return (PKA_STATUS_SUCCESS);
 362              		.loc 1 338 0
 363 0176 0023     		movs	r3, #0
 364              	.L13:
 339:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** }
 365              		.loc 1 339 0
 366 0178 1846     		mov	r0, r3
 367 017a 2437     		adds	r7, r7, #36
 368              		.cfi_def_cfa_offset 4
 369 017c BD46     		mov	sp, r7
 370              		.cfi_def_cfa_register 13
 371              		@ sp needed
 372 017e 80BC     		pop	{r7}
 373              		.cfi_restore 7
 374              		.cfi_def_cfa_offset 0
 375 0180 7047     		bx	lr
 376              	.L19:
 377 0182 00BF     		.align	2
 378              	.L18:
 379 0184 1C400044 		.word	1140867100
 380 0188 00400044 		.word	1140867072
 381 018c 04400044 		.word	1140867076
 382 0190 08400044 		.word	1140867080
 383 0194 10400044 		.word	1140867088
 384 0198 14400044 		.word	1140867092
 385              		.cfi_endproc
 386              	.LFE6:
 388              		.align	2
 389              		.global	PKABigNumModGetResult
 390              		.thumb
 391              		.thumb_func
 393              	PKABigNumModGetResult:
 394              	.LFB7:
 340:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 341:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
 342:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
 343:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! Gets the result of the big number modulus operation.
 344:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
 345:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param pui32ResultBuf is the pointer to buffer where the result needs to
 346:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! be stored.
 347:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param ui8Size is the size of the provided buffer in 32 bit size word.
 348:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param ui32ResVectorLoc is the address of the result location which
 349:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! was provided by the start function \sa PKABigNumModStart().
 350:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
 351:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! This function gets the result of the big number modulus operation which was
 352:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! previously started using the function \sa PKABigNumModStart().
 353:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
 354:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \return Returns:
 355:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_SUCCESS if successful.
 356:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_OPERATION_INPRG, if the PKA hw module is busy doing
 357:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! the operation.
 358:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_RESULT_0 if the result is all zeroes.
 359:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_BUF_UNDERFLOW, if the \e ui8Size is less than the length
 360:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! of the result.
 361:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
 362:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
 363:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** tPKAStatus
 364:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** PKABigNumModGetResult(uint32_t* pui32ResultBuf,uint8_t ui8Size,
 365:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****                       uint32_t ui32ResVectorLoc)
 366:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** {
 395              		.loc 1 366 0
 396              		.cfi_startproc
 397              		@ args = 0, pretend = 0, frame = 32
 398              		@ frame_needed = 1, uses_anonymous_args = 0
 399              		@ link register save eliminated.
 400 019c 80B4     		push	{r7}
 401              		.cfi_def_cfa_offset 4
 402              		.cfi_offset 7, -4
 403 019e 89B0     		sub	sp, sp, #36
 404              		.cfi_def_cfa_offset 40
 405 01a0 00AF     		add	r7, sp, #0
 406              		.cfi_def_cfa_register 7
 407 01a2 F860     		str	r0, [r7, #12]
 408 01a4 0B46     		mov	r3, r1
 409 01a6 7A60     		str	r2, [r7, #4]
 410 01a8 FB72     		strb	r3, [r7, #11]
 367:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     uint32_t regMSWVal;
 368:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     uint32_t len;
 369:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     int i;
 370:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 371:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 372:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Check the arguments.
 373:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 374:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != pui32ResultBuf);
 375:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT((ui32ResVectorLoc > PKA_RAM_BASE) &&
 376:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****            (ui32ResVectorLoc < (PKA_RAM_BASE + PKA_RAM_SIZE)));
 377:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 378:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 379:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // verify that the operation is complete.
 380:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 381:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     if((HWREG(PKA_FUNCTION) & PKA_FUNCTION_RUN) != 0)
 411              		.loc 1 381 0
 412 01aa 1F4B     		ldr	r3, .L27
 413 01ac 1B68     		ldr	r3, [r3]
 414 01ae 03F40043 		and	r3, r3, #32768
 415 01b2 002B     		cmp	r3, #0
 416 01b4 01D0     		beq	.L21
 382:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 383:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         return (PKA_STATUS_OPERATION_INPRG);
 417              		.loc 1 383 0
 418 01b6 0723     		movs	r3, #7
 419 01b8 31E0     		b	.L22
 420              	.L21:
 384:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
 385:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 386:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 387:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //  Get the MSW register value.
 388:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 389:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     regMSWVal = HWREG(PKA_DIVMSW);
 421              		.loc 1 389 0
 422 01ba 1C4B     		ldr	r3, .L27+4
 423 01bc 1B68     		ldr	r3, [r3]
 424 01be BB61     		str	r3, [r7, #24]
 390:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 391:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 392:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Check to make sure that the result vector is not all zeroes.
 393:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 394:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     if(regMSWVal & PKA_DIVMSW_RESULT_IS_ZERO)
 425              		.loc 1 394 0
 426 01c0 BB69     		ldr	r3, [r7, #24]
 427 01c2 03F40043 		and	r3, r3, #32768
 428 01c6 002B     		cmp	r3, #0
 429 01c8 01D0     		beq	.L23
 395:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 396:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         return (PKA_STATUS_RESULT_0);
 430              		.loc 1 396 0
 431 01ca 0423     		movs	r3, #4
 432 01cc 27E0     		b	.L22
 433              	.L23:
 397:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
 398:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 399:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 400:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Get the length of the result.
 401:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 402:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     len = ((regMSWVal & PKA_DIVMSW_MSW_ADDRESS_M) + 1) -
 434              		.loc 1 402 0
 435 01ce BB69     		ldr	r3, [r7, #24]
 436 01d0 C3F30A02 		ubfx	r2, r3, #0, #11
 403:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****           ((ui32ResVectorLoc - PKA_RAM_BASE) >> 2);
 437              		.loc 1 403 0
 438 01d4 7B68     		ldr	r3, [r7, #4]
 439 01d6 03F13C43 		add	r3, r3, #-1140850688
 440 01da A3F5C043 		sub	r3, r3, #24576
 441 01de 9B08     		lsrs	r3, r3, #2
 402:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****           ((ui32ResVectorLoc - PKA_RAM_BASE) >> 2);
 442              		.loc 1 402 0
 443 01e0 D31A     		subs	r3, r2, r3
 444 01e2 0133     		adds	r3, r3, #1
 445 01e4 7B61     		str	r3, [r7, #20]
 404:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 405:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 406:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // If the size of the buffer provided is less than the result length than
 407:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // return error.
 408:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 409:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     if(ui8Size < len)
 446              		.loc 1 409 0
 447 01e6 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 448 01e8 7B69     		ldr	r3, [r7, #20]
 449 01ea 9A42     		cmp	r2, r3
 450 01ec 01D2     		bcs	.L24
 410:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 411:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         return (PKA_STATUS_BUF_UNDERFLOW);
 451              		.loc 1 411 0
 452 01ee 0323     		movs	r3, #3
 453 01f0 15E0     		b	.L22
 454              	.L24:
 412:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
 413:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 414:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 415:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // copy the result from vector C into the pResult.
 416:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 417:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     for(i = 0; i < len; i++)
 455              		.loc 1 417 0
 456 01f2 0023     		movs	r3, #0
 457 01f4 FB61     		str	r3, [r7, #28]
 458 01f6 0DE0     		b	.L25
 459              	.L26:
 418:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 419:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         pui32ResultBuf[i]= HWREG( (ui32ResVectorLoc + 4*i) );
 460              		.loc 1 419 0 discriminator 3
 461 01f8 FB69     		ldr	r3, [r7, #28]
 462 01fa 9B00     		lsls	r3, r3, #2
 463 01fc FA68     		ldr	r2, [r7, #12]
 464 01fe 1344     		add	r3, r3, r2
 465 0200 FA69     		ldr	r2, [r7, #28]
 466 0202 9200     		lsls	r2, r2, #2
 467 0204 1146     		mov	r1, r2
 468 0206 7A68     		ldr	r2, [r7, #4]
 469 0208 0A44     		add	r2, r2, r1
 470 020a 1268     		ldr	r2, [r2]
 471 020c 1A60     		str	r2, [r3]
 417:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 472              		.loc 1 417 0 discriminator 3
 473 020e FB69     		ldr	r3, [r7, #28]
 474 0210 0133     		adds	r3, r3, #1
 475 0212 FB61     		str	r3, [r7, #28]
 476              	.L25:
 417:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 477              		.loc 1 417 0 is_stmt 0 discriminator 1
 478 0214 FA69     		ldr	r2, [r7, #28]
 479 0216 7B69     		ldr	r3, [r7, #20]
 480 0218 9A42     		cmp	r2, r3
 481 021a EDD3     		bcc	.L26
 420:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
 421:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 422:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     return (PKA_STATUS_SUCCESS);
 482              		.loc 1 422 0 is_stmt 1
 483 021c 0023     		movs	r3, #0
 484              	.L22:
 423:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** } // PKABigNumModGetResult()
 485              		.loc 1 423 0
 486 021e 1846     		mov	r0, r3
 487 0220 2437     		adds	r7, r7, #36
 488              		.cfi_def_cfa_offset 4
 489 0222 BD46     		mov	sp, r7
 490              		.cfi_def_cfa_register 13
 491              		@ sp needed
 492 0224 80BC     		pop	{r7}
 493              		.cfi_restore 7
 494              		.cfi_def_cfa_offset 0
 495 0226 7047     		bx	lr
 496              	.L28:
 497              		.align	2
 498              	.L27:
 499 0228 1C400044 		.word	1140867100
 500 022c 28400044 		.word	1140867112
 501              		.cfi_endproc
 502              	.LFE7:
 504              		.align	2
 505              		.global	PKABigNumCmpStart
 506              		.thumb
 507              		.thumb_func
 509              	PKABigNumCmpStart:
 510              	.LFB8:
 424:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 425:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
 426:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
 427:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! Starts the comparison of two big numbers.
 428:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
 429:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param pui32BNum1 is the pointer to the first big number.
 430:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param pui32BNum2 is the pointer to the second big number.
 431:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param ui8Size is the size of the big number in 32 bit size word.
 432:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
 433:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! This function starts the comparison of two big numbers pointed by
 434:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \e pui32BNum1 and \e pui32BNum2.
 435:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! Note this function expects the size of the two big numbers equal.
 436:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
 437:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!\return Returns: 
 438:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_SUCCESS if successful in starting the operation.  
 439:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_OPERATION_INPRG, if the PKA hw module is busy doing
 440:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! some other operation.
 441:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
 442:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
 443:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** tPKAStatus
 444:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** PKABigNumCmpStart(uint32_t* pui32BNum1, uint32_t* pui32BNum2, uint8_t ui8Size)
 445:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** {
 511              		.loc 1 445 0
 512              		.cfi_startproc
 513              		@ args = 0, pretend = 0, frame = 24
 514              		@ frame_needed = 1, uses_anonymous_args = 0
 515              		@ link register save eliminated.
 516 0230 80B4     		push	{r7}
 517              		.cfi_def_cfa_offset 4
 518              		.cfi_offset 7, -4
 519 0232 87B0     		sub	sp, sp, #28
 520              		.cfi_def_cfa_offset 32
 521 0234 00AF     		add	r7, sp, #0
 522              		.cfi_def_cfa_register 7
 523 0236 F860     		str	r0, [r7, #12]
 524 0238 B960     		str	r1, [r7, #8]
 525 023a 1346     		mov	r3, r2
 526 023c FB71     		strb	r3, [r7, #7]
 446:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     uint32_t offset;
 447:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     int i;
 448:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 449:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 450:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Check the arguments.
 451:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 452:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != pui32BNum1);
 453:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != pui32BNum2);
 454:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 455:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     offset = 0;
 527              		.loc 1 455 0
 528 023e 0023     		movs	r3, #0
 529 0240 3B61     		str	r3, [r7, #16]
 456:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 457:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 458:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Make sure no operation is in progress.
 459:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 460:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     if((HWREG(PKA_FUNCTION) & PKA_FUNCTION_RUN) != 0)
 530              		.loc 1 460 0
 531 0242 2D4B     		ldr	r3, .L36
 532 0244 1B68     		ldr	r3, [r3]
 533 0246 03F40043 		and	r3, r3, #32768
 534 024a 002B     		cmp	r3, #0
 535 024c 01D0     		beq	.L30
 461:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 462:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         return (PKA_STATUS_OPERATION_INPRG);
 536              		.loc 1 462 0
 537 024e 0723     		movs	r3, #7
 538 0250 4DE0     		b	.L31
 539              	.L30:
 463:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
 464:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 465:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 466:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Update the A ptr with the offset address of the PKA RAM location
 467:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // where the first big number will be stored.
 468:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 469:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG( (PKA_APTR) ) = offset >> 2;
 540              		.loc 1 469 0
 541 0252 2A4A     		ldr	r2, .L36+4
 542 0254 3B69     		ldr	r3, [r7, #16]
 543 0256 9B08     		lsrs	r3, r3, #2
 544 0258 1360     		str	r3, [r2]
 470:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 471:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 472:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Load the first big number in PKA RAM.
 473:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 474:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     for(i = 0; i < ui8Size; i++)
 545              		.loc 1 474 0
 546 025a 0023     		movs	r3, #0
 547 025c 7B61     		str	r3, [r7, #20]
 548 025e 12E0     		b	.L32
 549              	.L33:
 475:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 476:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         HWREG( (PKA_RAM_BASE + offset + 4*i) ) = pui32BNum1[i];
 550              		.loc 1 476 0 discriminator 3
 551 0260 7B69     		ldr	r3, [r7, #20]
 552 0262 9B00     		lsls	r3, r3, #2
 553 0264 1A46     		mov	r2, r3
 554 0266 3B69     		ldr	r3, [r7, #16]
 555 0268 1344     		add	r3, r3, r2
 556 026a 03F18843 		add	r3, r3, #1140850688
 557 026e 03F5C043 		add	r3, r3, #24576
 558 0272 1946     		mov	r1, r3
 559 0274 7B69     		ldr	r3, [r7, #20]
 560 0276 9B00     		lsls	r3, r3, #2
 561 0278 FA68     		ldr	r2, [r7, #12]
 562 027a 1344     		add	r3, r3, r2
 563 027c 1B68     		ldr	r3, [r3]
 564 027e 0B60     		str	r3, [r1]
 474:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 565              		.loc 1 474 0 discriminator 3
 566 0280 7B69     		ldr	r3, [r7, #20]
 567 0282 0133     		adds	r3, r3, #1
 568 0284 7B61     		str	r3, [r7, #20]
 569              	.L32:
 474:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 570              		.loc 1 474 0 is_stmt 0 discriminator 1
 571 0286 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 572 0288 7B69     		ldr	r3, [r7, #20]
 573 028a 9A42     		cmp	r2, r3
 574 028c E8DC     		bgt	.L33
 477:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
 478:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 479:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 480:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Determine the offset in PKA RAM for the next pointer.
 481:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 482:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     offset += 4 * (i + ui8Size % 2);
 575              		.loc 1 482 0 is_stmt 1
 576 028e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 577 0290 03F00102 		and	r2, r3, #1
 578 0294 7B69     		ldr	r3, [r7, #20]
 579 0296 1344     		add	r3, r3, r2
 580 0298 9B00     		lsls	r3, r3, #2
 581 029a 1A46     		mov	r2, r3
 582 029c 3B69     		ldr	r3, [r7, #16]
 583 029e 1344     		add	r3, r3, r2
 584 02a0 3B61     		str	r3, [r7, #16]
 483:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 484:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 485:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Update the B ptr with the offset address of the PKA RAM location
 486:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // where the second big number will be stored.
 487:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 488:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG( (PKA_BPTR) ) = offset >> 2;
 585              		.loc 1 488 0
 586 02a2 174A     		ldr	r2, .L36+8
 587 02a4 3B69     		ldr	r3, [r7, #16]
 588 02a6 9B08     		lsrs	r3, r3, #2
 589 02a8 1360     		str	r3, [r2]
 489:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 490:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 491:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Load the second big number in PKA RAM.
 492:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 493:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     for(i = 0; i < ui8Size;  i++)
 590              		.loc 1 493 0
 591 02aa 0023     		movs	r3, #0
 592 02ac 7B61     		str	r3, [r7, #20]
 593 02ae 12E0     		b	.L34
 594              	.L35:
 494:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 495:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         HWREG( (PKA_RAM_BASE + offset + 4*i) ) = pui32BNum2[i];
 595              		.loc 1 495 0 discriminator 3
 596 02b0 7B69     		ldr	r3, [r7, #20]
 597 02b2 9B00     		lsls	r3, r3, #2
 598 02b4 1A46     		mov	r2, r3
 599 02b6 3B69     		ldr	r3, [r7, #16]
 600 02b8 1344     		add	r3, r3, r2
 601 02ba 03F18843 		add	r3, r3, #1140850688
 602 02be 03F5C043 		add	r3, r3, #24576
 603 02c2 1946     		mov	r1, r3
 604 02c4 7B69     		ldr	r3, [r7, #20]
 605 02c6 9B00     		lsls	r3, r3, #2
 606 02c8 BA68     		ldr	r2, [r7, #8]
 607 02ca 1344     		add	r3, r3, r2
 608 02cc 1B68     		ldr	r3, [r3]
 609 02ce 0B60     		str	r3, [r1]
 493:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 610              		.loc 1 493 0 discriminator 3
 611 02d0 7B69     		ldr	r3, [r7, #20]
 612 02d2 0133     		adds	r3, r3, #1
 613 02d4 7B61     		str	r3, [r7, #20]
 614              	.L34:
 493:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 615              		.loc 1 493 0 is_stmt 0 discriminator 1
 616 02d6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 617 02d8 7B69     		ldr	r3, [r7, #20]
 618 02da 9A42     		cmp	r2, r3
 619 02dc E8DC     		bgt	.L35
 496:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
 497:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 498:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 499:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Load length registers in 32 bit word size.
 500:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 501:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG( (PKA_ALENGTH) ) = ui8Size;
 620              		.loc 1 501 0 is_stmt 1
 621 02de 094A     		ldr	r2, .L36+12
 622 02e0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 623 02e2 1360     		str	r3, [r2]
 502:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 503:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 504:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Set the PKA Function register for the Compare operation
 505:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // and start the operation.
 506:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 507:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG( (PKA_FUNCTION) ) = (PKA_FUNCTION_RUN | PKA_FUNCTION_COMPARE);
 624              		.loc 1 507 0
 625 02e4 044B     		ldr	r3, .L36
 626 02e6 4FF40442 		mov	r2, #33792
 627 02ea 1A60     		str	r2, [r3]
 508:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 509:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     return (PKA_STATUS_SUCCESS);
 628              		.loc 1 509 0
 629 02ec 0023     		movs	r3, #0
 630              	.L31:
 510:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** }
 631              		.loc 1 510 0
 632 02ee 1846     		mov	r0, r3
 633 02f0 1C37     		adds	r7, r7, #28
 634              		.cfi_def_cfa_offset 4
 635 02f2 BD46     		mov	sp, r7
 636              		.cfi_def_cfa_register 13
 637              		@ sp needed
 638 02f4 80BC     		pop	{r7}
 639              		.cfi_restore 7
 640              		.cfi_def_cfa_offset 0
 641 02f6 7047     		bx	lr
 642              	.L37:
 643              		.align	2
 644              	.L36:
 645 02f8 1C400044 		.word	1140867100
 646 02fc 00400044 		.word	1140867072
 647 0300 04400044 		.word	1140867076
 648 0304 10400044 		.word	1140867088
 649              		.cfi_endproc
 650              	.LFE8:
 652              		.align	2
 653              		.global	PKABigNumCmpGetResult
 654              		.thumb
 655              		.thumb_func
 657              	PKABigNumCmpGetResult:
 658              	.LFB9:
 511:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 512:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
 513:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
 514:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! Gets the result of the comparison operation of two big numbers.
 515:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
 516:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! This function provides the results of the comparison of two big numbers
 517:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! which was started using the \sa PKABigNumCmpStart().
 518:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
 519:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \return Returns:
 520:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_OPERATION_INPRG if the operation is in progress.
 521:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_SUCCESS if the two big numbers are equal.
 522:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_A_GR_B  if the first number is greater than the second.
 523:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_A_LT_B if the first number is less than the second.
 524:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
 525:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
 526:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** tPKAStatus
 527:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** PKABigNumCmpGetResult(void)
 528:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** {
 659              		.loc 1 528 0
 660              		.cfi_startproc
 661              		@ args = 0, pretend = 0, frame = 8
 662              		@ frame_needed = 1, uses_anonymous_args = 0
 663              		@ link register save eliminated.
 664 0308 80B4     		push	{r7}
 665              		.cfi_def_cfa_offset 4
 666              		.cfi_offset 7, -4
 667 030a 83B0     		sub	sp, sp, #12
 668              		.cfi_def_cfa_offset 16
 669 030c 00AF     		add	r7, sp, #0
 670              		.cfi_def_cfa_register 7
 529:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     tPKAStatus status;
 530:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 531:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 532:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // verify that the operation is complete.
 533:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 534:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     if((HWREG(PKA_FUNCTION) & PKA_FUNCTION_RUN) != 0)
 671              		.loc 1 534 0
 672 030e 124B     		ldr	r3, .L47
 673 0310 1B68     		ldr	r3, [r3]
 674 0312 03F40043 		and	r3, r3, #32768
 675 0316 002B     		cmp	r3, #0
 676 0318 03D0     		beq	.L39
 535:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 536:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         status = PKA_STATUS_OPERATION_INPRG;
 677              		.loc 1 536 0
 678 031a 0723     		movs	r3, #7
 679 031c FB71     		strb	r3, [r7, #7]
 537:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         return (status);
 680              		.loc 1 537 0
 681 031e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 682 0320 14E0     		b	.L40
 683              	.L39:
 538:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
 539:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 540:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 541:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Check the COMPARE register.
 542:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 543:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     switch(HWREG(PKA_COMPARE))
 684              		.loc 1 543 0
 685 0322 0E4B     		ldr	r3, .L47+4
 686 0324 1B68     		ldr	r3, [r3]
 687 0326 022B     		cmp	r3, #2
 688 0328 09D0     		beq	.L42
 689 032a 042B     		cmp	r3, #4
 690 032c 04D0     		beq	.L43
 691 032e 012B     		cmp	r3, #1
 692 0330 08D1     		bne	.L46
 544:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 545:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         case PKA_COMPARE_A_EQUALS_B:
 546:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****             status = PKA_STATUS_SUCCESS;
 693              		.loc 1 546 0
 694 0332 0023     		movs	r3, #0
 695 0334 FB71     		strb	r3, [r7, #7]
 547:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****             break;
 696              		.loc 1 547 0
 697 0336 08E0     		b	.L45
 698              	.L43:
 548:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 549:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         case PKA_COMPARE_A_GREATER_THAN_B:
 550:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****             status = PKA_STATUS_A_GR_B;
 699              		.loc 1 550 0
 700 0338 0523     		movs	r3, #5
 701 033a FB71     		strb	r3, [r7, #7]
 551:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****             break;
 702              		.loc 1 551 0
 703 033c 05E0     		b	.L45
 704              	.L42:
 552:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 553:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         case PKA_COMPARE_A_LESS_THAN_B:
 554:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****             status = PKA_STATUS_A_LT_B;
 705              		.loc 1 554 0
 706 033e 0623     		movs	r3, #6
 707 0340 FB71     		strb	r3, [r7, #7]
 555:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****             break;
 708              		.loc 1 555 0
 709 0342 02E0     		b	.L45
 710              	.L46:
 556:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 557:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         default:
 558:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****             status = PKA_STATUS_FAILURE;
 711              		.loc 1 558 0
 712 0344 0123     		movs	r3, #1
 713 0346 FB71     		strb	r3, [r7, #7]
 559:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****             break;
 714              		.loc 1 559 0
 715 0348 00BF     		nop
 716              	.L45:
 560:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
 561:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 562:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     return (status);
 717              		.loc 1 562 0
 718 034a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 719              	.L40:
 563:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** }
 720              		.loc 1 563 0
 721 034c 1846     		mov	r0, r3
 722 034e 0C37     		adds	r7, r7, #12
 723              		.cfi_def_cfa_offset 4
 724 0350 BD46     		mov	sp, r7
 725              		.cfi_def_cfa_register 13
 726              		@ sp needed
 727 0352 80BC     		pop	{r7}
 728              		.cfi_restore 7
 729              		.cfi_def_cfa_offset 0
 730 0354 7047     		bx	lr
 731              	.L48:
 732 0356 00BF     		.align	2
 733              	.L47:
 734 0358 1C400044 		.word	1140867100
 735 035c 20400044 		.word	1140867104
 736              		.cfi_endproc
 737              	.LFE9:
 739              		.align	2
 740              		.global	PKABigNumInvModStart
 741              		.thumb
 742              		.thumb_func
 744              	PKABigNumInvModStart:
 745              	.LFB10:
 564:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 565:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
 566:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
 567:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! Starts the big number inverse modulo operation.
 568:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
 569:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param pui32BNum is the pointer to the buffer containing the big number
 570:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! (dividend).
 571:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param ui8BNSize is the size of the \e pui32BNum in 32 bit word.
 572:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param pui32Modulus is the pointer to the buffer containing the divisor.
 573:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param ui8Size is the size of the divisor in 32 bit word.
 574:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param pui32ResultVector is the pointer to the result vector location
 575:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! which will be set by this function.
 576:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
 577:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! This function starts the the inverse modulo operation on \e pui32BNum
 578:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! using the divisor \e pui32Modulus.
 579:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
 580:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!\return Returns: 
 581:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_SUCCESS if successful in starting the operation.  
 582:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_OPERATION_INPRG, if the PKA hw module is busy doing
 583:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! some other operation.
 584:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
 585:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
 586:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** tPKAStatus
 587:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** PKABigNumInvModStart(uint32_t* pui32BNum, uint8_t ui8BNSize,
 588:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****                      uint32_t* pui32Modulus, uint8_t ui8Size,
 589:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****                      uint32_t* pui32ResultVector)
 590:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** {
 746              		.loc 1 590 0
 747              		.cfi_startproc
 748              		@ args = 4, pretend = 0, frame = 24
 749              		@ frame_needed = 1, uses_anonymous_args = 0
 750              		@ link register save eliminated.
 751 0360 80B4     		push	{r7}
 752              		.cfi_def_cfa_offset 4
 753              		.cfi_offset 7, -4
 754 0362 87B0     		sub	sp, sp, #28
 755              		.cfi_def_cfa_offset 32
 756 0364 00AF     		add	r7, sp, #0
 757              		.cfi_def_cfa_register 7
 758 0366 F860     		str	r0, [r7, #12]
 759 0368 7A60     		str	r2, [r7, #4]
 760 036a 1A46     		mov	r2, r3
 761 036c 0B46     		mov	r3, r1
 762 036e FB72     		strb	r3, [r7, #11]
 763 0370 1346     		mov	r3, r2
 764 0372 BB72     		strb	r3, [r7, #10]
 591:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     uint32_t offset;
 592:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     int i;
 593:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 594:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 595:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Check the arguments.
 596:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 597:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != pui32BNum);
 598:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != pui32Modulus);
 599:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != pui32ResultVector);
 600:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 601:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     offset = 0;
 765              		.loc 1 601 0
 766 0374 0023     		movs	r3, #0
 767 0376 3B61     		str	r3, [r7, #16]
 602:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 603:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 604:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Make sure no operation is in progress.
 605:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 606:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     if((HWREG(PKA_FUNCTION) & PKA_FUNCTION_RUN) != 0)
 768              		.loc 1 606 0
 769 0378 394B     		ldr	r3, .L56
 770 037a 1B68     		ldr	r3, [r3]
 771 037c 03F40043 		and	r3, r3, #32768
 772 0380 002B     		cmp	r3, #0
 773 0382 01D0     		beq	.L50
 607:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 608:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         return (PKA_STATUS_OPERATION_INPRG);
 774              		.loc 1 608 0
 775 0384 0723     		movs	r3, #7
 776 0386 65E0     		b	.L51
 777              	.L50:
 609:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
 610:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 611:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 612:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Update the A ptr with the offset address of the PKA RAM location
 613:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // where the number will be stored.
 614:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 615:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG( (PKA_APTR) ) = offset >>2;
 778              		.loc 1 615 0
 779 0388 364A     		ldr	r2, .L56+4
 780 038a 3B69     		ldr	r3, [r7, #16]
 781 038c 9B08     		lsrs	r3, r3, #2
 782 038e 1360     		str	r3, [r2]
 616:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 617:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 618:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Load the \e pui32BNum number in PKA RAM.
 619:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 620:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     for(i = 0; i < ui8BNSize; i++)
 783              		.loc 1 620 0
 784 0390 0023     		movs	r3, #0
 785 0392 7B61     		str	r3, [r7, #20]
 786 0394 12E0     		b	.L52
 787              	.L53:
 621:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 622:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         HWREG( (PKA_RAM_BASE + offset + 4*i) ) = pui32BNum[i];
 788              		.loc 1 622 0 discriminator 3
 789 0396 7B69     		ldr	r3, [r7, #20]
 790 0398 9B00     		lsls	r3, r3, #2
 791 039a 1A46     		mov	r2, r3
 792 039c 3B69     		ldr	r3, [r7, #16]
 793 039e 1344     		add	r3, r3, r2
 794 03a0 03F18843 		add	r3, r3, #1140850688
 795 03a4 03F5C043 		add	r3, r3, #24576
 796 03a8 1946     		mov	r1, r3
 797 03aa 7B69     		ldr	r3, [r7, #20]
 798 03ac 9B00     		lsls	r3, r3, #2
 799 03ae FA68     		ldr	r2, [r7, #12]
 800 03b0 1344     		add	r3, r3, r2
 801 03b2 1B68     		ldr	r3, [r3]
 802 03b4 0B60     		str	r3, [r1]
 620:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 803              		.loc 1 620 0 discriminator 3
 804 03b6 7B69     		ldr	r3, [r7, #20]
 805 03b8 0133     		adds	r3, r3, #1
 806 03ba 7B61     		str	r3, [r7, #20]
 807              	.L52:
 620:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 808              		.loc 1 620 0 is_stmt 0 discriminator 1
 809 03bc FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 810 03be 7B69     		ldr	r3, [r7, #20]
 811 03c0 9A42     		cmp	r2, r3
 812 03c2 E8DC     		bgt	.L53
 623:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
 624:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 625:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 626:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Determine the offset for next data.
 627:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 628:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     offset += 4 * (i + ui8BNSize % 2);
 813              		.loc 1 628 0 is_stmt 1
 814 03c4 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 815 03c6 03F00102 		and	r2, r3, #1
 816 03ca 7B69     		ldr	r3, [r7, #20]
 817 03cc 1344     		add	r3, r3, r2
 818 03ce 9B00     		lsls	r3, r3, #2
 819 03d0 1A46     		mov	r2, r3
 820 03d2 3B69     		ldr	r3, [r7, #16]
 821 03d4 1344     		add	r3, r3, r2
 822 03d6 3B61     		str	r3, [r7, #16]
 629:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 630:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 631:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Update the B ptr with the offset address of the PKA RAM location
 632:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // where the modulus will be stored.
 633:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 634:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG( (PKA_BPTR) ) = offset >> 2;
 823              		.loc 1 634 0
 824 03d8 234A     		ldr	r2, .L56+8
 825 03da 3B69     		ldr	r3, [r7, #16]
 826 03dc 9B08     		lsrs	r3, r3, #2
 827 03de 1360     		str	r3, [r2]
 635:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 636:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 637:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Load the \e pui32Modulus divisor in PKA RAM.
 638:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 639:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     for(i = 0; i < ui8Size;  i++)
 828              		.loc 1 639 0
 829 03e0 0023     		movs	r3, #0
 830 03e2 7B61     		str	r3, [r7, #20]
 831 03e4 12E0     		b	.L54
 832              	.L55:
 640:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 641:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         HWREG( (PKA_RAM_BASE + offset + 4*i) ) = pui32Modulus[i];
 833              		.loc 1 641 0 discriminator 3
 834 03e6 7B69     		ldr	r3, [r7, #20]
 835 03e8 9B00     		lsls	r3, r3, #2
 836 03ea 1A46     		mov	r2, r3
 837 03ec 3B69     		ldr	r3, [r7, #16]
 838 03ee 1344     		add	r3, r3, r2
 839 03f0 03F18843 		add	r3, r3, #1140850688
 840 03f4 03F5C043 		add	r3, r3, #24576
 841 03f8 1946     		mov	r1, r3
 842 03fa 7B69     		ldr	r3, [r7, #20]
 843 03fc 9B00     		lsls	r3, r3, #2
 844 03fe 7A68     		ldr	r2, [r7, #4]
 845 0400 1344     		add	r3, r3, r2
 846 0402 1B68     		ldr	r3, [r3]
 847 0404 0B60     		str	r3, [r1]
 639:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 848              		.loc 1 639 0 discriminator 3
 849 0406 7B69     		ldr	r3, [r7, #20]
 850 0408 0133     		adds	r3, r3, #1
 851 040a 7B61     		str	r3, [r7, #20]
 852              	.L54:
 639:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 853              		.loc 1 639 0 is_stmt 0 discriminator 1
 854 040c BA7A     		ldrb	r2, [r7, #10]	@ zero_extendqisi2
 855 040e 7B69     		ldr	r3, [r7, #20]
 856 0410 9A42     		cmp	r2, r3
 857 0412 E8DC     		bgt	.L55
 642:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
 643:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 644:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 645:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Determine the offset for result data.
 646:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 647:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     offset += 4 * (i + ui8Size % 2);
 858              		.loc 1 647 0 is_stmt 1
 859 0414 BB7A     		ldrb	r3, [r7, #10]	@ zero_extendqisi2
 860 0416 03F00102 		and	r2, r3, #1
 861 041a 7B69     		ldr	r3, [r7, #20]
 862 041c 1344     		add	r3, r3, r2
 863 041e 9B00     		lsls	r3, r3, #2
 864 0420 1A46     		mov	r2, r3
 865 0422 3B69     		ldr	r3, [r7, #16]
 866 0424 1344     		add	r3, r3, r2
 867 0426 3B61     		str	r3, [r7, #16]
 648:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 649:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 650:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Copy the result vector address location.
 651:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 652:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     *pui32ResultVector = PKA_RAM_BASE + offset;
 868              		.loc 1 652 0
 869 0428 3B69     		ldr	r3, [r7, #16]
 870 042a 03F18843 		add	r3, r3, #1140850688
 871 042e 03F5C043 		add	r3, r3, #24576
 872 0432 3A6A     		ldr	r2, [r7, #32]
 873 0434 1360     		str	r3, [r2]
 653:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 654:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 655:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Load D ptr with the result location in PKA RAM.
 656:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 657:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG( (PKA_DPTR) ) = offset >> 2;
 874              		.loc 1 657 0
 875 0436 0D4A     		ldr	r2, .L56+12
 876 0438 3B69     		ldr	r3, [r7, #16]
 877 043a 9B08     		lsrs	r3, r3, #2
 878 043c 1360     		str	r3, [r2]
 658:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 659:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 660:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Load the respective length registers.
 661:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 662:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG( (PKA_ALENGTH) ) = ui8BNSize;
 879              		.loc 1 662 0
 880 043e 0C4A     		ldr	r2, .L56+16
 881 0440 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 882 0442 1360     		str	r3, [r2]
 663:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG( (PKA_BLENGTH) ) = ui8Size;
 883              		.loc 1 663 0
 884 0444 0B4A     		ldr	r2, .L56+20
 885 0446 BB7A     		ldrb	r3, [r7, #10]	@ zero_extendqisi2
 886 0448 1360     		str	r3, [r2]
 664:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 665:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 666:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // set the PKA function to InvMod operation and the start the operation.
 667:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 668:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG( (PKA_FUNCTION) ) = 0x0000F000;
 887              		.loc 1 668 0
 888 044a 054B     		ldr	r3, .L56
 889 044c 4FF47042 		mov	r2, #61440
 890 0450 1A60     		str	r2, [r3]
 669:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 670:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     return (PKA_STATUS_SUCCESS);
 891              		.loc 1 670 0
 892 0452 0023     		movs	r3, #0
 893              	.L51:
 671:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** }
 894              		.loc 1 671 0
 895 0454 1846     		mov	r0, r3
 896 0456 1C37     		adds	r7, r7, #28
 897              		.cfi_def_cfa_offset 4
 898 0458 BD46     		mov	sp, r7
 899              		.cfi_def_cfa_register 13
 900              		@ sp needed
 901 045a 80BC     		pop	{r7}
 902              		.cfi_restore 7
 903              		.cfi_def_cfa_offset 0
 904 045c 7047     		bx	lr
 905              	.L57:
 906 045e 00BF     		.align	2
 907              	.L56:
 908 0460 1C400044 		.word	1140867100
 909 0464 00400044 		.word	1140867072
 910 0468 04400044 		.word	1140867076
 911 046c 0C400044 		.word	1140867084
 912 0470 10400044 		.word	1140867088
 913 0474 14400044 		.word	1140867092
 914              		.cfi_endproc
 915              	.LFE10:
 917              		.align	2
 918              		.global	PKABigNumInvModGetResult
 919              		.thumb
 920              		.thumb_func
 922              	PKABigNumInvModGetResult:
 923              	.LFB11:
 672:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 673:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
 674:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
 675:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! Gets the result of the big number inverse modulo operation.
 676:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
 677:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param pui32ResultBuf is the pointer to buffer where the result needs to be
 678:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! stored.
 679:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param ui8Size is the size of the provided buffer in 32 bit ui8Size
 680:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! word.
 681:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param ui32ResVectorLoc is the address of the result location which
 682:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! was provided by the start function \sa PKABigNumInvModStart().
 683:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
 684:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! This function gets the result of the big number inverse modulo operation
 685:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! previously started using the function \sa PKABigNumInvModStart().
 686:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
 687:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \return Returns:
 688:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_SUCCESS if the operation is successful. 
 689:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_OPERATION_INPRG, if the PKA hw module is busy performing 
 690:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! the operation.
 691:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_RESULT_0 if the result is all zeroes.
 692:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_BUF_UNDERFLOW if the length of the provided buffer is less
 693:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! then the result. 
 694:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
 695:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
 696:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** tPKAStatus
 697:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** PKABigNumInvModGetResult(uint32_t* pui32ResultBuf, uint8_t ui8Size,
 698:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****                          uint32_t ui32ResVectorLoc)
 699:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** {
 924              		.loc 1 699 0
 925              		.cfi_startproc
 926              		@ args = 0, pretend = 0, frame = 32
 927              		@ frame_needed = 1, uses_anonymous_args = 0
 928              		@ link register save eliminated.
 929 0478 80B4     		push	{r7}
 930              		.cfi_def_cfa_offset 4
 931              		.cfi_offset 7, -4
 932 047a 89B0     		sub	sp, sp, #36
 933              		.cfi_def_cfa_offset 40
 934 047c 00AF     		add	r7, sp, #0
 935              		.cfi_def_cfa_register 7
 936 047e F860     		str	r0, [r7, #12]
 937 0480 0B46     		mov	r3, r1
 938 0482 7A60     		str	r2, [r7, #4]
 939 0484 FB72     		strb	r3, [r7, #11]
 700:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     uint32_t regMSWVal;
 701:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     uint32_t len;
 702:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     int i;
 703:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 704:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 705:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Check the arguments.
 706:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 707:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != pui32ResultBuf);
 708:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT((ui32ResVectorLoc > PKA_RAM_BASE) &&
 709:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****            (ui32ResVectorLoc < (PKA_RAM_BASE + PKA_RAM_SIZE)));
 710:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 711:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 712:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Verify that the operation is complete.
 713:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 714:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     if((HWREG(PKA_FUNCTION) & PKA_FUNCTION_RUN) != 0)
 940              		.loc 1 714 0
 941 0486 1F4B     		ldr	r3, .L65
 942 0488 1B68     		ldr	r3, [r3]
 943 048a 03F40043 		and	r3, r3, #32768
 944 048e 002B     		cmp	r3, #0
 945 0490 01D0     		beq	.L59
 715:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 716:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         return (PKA_STATUS_OPERATION_INPRG);
 946              		.loc 1 716 0
 947 0492 0723     		movs	r3, #7
 948 0494 31E0     		b	.L60
 949              	.L59:
 717:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
 718:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 719:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 720:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Get the MSW register value.
 721:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 722:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     regMSWVal = HWREG(PKA_MSW);
 950              		.loc 1 722 0
 951 0496 1C4B     		ldr	r3, .L65+4
 952 0498 1B68     		ldr	r3, [r3]
 953 049a BB61     		str	r3, [r7, #24]
 723:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 724:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 725:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Check to make sure that the result vector is not all zeroes.
 726:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 727:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     if(regMSWVal & PKA_MSW_RESULT_IS_ZERO)
 954              		.loc 1 727 0
 955 049c BB69     		ldr	r3, [r7, #24]
 956 049e 03F40043 		and	r3, r3, #32768
 957 04a2 002B     		cmp	r3, #0
 958 04a4 01D0     		beq	.L61
 728:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 729:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         return (PKA_STATUS_RESULT_0);
 959              		.loc 1 729 0
 960 04a6 0423     		movs	r3, #4
 961 04a8 27E0     		b	.L60
 962              	.L61:
 730:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
 731:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 732:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 733:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Get the length of the result
 734:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 735:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     len = ((regMSWVal & PKA_MSW_MSW_ADDRESS_M) + 1) -
 963              		.loc 1 735 0
 964 04aa BB69     		ldr	r3, [r7, #24]
 965 04ac C3F30A02 		ubfx	r2, r3, #0, #11
 736:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****           ((ui32ResVectorLoc - PKA_RAM_BASE) >> 2);
 966              		.loc 1 736 0
 967 04b0 7B68     		ldr	r3, [r7, #4]
 968 04b2 03F13C43 		add	r3, r3, #-1140850688
 969 04b6 A3F5C043 		sub	r3, r3, #24576
 970 04ba 9B08     		lsrs	r3, r3, #2
 735:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****           ((ui32ResVectorLoc - PKA_RAM_BASE) >> 2);
 971              		.loc 1 735 0
 972 04bc D31A     		subs	r3, r2, r3
 973 04be 0133     		adds	r3, r3, #1
 974 04c0 7B61     		str	r3, [r7, #20]
 737:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 738:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 739:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Check if the provided buffer length is adequate to store the result
 740:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // data.
 741:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 742:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     if(ui8Size < len)
 975              		.loc 1 742 0
 976 04c2 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 977 04c4 7B69     		ldr	r3, [r7, #20]
 978 04c6 9A42     		cmp	r2, r3
 979 04c8 01D2     		bcs	.L62
 743:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 744:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         return (PKA_STATUS_BUF_UNDERFLOW);
 980              		.loc 1 744 0
 981 04ca 0323     		movs	r3, #3
 982 04cc 15E0     		b	.L60
 983              	.L62:
 745:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
 746:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 747:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 748:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Copy the result from vector C into the \e pui32ResultBuf.
 749:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     for(i = 0; i < len; i++)
 984              		.loc 1 749 0
 985 04ce 0023     		movs	r3, #0
 986 04d0 FB61     		str	r3, [r7, #28]
 987 04d2 0DE0     		b	.L63
 988              	.L64:
 750:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 751:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         pui32ResultBuf[i]= HWREG( (ui32ResVectorLoc + 4*i) );
 989              		.loc 1 751 0 discriminator 3
 990 04d4 FB69     		ldr	r3, [r7, #28]
 991 04d6 9B00     		lsls	r3, r3, #2
 992 04d8 FA68     		ldr	r2, [r7, #12]
 993 04da 1344     		add	r3, r3, r2
 994 04dc FA69     		ldr	r2, [r7, #28]
 995 04de 9200     		lsls	r2, r2, #2
 996 04e0 1146     		mov	r1, r2
 997 04e2 7A68     		ldr	r2, [r7, #4]
 998 04e4 0A44     		add	r2, r2, r1
 999 04e6 1268     		ldr	r2, [r2]
 1000 04e8 1A60     		str	r2, [r3]
 749:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 1001              		.loc 1 749 0 discriminator 3
 1002 04ea FB69     		ldr	r3, [r7, #28]
 1003 04ec 0133     		adds	r3, r3, #1
 1004 04ee FB61     		str	r3, [r7, #28]
 1005              	.L63:
 749:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 1006              		.loc 1 749 0 is_stmt 0 discriminator 1
 1007 04f0 FA69     		ldr	r2, [r7, #28]
 1008 04f2 7B69     		ldr	r3, [r7, #20]
 1009 04f4 9A42     		cmp	r2, r3
 1010 04f6 EDD3     		bcc	.L64
 752:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
 753:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 754:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     return (PKA_STATUS_SUCCESS);
 1011              		.loc 1 754 0 is_stmt 1
 1012 04f8 0023     		movs	r3, #0
 1013              	.L60:
 755:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** }
 1014              		.loc 1 755 0
 1015 04fa 1846     		mov	r0, r3
 1016 04fc 2437     		adds	r7, r7, #36
 1017              		.cfi_def_cfa_offset 4
 1018 04fe BD46     		mov	sp, r7
 1019              		.cfi_def_cfa_register 13
 1020              		@ sp needed
 1021 0500 80BC     		pop	{r7}
 1022              		.cfi_restore 7
 1023              		.cfi_def_cfa_offset 0
 1024 0502 7047     		bx	lr
 1025              	.L66:
 1026              		.align	2
 1027              	.L65:
 1028 0504 1C400044 		.word	1140867100
 1029 0508 24400044 		.word	1140867108
 1030              		.cfi_endproc
 1031              	.LFE11:
 1033              		.align	2
 1034              		.global	PKABigNumMultiplyStart
 1035              		.thumb
 1036              		.thumb_func
 1038              	PKABigNumMultiplyStart:
 1039              	.LFB12:
 756:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 757:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
 758:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
 759:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! Starts the big number multiplication.
 760:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
 761:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param pui32Xplicand is the pointer to the buffer containing the big
 762:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! number multiplicand.
 763:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param ui8XplicandSize is the size of the multiplicand in 32-bit word.
 764:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param pui32Xplier is the pointer to the buffer containing the big
 765:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! number multiplier.
 766:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param ui8XplierSize is the size of the multiplier in 32-bit word.
 767:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param pui32ResultVector is the pointer to the result vector location
 768:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! which will be set by this function.
 769:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
 770:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! This function starts the multiplication of the two big numbers.
 771:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
 772:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!\return Returns: 
 773:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_SUCCESS if successful in starting the operation.  
 774:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_OPERATION_INPRG, if the PKA hw module is busy doing
 775:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! some other operation.
 776:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
 777:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
 778:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** tPKAStatus
 779:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** PKABigNumMultiplyStart(uint32_t* pui32Xplicand, uint8_t ui8XplicandSize,
 780:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****                        uint32_t* pui32Xplier, uint8_t ui8XplierSize,
 781:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****                        uint32_t* pui32ResultVector)
 782:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** {
 1040              		.loc 1 782 0
 1041              		.cfi_startproc
 1042              		@ args = 4, pretend = 0, frame = 24
 1043              		@ frame_needed = 1, uses_anonymous_args = 0
 1044              		@ link register save eliminated.
 1045 050c 80B4     		push	{r7}
 1046              		.cfi_def_cfa_offset 4
 1047              		.cfi_offset 7, -4
 1048 050e 87B0     		sub	sp, sp, #28
 1049              		.cfi_def_cfa_offset 32
 1050 0510 00AF     		add	r7, sp, #0
 1051              		.cfi_def_cfa_register 7
 1052 0512 F860     		str	r0, [r7, #12]
 1053 0514 7A60     		str	r2, [r7, #4]
 1054 0516 1A46     		mov	r2, r3
 1055 0518 0B46     		mov	r3, r1
 1056 051a FB72     		strb	r3, [r7, #11]
 1057 051c 1346     		mov	r3, r2
 1058 051e BB72     		strb	r3, [r7, #10]
 783:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     uint32_t offset;
 784:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     int i;
 785:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 786:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 787:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Check for the arguments.
 788:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 789:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != pui32Xplicand);
 790:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != pui32Xplier);
 791:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != pui32ResultVector);
 792:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 793:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     offset = 0;
 1059              		.loc 1 793 0
 1060 0520 0023     		movs	r3, #0
 1061 0522 3B61     		str	r3, [r7, #16]
 794:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 795:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 796:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Make sure no operation is in progress.
 797:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 798:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     if((HWREG(PKA_FUNCTION) & PKA_FUNCTION_RUN) != 0)
 1062              		.loc 1 798 0
 1063 0524 394B     		ldr	r3, .L74
 1064 0526 1B68     		ldr	r3, [r3]
 1065 0528 03F40043 		and	r3, r3, #32768
 1066 052c 002B     		cmp	r3, #0
 1067 052e 01D0     		beq	.L68
 799:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 800:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         return (PKA_STATUS_OPERATION_INPRG);
 1068              		.loc 1 800 0
 1069 0530 0723     		movs	r3, #7
 1070 0532 65E0     		b	.L69
 1071              	.L68:
 801:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
 802:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 803:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 804:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Update the A ptr with the offset address of the PKA RAM location
 805:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // where the multiplicand will be stored.
 806:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 807:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG( (PKA_APTR) ) = offset >> 2;
 1072              		.loc 1 807 0
 1073 0534 364A     		ldr	r2, .L74+4
 1074 0536 3B69     		ldr	r3, [r7, #16]
 1075 0538 9B08     		lsrs	r3, r3, #2
 1076 053a 1360     		str	r3, [r2]
 808:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 809:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 810:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Load the multiplicand in PKA RAM.
 811:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 812:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     for(i = 0; i < ui8XplicandSize; i++)
 1077              		.loc 1 812 0
 1078 053c 0023     		movs	r3, #0
 1079 053e 7B61     		str	r3, [r7, #20]
 1080 0540 12E0     		b	.L70
 1081              	.L71:
 813:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 814:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) = *pui32Xplicand;
 1082              		.loc 1 814 0 discriminator 3
 1083 0542 7B69     		ldr	r3, [r7, #20]
 1084 0544 9B00     		lsls	r3, r3, #2
 1085 0546 1A46     		mov	r2, r3
 1086 0548 3B69     		ldr	r3, [r7, #16]
 1087 054a 1344     		add	r3, r3, r2
 1088 054c 03F18843 		add	r3, r3, #1140850688
 1089 0550 03F5C043 		add	r3, r3, #24576
 1090 0554 1A46     		mov	r2, r3
 1091 0556 FB68     		ldr	r3, [r7, #12]
 1092 0558 1B68     		ldr	r3, [r3]
 1093 055a 1360     		str	r3, [r2]
 815:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         pui32Xplicand++;
 1094              		.loc 1 815 0 discriminator 3
 1095 055c FB68     		ldr	r3, [r7, #12]
 1096 055e 0433     		adds	r3, r3, #4
 1097 0560 FB60     		str	r3, [r7, #12]
 812:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 1098              		.loc 1 812 0 discriminator 3
 1099 0562 7B69     		ldr	r3, [r7, #20]
 1100 0564 0133     		adds	r3, r3, #1
 1101 0566 7B61     		str	r3, [r7, #20]
 1102              	.L70:
 812:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 1103              		.loc 1 812 0 is_stmt 0 discriminator 1
 1104 0568 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 1105 056a 7B69     		ldr	r3, [r7, #20]
 1106 056c 9A42     		cmp	r2, r3
 1107 056e E8DC     		bgt	.L71
 816:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
 817:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 818:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 819:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Determine the offset for the next data.
 820:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 821:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     offset += 4 * (i + (ui8XplicandSize % 2));
 1108              		.loc 1 821 0 is_stmt 1
 1109 0570 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 1110 0572 03F00102 		and	r2, r3, #1
 1111 0576 7B69     		ldr	r3, [r7, #20]
 1112 0578 1344     		add	r3, r3, r2
 1113 057a 9B00     		lsls	r3, r3, #2
 1114 057c 1A46     		mov	r2, r3
 1115 057e 3B69     		ldr	r3, [r7, #16]
 1116 0580 1344     		add	r3, r3, r2
 1117 0582 3B61     		str	r3, [r7, #16]
 822:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 823:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 824:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Update the B ptr with the offset address of the PKA RAM location
 825:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // where the multiplier will be stored.
 826:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 827:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG( (PKA_BPTR) ) = offset >> 2;
 1118              		.loc 1 827 0
 1119 0584 234A     		ldr	r2, .L74+8
 1120 0586 3B69     		ldr	r3, [r7, #16]
 1121 0588 9B08     		lsrs	r3, r3, #2
 1122 058a 1360     		str	r3, [r2]
 828:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 829:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 830:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Load the multiplier in PKA RAM.
 831:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 832:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     for(i = 0; i < ui8XplierSize; i++)
 1123              		.loc 1 832 0
 1124 058c 0023     		movs	r3, #0
 1125 058e 7B61     		str	r3, [r7, #20]
 1126 0590 12E0     		b	.L72
 1127              	.L73:
 833:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 834:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         HWREG( (PKA_RAM_BASE + offset + 4*i) ) = *pui32Xplier;
 1128              		.loc 1 834 0 discriminator 3
 1129 0592 7B69     		ldr	r3, [r7, #20]
 1130 0594 9B00     		lsls	r3, r3, #2
 1131 0596 1A46     		mov	r2, r3
 1132 0598 3B69     		ldr	r3, [r7, #16]
 1133 059a 1344     		add	r3, r3, r2
 1134 059c 03F18843 		add	r3, r3, #1140850688
 1135 05a0 03F5C043 		add	r3, r3, #24576
 1136 05a4 1A46     		mov	r2, r3
 1137 05a6 7B68     		ldr	r3, [r7, #4]
 1138 05a8 1B68     		ldr	r3, [r3]
 1139 05aa 1360     		str	r3, [r2]
 835:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         pui32Xplier++;
 1140              		.loc 1 835 0 discriminator 3
 1141 05ac 7B68     		ldr	r3, [r7, #4]
 1142 05ae 0433     		adds	r3, r3, #4
 1143 05b0 7B60     		str	r3, [r7, #4]
 832:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 1144              		.loc 1 832 0 discriminator 3
 1145 05b2 7B69     		ldr	r3, [r7, #20]
 1146 05b4 0133     		adds	r3, r3, #1
 1147 05b6 7B61     		str	r3, [r7, #20]
 1148              	.L72:
 832:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 1149              		.loc 1 832 0 is_stmt 0 discriminator 1
 1150 05b8 BA7A     		ldrb	r2, [r7, #10]	@ zero_extendqisi2
 1151 05ba 7B69     		ldr	r3, [r7, #20]
 1152 05bc 9A42     		cmp	r2, r3
 1153 05be E8DC     		bgt	.L73
 836:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
 837:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 838:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 839:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Determine the offset for the next data.
 840:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 841:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     offset += 4 * (i + (ui8XplierSize % 2));
 1154              		.loc 1 841 0 is_stmt 1
 1155 05c0 BB7A     		ldrb	r3, [r7, #10]	@ zero_extendqisi2
 1156 05c2 03F00102 		and	r2, r3, #1
 1157 05c6 7B69     		ldr	r3, [r7, #20]
 1158 05c8 1344     		add	r3, r3, r2
 1159 05ca 9B00     		lsls	r3, r3, #2
 1160 05cc 1A46     		mov	r2, r3
 1161 05ce 3B69     		ldr	r3, [r7, #16]
 1162 05d0 1344     		add	r3, r3, r2
 1163 05d2 3B61     		str	r3, [r7, #16]
 842:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 843:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 844:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Copy the result vector address location.
 845:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 846:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     *pui32ResultVector = PKA_RAM_BASE + offset;
 1164              		.loc 1 846 0
 1165 05d4 3B69     		ldr	r3, [r7, #16]
 1166 05d6 03F18843 		add	r3, r3, #1140850688
 1167 05da 03F5C043 		add	r3, r3, #24576
 1168 05de 3A6A     		ldr	r2, [r7, #32]
 1169 05e0 1360     		str	r3, [r2]
 847:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 848:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 849:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Load C ptr with the result location in PKA RAM.
 850:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 851:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG( (PKA_CPTR) ) = offset >> 2;
 1170              		.loc 1 851 0
 1171 05e2 0D4A     		ldr	r2, .L74+12
 1172 05e4 3B69     		ldr	r3, [r7, #16]
 1173 05e6 9B08     		lsrs	r3, r3, #2
 1174 05e8 1360     		str	r3, [r2]
 852:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 853:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 854:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Load the respective length registers.
 855:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 856:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG( (PKA_ALENGTH) ) = ui8XplicandSize;
 1175              		.loc 1 856 0
 1176 05ea 0C4A     		ldr	r2, .L74+16
 1177 05ec FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 1178 05ee 1360     		str	r3, [r2]
 857:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG( (PKA_BLENGTH) ) = ui8XplierSize;
 1179              		.loc 1 857 0
 1180 05f0 0B4A     		ldr	r2, .L74+20
 1181 05f2 BB7A     		ldrb	r3, [r7, #10]	@ zero_extendqisi2
 1182 05f4 1360     		str	r3, [r2]
 858:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 859:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 860:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Set the PKA function to the multiplication and start it.
 861:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 862:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG( (PKA_FUNCTION) ) = (PKA_FUNCTION_RUN | PKA_FUNCTION_MULTIPLY);
 1183              		.loc 1 862 0
 1184 05f6 054B     		ldr	r3, .L74
 1185 05f8 48F20102 		movw	r2, #32769
 1186 05fc 1A60     		str	r2, [r3]
 863:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 864:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     return (PKA_STATUS_SUCCESS);
 1187              		.loc 1 864 0
 1188 05fe 0023     		movs	r3, #0
 1189              	.L69:
 865:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** }
 1190              		.loc 1 865 0
 1191 0600 1846     		mov	r0, r3
 1192 0602 1C37     		adds	r7, r7, #28
 1193              		.cfi_def_cfa_offset 4
 1194 0604 BD46     		mov	sp, r7
 1195              		.cfi_def_cfa_register 13
 1196              		@ sp needed
 1197 0606 80BC     		pop	{r7}
 1198              		.cfi_restore 7
 1199              		.cfi_def_cfa_offset 0
 1200 0608 7047     		bx	lr
 1201              	.L75:
 1202 060a 00BF     		.align	2
 1203              	.L74:
 1204 060c 1C400044 		.word	1140867100
 1205 0610 00400044 		.word	1140867072
 1206 0614 04400044 		.word	1140867076
 1207 0618 08400044 		.word	1140867080
 1208 061c 10400044 		.word	1140867088
 1209 0620 14400044 		.word	1140867092
 1210              		.cfi_endproc
 1211              	.LFE12:
 1213              		.align	2
 1214              		.global	PKABigNumMultGetResult
 1215              		.thumb
 1216              		.thumb_func
 1218              	PKABigNumMultGetResult:
 1219              	.LFB13:
 866:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 867:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
 868:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
 869:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! Gets the results of the big number multiplication.
 870:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
 871:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param pui32ResultBuf is the pointer to buffer where the result needs to be
 872:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! stored.
 873:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param pui32Len is the address of the variable containing the length of the
 874:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! buffer.  After the operation, the actual length of the resultant is stored
 875:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! at this address.
 876:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param ui32ResVectorLoc is the address of the result location which
 877:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! was provided by the start function \sa PKABigNumMultiplyStart().
 878:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
 879:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! This function gets the result of the multiplication of two big numbers
 880:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! operation previously started using the function \sa
 881:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! PKABigNumMultiplyStart().
 882:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
 883:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \return Returns:
 884:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_SUCCESS if the operation is successful. 
 885:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_OPERATION_INPRG, if the PKA hw module is busy performing 
 886:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! the operation.
 887:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_RESULT_0 if the result is all zeroes.
 888:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_FAILURE if the operation is not successful.
 889:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_BUF_UNDERFLOW if the length of the provided buffer is less
 890:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! then the length of the result. 
 891:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
 892:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
 893:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** tPKAStatus
 894:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** PKABigNumMultGetResult(uint32_t* pui32ResultBuf, uint32_t* pui32Len,
 895:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****                        uint32_t ui32ResVectorLoc)
 896:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** {
 1220              		.loc 1 896 0
 1221              		.cfi_startproc
 1222              		@ args = 0, pretend = 0, frame = 32
 1223              		@ frame_needed = 1, uses_anonymous_args = 0
 1224              		@ link register save eliminated.
 1225 0624 80B4     		push	{r7}
 1226              		.cfi_def_cfa_offset 4
 1227              		.cfi_offset 7, -4
 1228 0626 89B0     		sub	sp, sp, #36
 1229              		.cfi_def_cfa_offset 40
 1230 0628 00AF     		add	r7, sp, #0
 1231              		.cfi_def_cfa_register 7
 1232 062a F860     		str	r0, [r7, #12]
 1233 062c B960     		str	r1, [r7, #8]
 1234 062e 7A60     		str	r2, [r7, #4]
 897:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     uint32_t regMSWVal;
 898:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     uint32_t len;
 899:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     int i;
 900:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 901:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 902:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Check for arguments.
 903:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 904:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != pui32ResultBuf);
 905:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != pui32Len);
 906:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT((ui32ResVectorLoc > PKA_RAM_BASE) &&
 907:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****            (ui32ResVectorLoc < (PKA_RAM_BASE + PKA_RAM_SIZE)));
 908:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 909:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 910:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Verify that the operation is complete.
 911:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 912:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     if((HWREG(PKA_FUNCTION) & PKA_FUNCTION_RUN) != 0)
 1235              		.loc 1 912 0
 1236 0630 214B     		ldr	r3, .L83
 1237 0632 1B68     		ldr	r3, [r3]
 1238 0634 03F40043 		and	r3, r3, #32768
 1239 0638 002B     		cmp	r3, #0
 1240 063a 01D0     		beq	.L77
 913:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 914:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         return (PKA_STATUS_OPERATION_INPRG);
 1241              		.loc 1 914 0
 1242 063c 0723     		movs	r3, #7
 1243 063e 36E0     		b	.L78
 1244              	.L77:
 915:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
 916:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 917:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 918:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Get the MSW register value.
 919:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 920:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     regMSWVal = HWREG(PKA_MSW);
 1245              		.loc 1 920 0
 1246 0640 1E4B     		ldr	r3, .L83+4
 1247 0642 1B68     		ldr	r3, [r3]
 1248 0644 BB61     		str	r3, [r7, #24]
 921:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 922:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 923:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Check to make sure that the result vector is not all zeroes.
 924:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 925:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     if(regMSWVal & PKA_MSW_RESULT_IS_ZERO)
 1249              		.loc 1 925 0
 1250 0646 BB69     		ldr	r3, [r7, #24]
 1251 0648 03F40043 		and	r3, r3, #32768
 1252 064c 002B     		cmp	r3, #0
 1253 064e 01D0     		beq	.L79
 926:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 927:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         return (PKA_STATUS_RESULT_0);
 1254              		.loc 1 927 0
 1255 0650 0423     		movs	r3, #4
 1256 0652 2CE0     		b	.L78
 1257              	.L79:
 928:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
 929:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 930:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 931:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Get the length of the result.
 932:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 933:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     len = ((regMSWVal & PKA_MSW_MSW_ADDRESS_M) + 1) -
 1258              		.loc 1 933 0
 1259 0654 BB69     		ldr	r3, [r7, #24]
 1260 0656 C3F30A02 		ubfx	r2, r3, #0, #11
 934:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****           ((ui32ResVectorLoc - PKA_RAM_BASE) >> 2);
 1261              		.loc 1 934 0
 1262 065a 7B68     		ldr	r3, [r7, #4]
 1263 065c 03F13C43 		add	r3, r3, #-1140850688
 1264 0660 A3F5C043 		sub	r3, r3, #24576
 1265 0664 9B08     		lsrs	r3, r3, #2
 933:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****           ((ui32ResVectorLoc - PKA_RAM_BASE) >> 2);
 1266              		.loc 1 933 0
 1267 0666 D31A     		subs	r3, r2, r3
 1268 0668 0133     		adds	r3, r3, #1
 1269 066a 7B61     		str	r3, [r7, #20]
 935:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 936:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 937:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Make sure that the length of the supplied result buffer is adequate
 938:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // to store the resultant.
 939:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 940:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     if(*pui32Len < len)
 1270              		.loc 1 940 0
 1271 066c BB68     		ldr	r3, [r7, #8]
 1272 066e 1A68     		ldr	r2, [r3]
 1273 0670 7B69     		ldr	r3, [r7, #20]
 1274 0672 9A42     		cmp	r2, r3
 1275 0674 01D2     		bcs	.L80
 941:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 942:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         return (PKA_STATUS_BUF_UNDERFLOW);
 1276              		.loc 1 942 0
 1277 0676 0323     		movs	r3, #3
 1278 0678 19E0     		b	.L78
 1279              	.L80:
 943:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
 944:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 945:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 946:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Copy the resultant length.
 947:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 948:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     *pui32Len = len;
 1280              		.loc 1 948 0
 1281 067a BB68     		ldr	r3, [r7, #8]
 1282 067c 7A69     		ldr	r2, [r7, #20]
 1283 067e 1A60     		str	r2, [r3]
 949:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 950:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 951:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Copy the result from vector C into the pResult.
 952:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 953:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     for(i = 0; i < *pui32Len; i++)
 1284              		.loc 1 953 0
 1285 0680 0023     		movs	r3, #0
 1286 0682 FB61     		str	r3, [r7, #28]
 1287 0684 0DE0     		b	.L81
 1288              	.L82:
 954:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 955:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         pui32ResultBuf[i]= HWREG( (ui32ResVectorLoc + 4*i) );
 1289              		.loc 1 955 0 discriminator 3
 1290 0686 FB69     		ldr	r3, [r7, #28]
 1291 0688 9B00     		lsls	r3, r3, #2
 1292 068a FA68     		ldr	r2, [r7, #12]
 1293 068c 1344     		add	r3, r3, r2
 1294 068e FA69     		ldr	r2, [r7, #28]
 1295 0690 9200     		lsls	r2, r2, #2
 1296 0692 1146     		mov	r1, r2
 1297 0694 7A68     		ldr	r2, [r7, #4]
 1298 0696 0A44     		add	r2, r2, r1
 1299 0698 1268     		ldr	r2, [r2]
 1300 069a 1A60     		str	r2, [r3]
 953:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 1301              		.loc 1 953 0 discriminator 3
 1302 069c FB69     		ldr	r3, [r7, #28]
 1303 069e 0133     		adds	r3, r3, #1
 1304 06a0 FB61     		str	r3, [r7, #28]
 1305              	.L81:
 953:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 1306              		.loc 1 953 0 is_stmt 0 discriminator 1
 1307 06a2 BB68     		ldr	r3, [r7, #8]
 1308 06a4 1A68     		ldr	r2, [r3]
 1309 06a6 FB69     		ldr	r3, [r7, #28]
 1310 06a8 9A42     		cmp	r2, r3
 1311 06aa ECD8     		bhi	.L82
 956:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
 957:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 958:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     return (PKA_STATUS_SUCCESS);
 1312              		.loc 1 958 0 is_stmt 1
 1313 06ac 0023     		movs	r3, #0
 1314              	.L78:
 959:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** }
 1315              		.loc 1 959 0
 1316 06ae 1846     		mov	r0, r3
 1317 06b0 2437     		adds	r7, r7, #36
 1318              		.cfi_def_cfa_offset 4
 1319 06b2 BD46     		mov	sp, r7
 1320              		.cfi_def_cfa_register 13
 1321              		@ sp needed
 1322 06b4 80BC     		pop	{r7}
 1323              		.cfi_restore 7
 1324              		.cfi_def_cfa_offset 0
 1325 06b6 7047     		bx	lr
 1326              	.L84:
 1327              		.align	2
 1328              	.L83:
 1329 06b8 1C400044 		.word	1140867100
 1330 06bc 24400044 		.word	1140867108
 1331              		.cfi_endproc
 1332              	.LFE13:
 1334              		.align	2
 1335              		.global	PKABigNumAddStart
 1336              		.thumb
 1337              		.thumb_func
 1339              	PKABigNumAddStart:
 1340              	.LFB14:
 960:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 961:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
 962:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
 963:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! Starts the addition of two big number.
 964:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
 965:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param pui32BN1 is the pointer to the buffer containing the first
 966:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! big mumber.
 967:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param ui8BN1Size is the size of the first big number in 32-bit word.
 968:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param pui32BN2 is the pointer to the buffer containing the second
 969:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! big number.
 970:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param ui8BN2Size is the size of the second big number in 32-bit word.
 971:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param pui32ResultVector is the pointer to the result vector location
 972:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! which will be set by this function.
 973:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
 974:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! This function starts the addition of the two big numbers.
 975:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
 976:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!\return Returns: 
 977:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_SUCCESS if successful in starting the operation.  
 978:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_OPERATION_INPRG, if the PKA hw module is busy doing
 979:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! some other operation.
 980:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
 981:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
 982:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** tPKAStatus
 983:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** PKABigNumAddStart(uint32_t* pui32BN1, uint8_t ui8BN1Size,
 984:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****                   uint32_t* pui32BN2, uint8_t ui8BN2Size,
 985:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****                   uint32_t* pui32ResultVector)
 986:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** {
 1341              		.loc 1 986 0
 1342              		.cfi_startproc
 1343              		@ args = 4, pretend = 0, frame = 24
 1344              		@ frame_needed = 1, uses_anonymous_args = 0
 1345              		@ link register save eliminated.
 1346 06c0 80B4     		push	{r7}
 1347              		.cfi_def_cfa_offset 4
 1348              		.cfi_offset 7, -4
 1349 06c2 87B0     		sub	sp, sp, #28
 1350              		.cfi_def_cfa_offset 32
 1351 06c4 00AF     		add	r7, sp, #0
 1352              		.cfi_def_cfa_register 7
 1353 06c6 F860     		str	r0, [r7, #12]
 1354 06c8 7A60     		str	r2, [r7, #4]
 1355 06ca 1A46     		mov	r2, r3
 1356 06cc 0B46     		mov	r3, r1
 1357 06ce FB72     		strb	r3, [r7, #11]
 1358 06d0 1346     		mov	r3, r2
 1359 06d2 BB72     		strb	r3, [r7, #10]
 987:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     uint32_t offset;
 988:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     int i;
 989:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 990:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 991:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Check for arguments.
 992:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
 993:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != pui32BN1);
 994:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != pui32BN2);
 995:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != pui32ResultVector);
 996:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 997:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     offset = 0;
 1360              		.loc 1 997 0
 1361 06d4 0023     		movs	r3, #0
 1362 06d6 3B61     		str	r3, [r7, #16]
 998:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
 999:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1000:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Make sure no operation is in progress.
1001:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1002:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     if((HWREG(PKA_FUNCTION) & PKA_FUNCTION_RUN) != 0)
 1363              		.loc 1 1002 0
 1364 06d8 394B     		ldr	r3, .L92
 1365 06da 1B68     		ldr	r3, [r3]
 1366 06dc 03F40043 		and	r3, r3, #32768
 1367 06e0 002B     		cmp	r3, #0
 1368 06e2 01D0     		beq	.L86
1003:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
1004:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         return (PKA_STATUS_OPERATION_INPRG);
 1369              		.loc 1 1004 0
 1370 06e4 0723     		movs	r3, #7
 1371 06e6 65E0     		b	.L87
 1372              	.L86:
1005:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
1006:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1007:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1008:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Update the A ptr with the offset address of the PKA RAM location
1009:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // where the big number 1 will be stored.
1010:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1011:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG( (PKA_APTR) ) = offset >> 2;
 1373              		.loc 1 1011 0
 1374 06e8 364A     		ldr	r2, .L92+4
 1375 06ea 3B69     		ldr	r3, [r7, #16]
 1376 06ec 9B08     		lsrs	r3, r3, #2
 1377 06ee 1360     		str	r3, [r2]
1012:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1013:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1014:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Load the big number 1 in PKA RAM.
1015:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1016:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     for(i = 0; i < ui8BN1Size; i++)
 1378              		.loc 1 1016 0
 1379 06f0 0023     		movs	r3, #0
 1380 06f2 7B61     		str	r3, [r7, #20]
 1381 06f4 12E0     		b	.L88
 1382              	.L89:
1017:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
1018:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) = pui32BN1[i];
 1383              		.loc 1 1018 0 discriminator 3
 1384 06f6 7B69     		ldr	r3, [r7, #20]
 1385 06f8 9B00     		lsls	r3, r3, #2
 1386 06fa 1A46     		mov	r2, r3
 1387 06fc 3B69     		ldr	r3, [r7, #16]
 1388 06fe 1344     		add	r3, r3, r2
 1389 0700 03F18843 		add	r3, r3, #1140850688
 1390 0704 03F5C043 		add	r3, r3, #24576
 1391 0708 1946     		mov	r1, r3
 1392 070a 7B69     		ldr	r3, [r7, #20]
 1393 070c 9B00     		lsls	r3, r3, #2
 1394 070e FA68     		ldr	r2, [r7, #12]
 1395 0710 1344     		add	r3, r3, r2
 1396 0712 1B68     		ldr	r3, [r3]
 1397 0714 0B60     		str	r3, [r1]
1016:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 1398              		.loc 1 1016 0 discriminator 3
 1399 0716 7B69     		ldr	r3, [r7, #20]
 1400 0718 0133     		adds	r3, r3, #1
 1401 071a 7B61     		str	r3, [r7, #20]
 1402              	.L88:
1016:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 1403              		.loc 1 1016 0 is_stmt 0 discriminator 1
 1404 071c FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 1405 071e 7B69     		ldr	r3, [r7, #20]
 1406 0720 9A42     		cmp	r2, r3
 1407 0722 E8DC     		bgt	.L89
1019:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
1020:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1021:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1022:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Determine the offset in PKA RAM for the next data.
1023:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1024:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     offset += 4 * (i + (ui8BN1Size % 2));
 1408              		.loc 1 1024 0 is_stmt 1
 1409 0724 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 1410 0726 03F00102 		and	r2, r3, #1
 1411 072a 7B69     		ldr	r3, [r7, #20]
 1412 072c 1344     		add	r3, r3, r2
 1413 072e 9B00     		lsls	r3, r3, #2
 1414 0730 1A46     		mov	r2, r3
 1415 0732 3B69     		ldr	r3, [r7, #16]
 1416 0734 1344     		add	r3, r3, r2
 1417 0736 3B61     		str	r3, [r7, #16]
1025:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1026:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1027:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Update the B ptr with the offset address of the PKA RAM location
1028:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // where the big number 2 will be stored.
1029:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1030:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG( (PKA_BPTR) ) = offset >> 2;
 1418              		.loc 1 1030 0
 1419 0738 234A     		ldr	r2, .L92+8
 1420 073a 3B69     		ldr	r3, [r7, #16]
 1421 073c 9B08     		lsrs	r3, r3, #2
 1422 073e 1360     		str	r3, [r2]
1031:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1032:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1033:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Load the big number 2 in PKA RAM.
1034:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1035:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     for(i = 0; i < ui8BN2Size; i++)
 1423              		.loc 1 1035 0
 1424 0740 0023     		movs	r3, #0
 1425 0742 7B61     		str	r3, [r7, #20]
 1426 0744 12E0     		b	.L90
 1427              	.L91:
1036:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
1037:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) = pui32BN2[i];
 1428              		.loc 1 1037 0 discriminator 3
 1429 0746 7B69     		ldr	r3, [r7, #20]
 1430 0748 9B00     		lsls	r3, r3, #2
 1431 074a 1A46     		mov	r2, r3
 1432 074c 3B69     		ldr	r3, [r7, #16]
 1433 074e 1344     		add	r3, r3, r2
 1434 0750 03F18843 		add	r3, r3, #1140850688
 1435 0754 03F5C043 		add	r3, r3, #24576
 1436 0758 1946     		mov	r1, r3
 1437 075a 7B69     		ldr	r3, [r7, #20]
 1438 075c 9B00     		lsls	r3, r3, #2
 1439 075e 7A68     		ldr	r2, [r7, #4]
 1440 0760 1344     		add	r3, r3, r2
 1441 0762 1B68     		ldr	r3, [r3]
 1442 0764 0B60     		str	r3, [r1]
1035:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 1443              		.loc 1 1035 0 discriminator 3
 1444 0766 7B69     		ldr	r3, [r7, #20]
 1445 0768 0133     		adds	r3, r3, #1
 1446 076a 7B61     		str	r3, [r7, #20]
 1447              	.L90:
1035:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 1448              		.loc 1 1035 0 is_stmt 0 discriminator 1
 1449 076c BA7A     		ldrb	r2, [r7, #10]	@ zero_extendqisi2
 1450 076e 7B69     		ldr	r3, [r7, #20]
 1451 0770 9A42     		cmp	r2, r3
 1452 0772 E8DC     		bgt	.L91
1038:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
1039:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1040:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1041:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Determine the offset in PKA RAM for the next data.
1042:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1043:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     offset += 4 * (i + (ui8BN2Size % 2));
 1453              		.loc 1 1043 0 is_stmt 1
 1454 0774 BB7A     		ldrb	r3, [r7, #10]	@ zero_extendqisi2
 1455 0776 03F00102 		and	r2, r3, #1
 1456 077a 7B69     		ldr	r3, [r7, #20]
 1457 077c 1344     		add	r3, r3, r2
 1458 077e 9B00     		lsls	r3, r3, #2
 1459 0780 1A46     		mov	r2, r3
 1460 0782 3B69     		ldr	r3, [r7, #16]
 1461 0784 1344     		add	r3, r3, r2
 1462 0786 3B61     		str	r3, [r7, #16]
1044:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1045:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1046:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Copy the result vector address location.
1047:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1048:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     *pui32ResultVector = PKA_RAM_BASE + offset;
 1463              		.loc 1 1048 0
 1464 0788 3B69     		ldr	r3, [r7, #16]
 1465 078a 03F18843 		add	r3, r3, #1140850688
 1466 078e 03F5C043 		add	r3, r3, #24576
 1467 0792 3A6A     		ldr	r2, [r7, #32]
 1468 0794 1360     		str	r3, [r2]
1049:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1050:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1051:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Load C ptr with the result location in PKA RAM.
1052:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1053:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG( (PKA_CPTR) ) = offset >> 2;
 1469              		.loc 1 1053 0
 1470 0796 0D4A     		ldr	r2, .L92+12
 1471 0798 3B69     		ldr	r3, [r7, #16]
 1472 079a 9B08     		lsrs	r3, r3, #2
 1473 079c 1360     		str	r3, [r2]
1054:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1055:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1056:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Load respective length registers.
1057:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1058:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG( (PKA_ALENGTH) ) = ui8BN1Size;
 1474              		.loc 1 1058 0
 1475 079e 0C4A     		ldr	r2, .L92+16
 1476 07a0 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 1477 07a2 1360     		str	r3, [r2]
1059:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG( (PKA_BLENGTH) ) = ui8BN2Size;
 1478              		.loc 1 1059 0
 1479 07a4 0B4A     		ldr	r2, .L92+20
 1480 07a6 BB7A     		ldrb	r3, [r7, #10]	@ zero_extendqisi2
 1481 07a8 1360     		str	r3, [r2]
1060:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1061:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1062:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Set the function for the add operation and start the operation.
1063:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1064:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG( (PKA_FUNCTION) ) = (PKA_FUNCTION_RUN | PKA_FUNCTION_ADD);
 1482              		.loc 1 1064 0
 1483 07aa 054B     		ldr	r3, .L92
 1484 07ac 48F21002 		movw	r2, #32784
 1485 07b0 1A60     		str	r2, [r3]
1065:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1066:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     return (PKA_STATUS_SUCCESS);
 1486              		.loc 1 1066 0
 1487 07b2 0023     		movs	r3, #0
 1488              	.L87:
1067:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** }
 1489              		.loc 1 1067 0
 1490 07b4 1846     		mov	r0, r3
 1491 07b6 1C37     		adds	r7, r7, #28
 1492              		.cfi_def_cfa_offset 4
 1493 07b8 BD46     		mov	sp, r7
 1494              		.cfi_def_cfa_register 13
 1495              		@ sp needed
 1496 07ba 80BC     		pop	{r7}
 1497              		.cfi_restore 7
 1498              		.cfi_def_cfa_offset 0
 1499 07bc 7047     		bx	lr
 1500              	.L93:
 1501 07be 00BF     		.align	2
 1502              	.L92:
 1503 07c0 1C400044 		.word	1140867100
 1504 07c4 00400044 		.word	1140867072
 1505 07c8 04400044 		.word	1140867076
 1506 07cc 08400044 		.word	1140867080
 1507 07d0 10400044 		.word	1140867088
 1508 07d4 14400044 		.word	1140867092
 1509              		.cfi_endproc
 1510              	.LFE14:
 1512              		.align	2
 1513              		.global	PKABigNumAddGetResult
 1514              		.thumb
 1515              		.thumb_func
 1517              	PKABigNumAddGetResult:
 1518              	.LFB15:
1068:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1069:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
1070:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
1071:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! Gets the result of the addition operation on two big number.
1072:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
1073:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param pui32ResultBuf is the pointer to buffer where the result
1074:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! needs to be stored.
1075:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param pui32Len is the address of the variable containing the length of
1076:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! the buffer.  After the operation the actual length of the resultant is
1077:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! stored at this address.
1078:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param ui32ResVectorLoc is the address of the result location which
1079:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! was provided by the start function \sa PKABigNumAddStart().
1080:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
1081:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! This function gets the result of the addition operation on two big numbers,
1082:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! previously started using the function \sa PKABigNumAddStart().
1083:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
1084:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \return Returns:
1085:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_SUCCESS if the operation is successful. 
1086:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_OPERATION_INPRG, if the PKA hw module is busy performing 
1087:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! the operation.
1088:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_RESULT_0 if the result is all zeroes.
1089:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_FAILURE if the operation is not successful.
1090:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_BUF_UNDERFLOW if the length of the provided buffer is less
1091:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! then the length of the result. 
1092:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
1093:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
1094:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** tPKAStatus
1095:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** PKABigNumAddGetResult(uint32_t* pui32ResultBuf, uint32_t* pui32Len,
1096:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****                       uint32_t ui32ResVectorLoc)
1097:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** {
 1519              		.loc 1 1097 0
 1520              		.cfi_startproc
 1521              		@ args = 0, pretend = 0, frame = 32
 1522              		@ frame_needed = 1, uses_anonymous_args = 0
 1523              		@ link register save eliminated.
 1524 07d8 80B4     		push	{r7}
 1525              		.cfi_def_cfa_offset 4
 1526              		.cfi_offset 7, -4
 1527 07da 89B0     		sub	sp, sp, #36
 1528              		.cfi_def_cfa_offset 40
 1529 07dc 00AF     		add	r7, sp, #0
 1530              		.cfi_def_cfa_register 7
 1531 07de F860     		str	r0, [r7, #12]
 1532 07e0 B960     		str	r1, [r7, #8]
 1533 07e2 7A60     		str	r2, [r7, #4]
1098:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     uint32_t regMSWVal;
1099:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     uint32_t len;
1100:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     int i;
1101:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1102:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1103:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Check for the arguments.
1104:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1105:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != pui32ResultBuf);
1106:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != pui32Len);
1107:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT((ui32ResVectorLoc > PKA_RAM_BASE) &&
1108:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****            (ui32ResVectorLoc < (PKA_RAM_BASE + PKA_RAM_SIZE)));
1109:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1110:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1111:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Verify that the operation is complete.
1112:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1113:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     if((HWREG(PKA_FUNCTION) & PKA_FUNCTION_RUN) != 0)
 1534              		.loc 1 1113 0
 1535 07e4 214B     		ldr	r3, .L101
 1536 07e6 1B68     		ldr	r3, [r3]
 1537 07e8 03F40043 		and	r3, r3, #32768
 1538 07ec 002B     		cmp	r3, #0
 1539 07ee 01D0     		beq	.L95
1114:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
1115:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         return (PKA_STATUS_OPERATION_INPRG);
 1540              		.loc 1 1115 0
 1541 07f0 0723     		movs	r3, #7
 1542 07f2 36E0     		b	.L96
 1543              	.L95:
1116:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
1117:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1118:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1119:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Get the MSW register value.
1120:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1121:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     regMSWVal = HWREG(PKA_MSW);
 1544              		.loc 1 1121 0
 1545 07f4 1E4B     		ldr	r3, .L101+4
 1546 07f6 1B68     		ldr	r3, [r3]
 1547 07f8 BB61     		str	r3, [r7, #24]
1122:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1123:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1124:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Check to make sure that the result vector is not all zeroes.
1125:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1126:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     if(regMSWVal & PKA_MSW_RESULT_IS_ZERO)
 1548              		.loc 1 1126 0
 1549 07fa BB69     		ldr	r3, [r7, #24]
 1550 07fc 03F40043 		and	r3, r3, #32768
 1551 0800 002B     		cmp	r3, #0
 1552 0802 01D0     		beq	.L97
1127:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
1128:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         return (PKA_STATUS_RESULT_0);
 1553              		.loc 1 1128 0
 1554 0804 0423     		movs	r3, #4
 1555 0806 2CE0     		b	.L96
 1556              	.L97:
1129:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
1130:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1131:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1132:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Get the length of the result.
1133:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1134:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     len = ((regMSWVal & PKA_MSW_MSW_ADDRESS_M) + 1) -
 1557              		.loc 1 1134 0
 1558 0808 BB69     		ldr	r3, [r7, #24]
 1559 080a C3F30A02 		ubfx	r2, r3, #0, #11
1135:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****           ((ui32ResVectorLoc - PKA_RAM_BASE) >> 2);
 1560              		.loc 1 1135 0
 1561 080e 7B68     		ldr	r3, [r7, #4]
 1562 0810 03F13C43 		add	r3, r3, #-1140850688
 1563 0814 A3F5C043 		sub	r3, r3, #24576
 1564 0818 9B08     		lsrs	r3, r3, #2
1134:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****           ((ui32ResVectorLoc - PKA_RAM_BASE) >> 2);
 1565              		.loc 1 1134 0
 1566 081a D31A     		subs	r3, r2, r3
 1567 081c 0133     		adds	r3, r3, #1
 1568 081e 7B61     		str	r3, [r7, #20]
1136:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1137:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1138:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Make sure that the supplied result buffer is adequate to store the
1139:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // resultant data.
1140:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1141:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     if(*pui32Len < len)
 1569              		.loc 1 1141 0
 1570 0820 BB68     		ldr	r3, [r7, #8]
 1571 0822 1A68     		ldr	r2, [r3]
 1572 0824 7B69     		ldr	r3, [r7, #20]
 1573 0826 9A42     		cmp	r2, r3
 1574 0828 01D2     		bcs	.L98
1142:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
1143:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         return (PKA_STATUS_BUF_UNDERFLOW);
 1575              		.loc 1 1143 0
 1576 082a 0323     		movs	r3, #3
 1577 082c 19E0     		b	.L96
 1578              	.L98:
1144:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
1145:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1146:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1147:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Copy the length.
1148:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1149:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     *pui32Len = len;
 1579              		.loc 1 1149 0
 1580 082e BB68     		ldr	r3, [r7, #8]
 1581 0830 7A69     		ldr	r2, [r7, #20]
 1582 0832 1A60     		str	r2, [r3]
1150:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1151:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1152:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Copy the result from vector C into the provided buffer.
1153:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     for(i = 0; i < *pui32Len; i++)
 1583              		.loc 1 1153 0
 1584 0834 0023     		movs	r3, #0
 1585 0836 FB61     		str	r3, [r7, #28]
 1586 0838 0DE0     		b	.L99
 1587              	.L100:
1154:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
1155:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         pui32ResultBuf[i] = HWREG( (ui32ResVectorLoc +  4*i) );
 1588              		.loc 1 1155 0 discriminator 3
 1589 083a FB69     		ldr	r3, [r7, #28]
 1590 083c 9B00     		lsls	r3, r3, #2
 1591 083e FA68     		ldr	r2, [r7, #12]
 1592 0840 1344     		add	r3, r3, r2
 1593 0842 FA69     		ldr	r2, [r7, #28]
 1594 0844 9200     		lsls	r2, r2, #2
 1595 0846 1146     		mov	r1, r2
 1596 0848 7A68     		ldr	r2, [r7, #4]
 1597 084a 0A44     		add	r2, r2, r1
 1598 084c 1268     		ldr	r2, [r2]
 1599 084e 1A60     		str	r2, [r3]
1153:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 1600              		.loc 1 1153 0 discriminator 3
 1601 0850 FB69     		ldr	r3, [r7, #28]
 1602 0852 0133     		adds	r3, r3, #1
 1603 0854 FB61     		str	r3, [r7, #28]
 1604              	.L99:
1153:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 1605              		.loc 1 1153 0 is_stmt 0 discriminator 1
 1606 0856 BB68     		ldr	r3, [r7, #8]
 1607 0858 1A68     		ldr	r2, [r3]
 1608 085a FB69     		ldr	r3, [r7, #28]
 1609 085c 9A42     		cmp	r2, r3
 1610 085e ECD8     		bhi	.L100
1156:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
1157:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1158:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     return (PKA_STATUS_SUCCESS);
 1611              		.loc 1 1158 0 is_stmt 1
 1612 0860 0023     		movs	r3, #0
 1613              	.L96:
1159:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** }
 1614              		.loc 1 1159 0
 1615 0862 1846     		mov	r0, r3
 1616 0864 2437     		adds	r7, r7, #36
 1617              		.cfi_def_cfa_offset 4
 1618 0866 BD46     		mov	sp, r7
 1619              		.cfi_def_cfa_register 13
 1620              		@ sp needed
 1621 0868 80BC     		pop	{r7}
 1622              		.cfi_restore 7
 1623              		.cfi_def_cfa_offset 0
 1624 086a 7047     		bx	lr
 1625              	.L102:
 1626              		.align	2
 1627              	.L101:
 1628 086c 1C400044 		.word	1140867100
 1629 0870 24400044 		.word	1140867108
 1630              		.cfi_endproc
 1631              	.LFE15:
 1633              		.align	2
 1634              		.global	PKAECCMultiplyStart
 1635              		.thumb
 1636              		.thumb_func
 1638              	PKAECCMultiplyStart:
 1639              	.LFB16:
1160:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1161:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
1162:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
1163:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! Starts ECC Multiplication.
1164:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
1165:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param pui32Scalar is pointer to the buffer containing the scalar
1166:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! value to be multiplied.
1167:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param ptEcPt is the pointer to the structure containing the
1168:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! elliptic curve point to be multiplied.  The point should be on the given
1169:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! curve.
1170:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param ptCurve is the pointer to the structure containing the curve
1171:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! info.
1172:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param pui32ResultVector is the pointer to the result vector location
1173:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! which will be set by this function.
1174:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
1175:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! This function starts the Elliptical curve cryptography (ECC) point
1176:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! multiplication operation on the EC point and the scalar value.
1177:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
1178:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!\return Returns: 
1179:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_SUCCESS if successful in starting the operation.  
1180:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_OPERATION_INPRG, if the PKA hw module is busy doing
1181:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! some other operation.
1182:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
1183:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
1184:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** tPKAStatus
1185:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** PKAECCMultiplyStart(uint32_t* pui32Scalar, tECPt* ptEcPt,
1186:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****                     tECCCurveInfo* ptCurve, uint32_t* pui32ResultVector)
1187:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** {
 1640              		.loc 1 1187 0
 1641              		.cfi_startproc
 1642              		@ args = 0, pretend = 0, frame = 32
 1643              		@ frame_needed = 1, uses_anonymous_args = 0
 1644              		@ link register save eliminated.
 1645 0874 80B4     		push	{r7}
 1646              		.cfi_def_cfa_offset 4
 1647              		.cfi_offset 7, -4
 1648 0876 89B0     		sub	sp, sp, #36
 1649              		.cfi_def_cfa_offset 40
 1650 0878 00AF     		add	r7, sp, #0
 1651              		.cfi_def_cfa_register 7
 1652 087a F860     		str	r0, [r7, #12]
 1653 087c B960     		str	r1, [r7, #8]
 1654 087e 7A60     		str	r2, [r7, #4]
 1655 0880 3B60     		str	r3, [r7]
1188:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     uint8_t extraBuf;
1189:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     uint32_t offset;
1190:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     int i;
1191:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1192:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1193:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Check for the arguments.
1194:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1195:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != pui32Scalar);
1196:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != ptEcPt);
1197:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != ptEcPt->pui32X);
1198:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != ptEcPt->pui32Y);
1199:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != ptCurve);
1200:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(ptCurve->ui8Size <= PKA_MAX_CURVE_SIZE_32_BIT_WORD);
1201:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != pui32ResultVector);
1202:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1203:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     offset = 0;
 1656              		.loc 1 1203 0
 1657 0882 0023     		movs	r3, #0
 1658 0884 BB61     		str	r3, [r7, #24]
1204:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1205:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1206:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Make sure no PKA operation is in progress.
1207:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1208:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     if((HWREG(PKA_FUNCTION) & PKA_FUNCTION_RUN) != 0)
 1659              		.loc 1 1208 0
 1660 0886 8B4B     		ldr	r3, .L118
 1661 0888 1B68     		ldr	r3, [r3]
 1662 088a 03F40043 		and	r3, r3, #32768
 1663 088e 002B     		cmp	r3, #0
 1664 0890 01D0     		beq	.L104
1209:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
1210:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         return (PKA_STATUS_OPERATION_INPRG);
 1665              		.loc 1 1210 0
 1666 0892 0723     		movs	r3, #7
 1667 0894 09E1     		b	.L105
 1668              	.L104:
1211:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
1212:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1213:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1214:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Calculate the extra buffer requirement.
1215:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1216:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     extraBuf = 2 + ptCurve->ui8Size % 2;
 1669              		.loc 1 1216 0
 1670 0896 7B68     		ldr	r3, [r7, #4]
 1671 0898 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1672 089a 03F00103 		and	r3, r3, #1
 1673 089e DBB2     		uxtb	r3, r3
 1674 08a0 0233     		adds	r3, r3, #2
 1675 08a2 FB75     		strb	r3, [r7, #23]
1217:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1218:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1219:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Update the A ptr with the offset address of the PKA RAM location
1220:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // where the scalar will be stored.
1221:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1222:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG((PKA_APTR)) = offset >> 2;
 1676              		.loc 1 1222 0
 1677 08a4 844A     		ldr	r2, .L118+4
 1678 08a6 BB69     		ldr	r3, [r7, #24]
 1679 08a8 9B08     		lsrs	r3, r3, #2
 1680 08aa 1360     		str	r3, [r2]
1223:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1224:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1225:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Load the scalar in PKA RAM.
1226:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1227:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     for(i = 0; i < ptCurve->ui8Size; i++)
 1681              		.loc 1 1227 0
 1682 08ac 0023     		movs	r3, #0
 1683 08ae FB61     		str	r3, [r7, #28]
 1684 08b0 11E0     		b	.L106
 1685              	.L107:
1228:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
1229:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) = *pui32Scalar++;
 1686              		.loc 1 1229 0 discriminator 3
 1687 08b2 FB69     		ldr	r3, [r7, #28]
 1688 08b4 9B00     		lsls	r3, r3, #2
 1689 08b6 1A46     		mov	r2, r3
 1690 08b8 BB69     		ldr	r3, [r7, #24]
 1691 08ba 1344     		add	r3, r3, r2
 1692 08bc 03F18843 		add	r3, r3, #1140850688
 1693 08c0 03F5C043 		add	r3, r3, #24576
 1694 08c4 1946     		mov	r1, r3
 1695 08c6 FB68     		ldr	r3, [r7, #12]
 1696 08c8 1A1D     		adds	r2, r3, #4
 1697 08ca FA60     		str	r2, [r7, #12]
 1698 08cc 1B68     		ldr	r3, [r3]
 1699 08ce 0B60     		str	r3, [r1]
1227:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 1700              		.loc 1 1227 0 discriminator 3
 1701 08d0 FB69     		ldr	r3, [r7, #28]
 1702 08d2 0133     		adds	r3, r3, #1
 1703 08d4 FB61     		str	r3, [r7, #28]
 1704              	.L106:
1227:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 1705              		.loc 1 1227 0 is_stmt 0 discriminator 1
 1706 08d6 7B68     		ldr	r3, [r7, #4]
 1707 08d8 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1708 08da 1A46     		mov	r2, r3
 1709 08dc FB69     		ldr	r3, [r7, #28]
 1710 08de 9A42     		cmp	r2, r3
 1711 08e0 E7DC     		bgt	.L107
1230:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
1231:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1232:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1233:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Determine the offset for the next data.
1234:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1235:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     offset += 4 * (i + (ptCurve->ui8Size % 2));
 1712              		.loc 1 1235 0 is_stmt 1
 1713 08e2 7B68     		ldr	r3, [r7, #4]
 1714 08e4 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1715 08e6 03F00102 		and	r2, r3, #1
 1716 08ea FB69     		ldr	r3, [r7, #28]
 1717 08ec 1344     		add	r3, r3, r2
 1718 08ee 9B00     		lsls	r3, r3, #2
 1719 08f0 1A46     		mov	r2, r3
 1720 08f2 BB69     		ldr	r3, [r7, #24]
 1721 08f4 1344     		add	r3, r3, r2
 1722 08f6 BB61     		str	r3, [r7, #24]
1236:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1237:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1238:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Update the B ptr with the offset address of the PKA RAM location
1239:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // where the curve parameters will be stored.
1240:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1241:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG((PKA_BPTR)) = offset >> 2;
 1723              		.loc 1 1241 0
 1724 08f8 704A     		ldr	r2, .L118+8
 1725 08fa BB69     		ldr	r3, [r7, #24]
 1726 08fc 9B08     		lsrs	r3, r3, #2
 1727 08fe 1360     		str	r3, [r2]
1242:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1243:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1244:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Write curve parameter 'p' as 1st part of vector B immediately
1245:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // following vector A at PKA RAM
1246:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1247:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     for(i = 0; i < ptCurve->ui8Size; i++)
 1728              		.loc 1 1247 0
 1729 0900 0023     		movs	r3, #0
 1730 0902 FB61     		str	r3, [r7, #28]
 1731 0904 13E0     		b	.L108
 1732              	.L109:
1248:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
1249:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) =
 1733              		.loc 1 1249 0 discriminator 3
 1734 0906 FB69     		ldr	r3, [r7, #28]
 1735 0908 9B00     		lsls	r3, r3, #2
 1736 090a 1A46     		mov	r2, r3
 1737 090c BB69     		ldr	r3, [r7, #24]
 1738 090e 1344     		add	r3, r3, r2
 1739 0910 03F18843 		add	r3, r3, #1140850688
 1740 0914 03F5C043 		add	r3, r3, #24576
 1741 0918 1946     		mov	r1, r3
1250:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****             (uint32_t)ptCurve->pui32Prime[i];
 1742              		.loc 1 1250 0 discriminator 3
 1743 091a 7B68     		ldr	r3, [r7, #4]
 1744 091c 9A68     		ldr	r2, [r3, #8]
 1745 091e FB69     		ldr	r3, [r7, #28]
 1746 0920 9B00     		lsls	r3, r3, #2
 1747 0922 1344     		add	r3, r3, r2
 1748 0924 1B68     		ldr	r3, [r3]
1249:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****             (uint32_t)ptCurve->pui32Prime[i];
 1749              		.loc 1 1249 0 discriminator 3
 1750 0926 0B60     		str	r3, [r1]
1247:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 1751              		.loc 1 1247 0 discriminator 3
 1752 0928 FB69     		ldr	r3, [r7, #28]
 1753 092a 0133     		adds	r3, r3, #1
 1754 092c FB61     		str	r3, [r7, #28]
 1755              	.L108:
1247:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 1756              		.loc 1 1247 0 is_stmt 0 discriminator 1
 1757 092e 7B68     		ldr	r3, [r7, #4]
 1758 0930 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1759 0932 1A46     		mov	r2, r3
 1760 0934 FB69     		ldr	r3, [r7, #28]
 1761 0936 9A42     		cmp	r2, r3
 1762 0938 E5DC     		bgt	.L109
1251:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
1252:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1253:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1254:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Determine the offset for the next data.
1255:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1256:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     offset += 4 * (i + extraBuf);
 1763              		.loc 1 1256 0 is_stmt 1
 1764 093a FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 1765 093c FB69     		ldr	r3, [r7, #28]
 1766 093e 1344     		add	r3, r3, r2
 1767 0940 9B00     		lsls	r3, r3, #2
 1768 0942 1A46     		mov	r2, r3
 1769 0944 BB69     		ldr	r3, [r7, #24]
 1770 0946 1344     		add	r3, r3, r2
 1771 0948 BB61     		str	r3, [r7, #24]
1257:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1258:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1259:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Copy curve parameter 'a' in PKA RAM.
1260:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1261:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     for(i = 0; i < ptCurve->ui8Size; i++)
 1772              		.loc 1 1261 0
 1773 094a 0023     		movs	r3, #0
 1774 094c FB61     		str	r3, [r7, #28]
 1775 094e 13E0     		b	.L110
 1776              	.L111:
1262:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
1263:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) = (uint32_t)ptCurve->pui32A[i];
 1777              		.loc 1 1263 0 discriminator 3
 1778 0950 FB69     		ldr	r3, [r7, #28]
 1779 0952 9B00     		lsls	r3, r3, #2
 1780 0954 1A46     		mov	r2, r3
 1781 0956 BB69     		ldr	r3, [r7, #24]
 1782 0958 1344     		add	r3, r3, r2
 1783 095a 03F18843 		add	r3, r3, #1140850688
 1784 095e 03F5C043 		add	r3, r3, #24576
 1785 0962 1946     		mov	r1, r3
 1786 0964 7B68     		ldr	r3, [r7, #4]
 1787 0966 1A69     		ldr	r2, [r3, #16]
 1788 0968 FB69     		ldr	r3, [r7, #28]
 1789 096a 9B00     		lsls	r3, r3, #2
 1790 096c 1344     		add	r3, r3, r2
 1791 096e 1B68     		ldr	r3, [r3]
 1792 0970 0B60     		str	r3, [r1]
1261:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 1793              		.loc 1 1261 0 discriminator 3
 1794 0972 FB69     		ldr	r3, [r7, #28]
 1795 0974 0133     		adds	r3, r3, #1
 1796 0976 FB61     		str	r3, [r7, #28]
 1797              	.L110:
1261:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 1798              		.loc 1 1261 0 is_stmt 0 discriminator 1
 1799 0978 7B68     		ldr	r3, [r7, #4]
 1800 097a 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1801 097c 1A46     		mov	r2, r3
 1802 097e FB69     		ldr	r3, [r7, #28]
 1803 0980 9A42     		cmp	r2, r3
 1804 0982 E5DC     		bgt	.L111
1264:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
1265:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1266:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1267:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Determine the offset for the next data.
1268:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1269:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     offset += 4 * (i + extraBuf);
 1805              		.loc 1 1269 0 is_stmt 1
 1806 0984 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 1807 0986 FB69     		ldr	r3, [r7, #28]
 1808 0988 1344     		add	r3, r3, r2
 1809 098a 9B00     		lsls	r3, r3, #2
 1810 098c 1A46     		mov	r2, r3
 1811 098e BB69     		ldr	r3, [r7, #24]
 1812 0990 1344     		add	r3, r3, r2
 1813 0992 BB61     		str	r3, [r7, #24]
1270:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1271:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1272:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Copy curve parameter 'b' in PKA RAM.
1273:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1274:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     for(i = 0; i < ptCurve->ui8Size; i++)
 1814              		.loc 1 1274 0
 1815 0994 0023     		movs	r3, #0
 1816 0996 FB61     		str	r3, [r7, #28]
 1817 0998 13E0     		b	.L112
 1818              	.L113:
1275:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
1276:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) = (uint32_t)ptCurve->pui32B[i];
 1819              		.loc 1 1276 0 discriminator 3
 1820 099a FB69     		ldr	r3, [r7, #28]
 1821 099c 9B00     		lsls	r3, r3, #2
 1822 099e 1A46     		mov	r2, r3
 1823 09a0 BB69     		ldr	r3, [r7, #24]
 1824 09a2 1344     		add	r3, r3, r2
 1825 09a4 03F18843 		add	r3, r3, #1140850688
 1826 09a8 03F5C043 		add	r3, r3, #24576
 1827 09ac 1946     		mov	r1, r3
 1828 09ae 7B68     		ldr	r3, [r7, #4]
 1829 09b0 5A69     		ldr	r2, [r3, #20]
 1830 09b2 FB69     		ldr	r3, [r7, #28]
 1831 09b4 9B00     		lsls	r3, r3, #2
 1832 09b6 1344     		add	r3, r3, r2
 1833 09b8 1B68     		ldr	r3, [r3]
 1834 09ba 0B60     		str	r3, [r1]
1274:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 1835              		.loc 1 1274 0 discriminator 3
 1836 09bc FB69     		ldr	r3, [r7, #28]
 1837 09be 0133     		adds	r3, r3, #1
 1838 09c0 FB61     		str	r3, [r7, #28]
 1839              	.L112:
1274:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 1840              		.loc 1 1274 0 is_stmt 0 discriminator 1
 1841 09c2 7B68     		ldr	r3, [r7, #4]
 1842 09c4 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1843 09c6 1A46     		mov	r2, r3
 1844 09c8 FB69     		ldr	r3, [r7, #28]
 1845 09ca 9A42     		cmp	r2, r3
 1846 09cc E5DC     		bgt	.L113
1277:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
1278:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1279:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1280:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Determine the offset for the next data.
1281:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1282:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     offset += 4 * (i + extraBuf);
 1847              		.loc 1 1282 0 is_stmt 1
 1848 09ce FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 1849 09d0 FB69     		ldr	r3, [r7, #28]
 1850 09d2 1344     		add	r3, r3, r2
 1851 09d4 9B00     		lsls	r3, r3, #2
 1852 09d6 1A46     		mov	r2, r3
 1853 09d8 BB69     		ldr	r3, [r7, #24]
 1854 09da 1344     		add	r3, r3, r2
 1855 09dc BB61     		str	r3, [r7, #24]
1283:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1284:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1285:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Update the C ptr with the offset address of the PKA RAM location
1286:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // where the Gx, Gy will be stored.
1287:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1288:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG((PKA_CPTR)) = offset >> 2;
 1856              		.loc 1 1288 0
 1857 09de 384A     		ldr	r2, .L118+12
 1858 09e0 BB69     		ldr	r3, [r7, #24]
 1859 09e2 9B08     		lsrs	r3, r3, #2
 1860 09e4 1360     		str	r3, [r2]
1289:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1290:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1291:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Write elliptic curve point x co-ordinate value.
1292:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1293:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     for(i = 0; i < ptCurve->ui8Size; i++)
 1861              		.loc 1 1293 0
 1862 09e6 0023     		movs	r3, #0
 1863 09e8 FB61     		str	r3, [r7, #28]
 1864 09ea 13E0     		b	.L114
 1865              	.L115:
1294:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
1295:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) = ptEcPt->pui32X[i];
 1866              		.loc 1 1295 0 discriminator 3
 1867 09ec FB69     		ldr	r3, [r7, #28]
 1868 09ee 9B00     		lsls	r3, r3, #2
 1869 09f0 1A46     		mov	r2, r3
 1870 09f2 BB69     		ldr	r3, [r7, #24]
 1871 09f4 1344     		add	r3, r3, r2
 1872 09f6 03F18843 		add	r3, r3, #1140850688
 1873 09fa 03F5C043 		add	r3, r3, #24576
 1874 09fe 1946     		mov	r1, r3
 1875 0a00 BB68     		ldr	r3, [r7, #8]
 1876 0a02 1A68     		ldr	r2, [r3]
 1877 0a04 FB69     		ldr	r3, [r7, #28]
 1878 0a06 9B00     		lsls	r3, r3, #2
 1879 0a08 1344     		add	r3, r3, r2
 1880 0a0a 1B68     		ldr	r3, [r3]
 1881 0a0c 0B60     		str	r3, [r1]
1293:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 1882              		.loc 1 1293 0 discriminator 3
 1883 0a0e FB69     		ldr	r3, [r7, #28]
 1884 0a10 0133     		adds	r3, r3, #1
 1885 0a12 FB61     		str	r3, [r7, #28]
 1886              	.L114:
1293:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 1887              		.loc 1 1293 0 is_stmt 0 discriminator 1
 1888 0a14 7B68     		ldr	r3, [r7, #4]
 1889 0a16 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1890 0a18 1A46     		mov	r2, r3
 1891 0a1a FB69     		ldr	r3, [r7, #28]
 1892 0a1c 9A42     		cmp	r2, r3
 1893 0a1e E5DC     		bgt	.L115
1296:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
1297:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1298:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1299:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Determine the offset for the next data.
1300:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1301:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     offset += 4 * (i + extraBuf);
 1894              		.loc 1 1301 0 is_stmt 1
 1895 0a20 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 1896 0a22 FB69     		ldr	r3, [r7, #28]
 1897 0a24 1344     		add	r3, r3, r2
 1898 0a26 9B00     		lsls	r3, r3, #2
 1899 0a28 1A46     		mov	r2, r3
 1900 0a2a BB69     		ldr	r3, [r7, #24]
 1901 0a2c 1344     		add	r3, r3, r2
 1902 0a2e BB61     		str	r3, [r7, #24]
1302:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1303:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1304:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Write elliptic curve point y co-ordinate value.
1305:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1306:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     for(i = 0; i < ptCurve->ui8Size; i++)
 1903              		.loc 1 1306 0
 1904 0a30 0023     		movs	r3, #0
 1905 0a32 FB61     		str	r3, [r7, #28]
 1906 0a34 13E0     		b	.L116
 1907              	.L117:
1307:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
1308:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) = ptEcPt->pui32Y[i];
 1908              		.loc 1 1308 0 discriminator 3
 1909 0a36 FB69     		ldr	r3, [r7, #28]
 1910 0a38 9B00     		lsls	r3, r3, #2
 1911 0a3a 1A46     		mov	r2, r3
 1912 0a3c BB69     		ldr	r3, [r7, #24]
 1913 0a3e 1344     		add	r3, r3, r2
 1914 0a40 03F18843 		add	r3, r3, #1140850688
 1915 0a44 03F5C043 		add	r3, r3, #24576
 1916 0a48 1946     		mov	r1, r3
 1917 0a4a BB68     		ldr	r3, [r7, #8]
 1918 0a4c 5A68     		ldr	r2, [r3, #4]
 1919 0a4e FB69     		ldr	r3, [r7, #28]
 1920 0a50 9B00     		lsls	r3, r3, #2
 1921 0a52 1344     		add	r3, r3, r2
 1922 0a54 1B68     		ldr	r3, [r3]
 1923 0a56 0B60     		str	r3, [r1]
1306:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 1924              		.loc 1 1306 0 discriminator 3
 1925 0a58 FB69     		ldr	r3, [r7, #28]
 1926 0a5a 0133     		adds	r3, r3, #1
 1927 0a5c FB61     		str	r3, [r7, #28]
 1928              	.L116:
1306:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 1929              		.loc 1 1306 0 is_stmt 0 discriminator 1
 1930 0a5e 7B68     		ldr	r3, [r7, #4]
 1931 0a60 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1932 0a62 1A46     		mov	r2, r3
 1933 0a64 FB69     		ldr	r3, [r7, #28]
 1934 0a66 9A42     		cmp	r2, r3
 1935 0a68 E5DC     		bgt	.L117
1309:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
1310:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1311:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1312:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Determine the offset for the next data.
1313:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1314:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     offset += 4 * (i + extraBuf);
 1936              		.loc 1 1314 0 is_stmt 1
 1937 0a6a FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 1938 0a6c FB69     		ldr	r3, [r7, #28]
 1939 0a6e 1344     		add	r3, r3, r2
 1940 0a70 9B00     		lsls	r3, r3, #2
 1941 0a72 1A46     		mov	r2, r3
 1942 0a74 BB69     		ldr	r3, [r7, #24]
 1943 0a76 1344     		add	r3, r3, r2
 1944 0a78 BB61     		str	r3, [r7, #24]
1315:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1316:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1317:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Update the result location.
1318:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1319:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     *pui32ResultVector =  PKA_RAM_BASE + offset;
 1945              		.loc 1 1319 0
 1946 0a7a BB69     		ldr	r3, [r7, #24]
 1947 0a7c 03F18843 		add	r3, r3, #1140850688
 1948 0a80 03F5C043 		add	r3, r3, #24576
 1949 0a84 3A68     		ldr	r2, [r7]
 1950 0a86 1360     		str	r3, [r2]
1320:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1321:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1322:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Load D ptr with the result location in PKA RAM.
1323:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1324:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG(PKA_DPTR) = offset >> 2;
 1951              		.loc 1 1324 0
 1952 0a88 0E4A     		ldr	r2, .L118+16
 1953 0a8a BB69     		ldr	r3, [r7, #24]
 1954 0a8c 9B08     		lsrs	r3, r3, #2
 1955 0a8e 1360     		str	r3, [r2]
1325:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1326:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1327:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Load length registers.
1328:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1329:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG(PKA_ALENGTH) = ptCurve->ui8Size;
 1956              		.loc 1 1329 0
 1957 0a90 0D4A     		ldr	r2, .L118+20
 1958 0a92 7B68     		ldr	r3, [r7, #4]
 1959 0a94 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1960 0a96 1360     		str	r3, [r2]
1330:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG(PKA_BLENGTH) = ptCurve->ui8Size;
 1961              		.loc 1 1330 0
 1962 0a98 0C4A     		ldr	r2, .L118+24
 1963 0a9a 7B68     		ldr	r3, [r7, #4]
 1964 0a9c 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1965 0a9e 1360     		str	r3, [r2]
1331:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1332:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1333:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // set the PKA function to ECC-MULT and start the operation.
1334:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1335:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG(PKA_FUNCTION) = 0x0000D000;
 1966              		.loc 1 1335 0
 1967 0aa0 044B     		ldr	r3, .L118
 1968 0aa2 4FF45042 		mov	r2, #53248
 1969 0aa6 1A60     		str	r2, [r3]
1336:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1337:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     return (PKA_STATUS_SUCCESS);
 1970              		.loc 1 1337 0
 1971 0aa8 0023     		movs	r3, #0
 1972              	.L105:
1338:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** }
 1973              		.loc 1 1338 0
 1974 0aaa 1846     		mov	r0, r3
 1975 0aac 2437     		adds	r7, r7, #36
 1976              		.cfi_def_cfa_offset 4
 1977 0aae BD46     		mov	sp, r7
 1978              		.cfi_def_cfa_register 13
 1979              		@ sp needed
 1980 0ab0 80BC     		pop	{r7}
 1981              		.cfi_restore 7
 1982              		.cfi_def_cfa_offset 0
 1983 0ab2 7047     		bx	lr
 1984              	.L119:
 1985              		.align	2
 1986              	.L118:
 1987 0ab4 1C400044 		.word	1140867100
 1988 0ab8 00400044 		.word	1140867072
 1989 0abc 04400044 		.word	1140867076
 1990 0ac0 08400044 		.word	1140867080
 1991 0ac4 0C400044 		.word	1140867084
 1992 0ac8 10400044 		.word	1140867088
 1993 0acc 14400044 		.word	1140867092
 1994              		.cfi_endproc
 1995              	.LFE16:
 1997              		.align	2
 1998              		.global	PKAECCMultiplyGetResult
 1999              		.thumb
 2000              		.thumb_func
 2002              	PKAECCMultiplyGetResult:
 2003              	.LFB17:
1339:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1340:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
1341:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
1342:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! Gets the result of ECC Multiplication
1343:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
1344:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param ptOutEcPt is the pointer to the structure where the resultant EC
1345:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! point will be stored.  The callee is responsible to allocate the space for
1346:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! the ec point structure and the x and y co-ordinate as well.
1347:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param ui32ResVectorLoc is the address of the result location which
1348:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! was provided by the start function \sa PKAECCMultiplyStart().
1349:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
1350:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! This function gets the result of ecc point multiplication operation on the
1351:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! ec point and the scalar value, previously started using the function
1352:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \sa PKAECCMultiplyStart().
1353:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
1354:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \return Returns:
1355:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_SUCCESS if the operation is successful. 
1356:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_OPERATION_INPRG, if the PKA hw module is busy performing 
1357:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! the operation.
1358:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_RESULT_0 if the result is all zeroes.
1359:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_FAILURE if the operation is not successful.
1360:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
1361:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
1362:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** tPKAStatus
1363:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** PKAECCMultiplyGetResult(tECPt* ptOutEcPt, uint32_t ui32ResVectorLoc)
1364:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** {
 2004              		.loc 1 1364 0
 2005              		.cfi_startproc
 2006              		@ args = 0, pretend = 0, frame = 24
 2007              		@ frame_needed = 1, uses_anonymous_args = 0
 2008              		@ link register save eliminated.
 2009 0ad0 80B4     		push	{r7}
 2010              		.cfi_def_cfa_offset 4
 2011              		.cfi_offset 7, -4
 2012 0ad2 87B0     		sub	sp, sp, #28
 2013              		.cfi_def_cfa_offset 32
 2014 0ad4 00AF     		add	r7, sp, #0
 2015              		.cfi_def_cfa_register 7
 2016 0ad6 7860     		str	r0, [r7, #4]
 2017 0ad8 3960     		str	r1, [r7]
1365:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     int i;
1366:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     uint32_t addr;
1367:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     uint32_t regMSWVal;
1368:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     uint32_t len;
1369:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1370:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1371:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Check for the arguments.
1372:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1373:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != ptOutEcPt);
1374:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != ptOutEcPt->pui32X);
1375:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != ptOutEcPt->pui32Y);
1376:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT((ui32ResVectorLoc > PKA_RAM_BASE) &&
1377:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****            (ui32ResVectorLoc < (PKA_RAM_BASE + PKA_RAM_SIZE)));
1378:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1379:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1380:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Verify that the operation is completed.
1381:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1382:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     if((HWREG(PKA_FUNCTION) & PKA_FUNCTION_RUN) != 0)
 2018              		.loc 1 1382 0
 2019 0ada 314B     		ldr	r3, .L129
 2020 0adc 1B68     		ldr	r3, [r3]
 2021 0ade 03F40043 		and	r3, r3, #32768
 2022 0ae2 002B     		cmp	r3, #0
 2023 0ae4 01D0     		beq	.L121
1383:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
1384:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         return (PKA_STATUS_OPERATION_INPRG);
 2024              		.loc 1 1384 0
 2025 0ae6 0723     		movs	r3, #7
 2026 0ae8 54E0     		b	.L122
 2027              	.L121:
1385:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
1386:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1387:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     if(HWREG(PKA_SHIFT) == 0x00000000)
 2028              		.loc 1 1387 0
 2029 0aea 2E4B     		ldr	r3, .L129+4
 2030 0aec 1B68     		ldr	r3, [r3]
 2031 0aee 002B     		cmp	r3, #0
 2032 0af0 4FD1     		bne	.L123
1388:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
1389:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         //
1390:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         // Get the MSW register value.
1391:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         //
1392:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         regMSWVal = HWREG(PKA_MSW);
 2033              		.loc 1 1392 0
 2034 0af2 2D4B     		ldr	r3, .L129+8
 2035 0af4 1B68     		ldr	r3, [r3]
 2036 0af6 3B61     		str	r3, [r7, #16]
1393:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1394:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         //
1395:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         // Check to make sure that the result vector is not all zeroes.
1396:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         //
1397:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         if(regMSWVal & PKA_MSW_RESULT_IS_ZERO)
 2037              		.loc 1 1397 0
 2038 0af8 3B69     		ldr	r3, [r7, #16]
 2039 0afa 03F40043 		and	r3, r3, #32768
 2040 0afe 002B     		cmp	r3, #0
 2041 0b00 01D0     		beq	.L124
1398:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         {
1399:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****             return (PKA_STATUS_RESULT_0);
 2042              		.loc 1 1399 0
 2043 0b02 0423     		movs	r3, #4
 2044 0b04 46E0     		b	.L122
 2045              	.L124:
1400:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         }
1401:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1402:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         //
1403:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         // Get the length of the result
1404:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         //
1405:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         len = ((regMSWVal & PKA_MSW_MSW_ADDRESS_M) + 1) -
 2046              		.loc 1 1405 0
 2047 0b06 3B69     		ldr	r3, [r7, #16]
 2048 0b08 C3F30A02 		ubfx	r2, r3, #0, #11
1406:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****               ((ui32ResVectorLoc - PKA_RAM_BASE) >> 2);
 2049              		.loc 1 1406 0
 2050 0b0c 3B68     		ldr	r3, [r7]
 2051 0b0e 03F13C43 		add	r3, r3, #-1140850688
 2052 0b12 A3F5C043 		sub	r3, r3, #24576
 2053 0b16 9B08     		lsrs	r3, r3, #2
1405:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****               ((ui32ResVectorLoc - PKA_RAM_BASE) >> 2);
 2054              		.loc 1 1405 0
 2055 0b18 D31A     		subs	r3, r2, r3
 2056 0b1a 0133     		adds	r3, r3, #1
 2057 0b1c FB60     		str	r3, [r7, #12]
1407:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1408:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         addr = ui32ResVectorLoc;
 2058              		.loc 1 1408 0
 2059 0b1e 3B68     		ldr	r3, [r7]
 2060 0b20 BB60     		str	r3, [r7, #8]
1409:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1410:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         //
1411:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         // copy the x co-ordinate value of the result from vector D into
1412:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         // the \e ptOutEcPt.
1413:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         //
1414:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         for(i = 0; i < len; i++)
 2061              		.loc 1 1414 0
 2062 0b22 0023     		movs	r3, #0
 2063 0b24 7B61     		str	r3, [r7, #20]
 2064 0b26 0EE0     		b	.L125
 2065              	.L126:
1415:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         {
1416:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****             ptOutEcPt->pui32X[i] = HWREG(addr + 4*i);
 2066              		.loc 1 1416 0 discriminator 3
 2067 0b28 7B68     		ldr	r3, [r7, #4]
 2068 0b2a 1A68     		ldr	r2, [r3]
 2069 0b2c 7B69     		ldr	r3, [r7, #20]
 2070 0b2e 9B00     		lsls	r3, r3, #2
 2071 0b30 1344     		add	r3, r3, r2
 2072 0b32 7A69     		ldr	r2, [r7, #20]
 2073 0b34 9200     		lsls	r2, r2, #2
 2074 0b36 1146     		mov	r1, r2
 2075 0b38 BA68     		ldr	r2, [r7, #8]
 2076 0b3a 0A44     		add	r2, r2, r1
 2077 0b3c 1268     		ldr	r2, [r2]
 2078 0b3e 1A60     		str	r2, [r3]
1414:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         {
 2079              		.loc 1 1414 0 discriminator 3
 2080 0b40 7B69     		ldr	r3, [r7, #20]
 2081 0b42 0133     		adds	r3, r3, #1
 2082 0b44 7B61     		str	r3, [r7, #20]
 2083              	.L125:
1414:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         {
 2084              		.loc 1 1414 0 is_stmt 0 discriminator 1
 2085 0b46 7A69     		ldr	r2, [r7, #20]
 2086 0b48 FB68     		ldr	r3, [r7, #12]
 2087 0b4a 9A42     		cmp	r2, r3
 2088 0b4c ECD3     		bcc	.L126
1417:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         }
1418:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1419:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         addr += 4 * (i + 2 + len % 2);
 2089              		.loc 1 1419 0 is_stmt 1
 2090 0b4e FB68     		ldr	r3, [r7, #12]
 2091 0b50 03F00102 		and	r2, r3, #1
 2092 0b54 7B69     		ldr	r3, [r7, #20]
 2093 0b56 1344     		add	r3, r3, r2
 2094 0b58 0233     		adds	r3, r3, #2
 2095 0b5a 9B00     		lsls	r3, r3, #2
 2096 0b5c BA68     		ldr	r2, [r7, #8]
 2097 0b5e 1344     		add	r3, r3, r2
 2098 0b60 BB60     		str	r3, [r7, #8]
1420:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1421:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         //
1422:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         // copy the y co-ordinate value of the result from vector D into
1423:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         // the \e ptOutEcPt.
1424:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         //
1425:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         for(i = 0; i < len; i++)
 2099              		.loc 1 1425 0
 2100 0b62 0023     		movs	r3, #0
 2101 0b64 7B61     		str	r3, [r7, #20]
 2102 0b66 0EE0     		b	.L127
 2103              	.L128:
1426:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         {
1427:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****             ptOutEcPt->pui32Y[i] = HWREG(addr + 4*i);
 2104              		.loc 1 1427 0 discriminator 3
 2105 0b68 7B68     		ldr	r3, [r7, #4]
 2106 0b6a 5A68     		ldr	r2, [r3, #4]
 2107 0b6c 7B69     		ldr	r3, [r7, #20]
 2108 0b6e 9B00     		lsls	r3, r3, #2
 2109 0b70 1344     		add	r3, r3, r2
 2110 0b72 7A69     		ldr	r2, [r7, #20]
 2111 0b74 9200     		lsls	r2, r2, #2
 2112 0b76 1146     		mov	r1, r2
 2113 0b78 BA68     		ldr	r2, [r7, #8]
 2114 0b7a 0A44     		add	r2, r2, r1
 2115 0b7c 1268     		ldr	r2, [r2]
 2116 0b7e 1A60     		str	r2, [r3]
1425:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         {
 2117              		.loc 1 1425 0 discriminator 3
 2118 0b80 7B69     		ldr	r3, [r7, #20]
 2119 0b82 0133     		adds	r3, r3, #1
 2120 0b84 7B61     		str	r3, [r7, #20]
 2121              	.L127:
1425:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         {
 2122              		.loc 1 1425 0 is_stmt 0 discriminator 1
 2123 0b86 7A69     		ldr	r2, [r7, #20]
 2124 0b88 FB68     		ldr	r3, [r7, #12]
 2125 0b8a 9A42     		cmp	r2, r3
 2126 0b8c ECD3     		bcc	.L128
1428:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         }
1429:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1430:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         return (PKA_STATUS_SUCCESS);
 2127              		.loc 1 1430 0 is_stmt 1
 2128 0b8e 0023     		movs	r3, #0
 2129 0b90 00E0     		b	.L122
 2130              	.L123:
1431:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
1432:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     else
1433:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
1434:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         return (PKA_STATUS_FAILURE);
 2131              		.loc 1 1434 0
 2132 0b92 0123     		movs	r3, #1
 2133              	.L122:
1435:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
1436:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** }
 2134              		.loc 1 1436 0
 2135 0b94 1846     		mov	r0, r3
 2136 0b96 1C37     		adds	r7, r7, #28
 2137              		.cfi_def_cfa_offset 4
 2138 0b98 BD46     		mov	sp, r7
 2139              		.cfi_def_cfa_register 13
 2140              		@ sp needed
 2141 0b9a 80BC     		pop	{r7}
 2142              		.cfi_restore 7
 2143              		.cfi_def_cfa_offset 0
 2144 0b9c 7047     		bx	lr
 2145              	.L130:
 2146 0b9e 00BF     		.align	2
 2147              	.L129:
 2148 0ba0 1C400044 		.word	1140867100
 2149 0ba4 18400044 		.word	1140867096
 2150 0ba8 24400044 		.word	1140867108
 2151              		.cfi_endproc
 2152              	.LFE17:
 2154              		.align	2
 2155              		.global	PKAECCMultGenPtStart
 2156              		.thumb
 2157              		.thumb_func
 2159              	PKAECCMultGenPtStart:
 2160              	.LFB18:
1437:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1438:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
1439:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
1440:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! Starts the ECC Multiplication with Generator point.
1441:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
1442:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param pui32Scalar is the to pointer to the buffer containing the scalar
1443:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! value.
1444:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param ptCurve is the pointer to the structure containing the curve
1445:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! info.
1446:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param pui32ResultVector is the pointer to the result vector location
1447:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! which will be set by this function.
1448:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
1449:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! This function starts the ecc point multiplication operation of the
1450:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! scalar value with the well known generator point of the given curve.
1451:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
1452:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!\return Returns: 
1453:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_SUCCESS if successful in starting the operation.  
1454:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_OPERATION_INPRG, if the PKA hw module is busy doing
1455:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! some other operation.
1456:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
1457:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
1458:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** tPKAStatus
1459:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** PKAECCMultGenPtStart(uint32_t* pui32Scalar, tECCCurveInfo* ptCurve,
1460:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****                      uint32_t* pui32ResultVector)
1461:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** {
 2161              		.loc 1 1461 0
 2162              		.cfi_startproc
 2163              		@ args = 0, pretend = 0, frame = 32
 2164              		@ frame_needed = 1, uses_anonymous_args = 0
 2165              		@ link register save eliminated.
 2166 0bac 80B4     		push	{r7}
 2167              		.cfi_def_cfa_offset 4
 2168              		.cfi_offset 7, -4
 2169 0bae 89B0     		sub	sp, sp, #36
 2170              		.cfi_def_cfa_offset 40
 2171 0bb0 00AF     		add	r7, sp, #0
 2172              		.cfi_def_cfa_register 7
 2173 0bb2 F860     		str	r0, [r7, #12]
 2174 0bb4 B960     		str	r1, [r7, #8]
 2175 0bb6 7A60     		str	r2, [r7, #4]
1462:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     uint8_t extraBuf;
1463:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     uint32_t offset;
1464:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     int i;
1465:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1466:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1467:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // check for the arguments.
1468:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1469:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != pui32Scalar);
1470:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != ptCurve);
1471:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(ptCurve->ui8Size <= PKA_MAX_CURVE_SIZE_32_BIT_WORD);
1472:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != pui32ResultVector);
1473:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1474:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     offset = 0;
 2176              		.loc 1 1474 0
 2177 0bb8 0023     		movs	r3, #0
 2178 0bba BB61     		str	r3, [r7, #24]
1475:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1476:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1477:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Make sure no operation is in progress.
1478:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1479:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     if((HWREG(PKA_FUNCTION) & PKA_FUNCTION_RUN) != 0)
 2179              		.loc 1 1479 0
 2180 0bbc 8B4B     		ldr	r3, .L146
 2181 0bbe 1B68     		ldr	r3, [r3]
 2182 0bc0 03F40043 		and	r3, r3, #32768
 2183 0bc4 002B     		cmp	r3, #0
 2184 0bc6 01D0     		beq	.L132
1480:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
1481:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         return (PKA_STATUS_OPERATION_INPRG);
 2185              		.loc 1 1481 0
 2186 0bc8 0723     		movs	r3, #7
 2187 0bca 09E1     		b	.L133
 2188              	.L132:
1482:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
1483:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1484:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1485:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Calculate the extra buffer requirement.
1486:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1487:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     extraBuf = 2 + ptCurve->ui8Size % 2;
 2189              		.loc 1 1487 0
 2190 0bcc BB68     		ldr	r3, [r7, #8]
 2191 0bce 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2192 0bd0 03F00103 		and	r3, r3, #1
 2193 0bd4 DBB2     		uxtb	r3, r3
 2194 0bd6 0233     		adds	r3, r3, #2
 2195 0bd8 FB75     		strb	r3, [r7, #23]
1488:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1489:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1490:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Update the A ptr with the offset address of the PKA RAM location
1491:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // where the scalar will be stored.
1492:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1493:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG(PKA_APTR) = offset >> 2;
 2196              		.loc 1 1493 0
 2197 0bda 854A     		ldr	r2, .L146+4
 2198 0bdc BB69     		ldr	r3, [r7, #24]
 2199 0bde 9B08     		lsrs	r3, r3, #2
 2200 0be0 1360     		str	r3, [r2]
1494:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1495:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1496:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Load the scalar in PKA RAM.
1497:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1498:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     for(i = 0; i < ptCurve->ui8Size; i++)
 2201              		.loc 1 1498 0
 2202 0be2 0023     		movs	r3, #0
 2203 0be4 FB61     		str	r3, [r7, #28]
 2204 0be6 11E0     		b	.L134
 2205              	.L135:
1499:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
1500:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) = *pui32Scalar++;
 2206              		.loc 1 1500 0 discriminator 3
 2207 0be8 FB69     		ldr	r3, [r7, #28]
 2208 0bea 9B00     		lsls	r3, r3, #2
 2209 0bec 1A46     		mov	r2, r3
 2210 0bee BB69     		ldr	r3, [r7, #24]
 2211 0bf0 1344     		add	r3, r3, r2
 2212 0bf2 03F18843 		add	r3, r3, #1140850688
 2213 0bf6 03F5C043 		add	r3, r3, #24576
 2214 0bfa 1946     		mov	r1, r3
 2215 0bfc FB68     		ldr	r3, [r7, #12]
 2216 0bfe 1A1D     		adds	r2, r3, #4
 2217 0c00 FA60     		str	r2, [r7, #12]
 2218 0c02 1B68     		ldr	r3, [r3]
 2219 0c04 0B60     		str	r3, [r1]
1498:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 2220              		.loc 1 1498 0 discriminator 3
 2221 0c06 FB69     		ldr	r3, [r7, #28]
 2222 0c08 0133     		adds	r3, r3, #1
 2223 0c0a FB61     		str	r3, [r7, #28]
 2224              	.L134:
1498:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 2225              		.loc 1 1498 0 is_stmt 0 discriminator 1
 2226 0c0c BB68     		ldr	r3, [r7, #8]
 2227 0c0e 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2228 0c10 1A46     		mov	r2, r3
 2229 0c12 FB69     		ldr	r3, [r7, #28]
 2230 0c14 9A42     		cmp	r2, r3
 2231 0c16 E7DC     		bgt	.L135
1501:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
1502:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1503:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1504:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Determine the offset in PKA RAM for the next data.
1505:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1506:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     offset += 4 * (i + (ptCurve->ui8Size % 2));
 2232              		.loc 1 1506 0 is_stmt 1
 2233 0c18 BB68     		ldr	r3, [r7, #8]
 2234 0c1a 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2235 0c1c 03F00102 		and	r2, r3, #1
 2236 0c20 FB69     		ldr	r3, [r7, #28]
 2237 0c22 1344     		add	r3, r3, r2
 2238 0c24 9B00     		lsls	r3, r3, #2
 2239 0c26 1A46     		mov	r2, r3
 2240 0c28 BB69     		ldr	r3, [r7, #24]
 2241 0c2a 1344     		add	r3, r3, r2
 2242 0c2c BB61     		str	r3, [r7, #24]
1507:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1508:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1509:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Update the B ptr with the offset address of the PKA RAM location
1510:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // where the curve parameters will be stored.
1511:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1512:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG(PKA_BPTR) = offset >> 2;
 2243              		.loc 1 1512 0
 2244 0c2e 714A     		ldr	r2, .L146+8
 2245 0c30 BB69     		ldr	r3, [r7, #24]
 2246 0c32 9B08     		lsrs	r3, r3, #2
 2247 0c34 1360     		str	r3, [r2]
1513:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1514:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1515:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Write curve parameter 'p' as 1st part of vector B.
1516:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1517:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     for(i = 0; i < ptCurve->ui8Size; i++)
 2248              		.loc 1 1517 0
 2249 0c36 0023     		movs	r3, #0
 2250 0c38 FB61     		str	r3, [r7, #28]
 2251 0c3a 13E0     		b	.L136
 2252              	.L137:
1518:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
1519:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) =
 2253              		.loc 1 1519 0 discriminator 3
 2254 0c3c FB69     		ldr	r3, [r7, #28]
 2255 0c3e 9B00     		lsls	r3, r3, #2
 2256 0c40 1A46     		mov	r2, r3
 2257 0c42 BB69     		ldr	r3, [r7, #24]
 2258 0c44 1344     		add	r3, r3, r2
 2259 0c46 03F18843 		add	r3, r3, #1140850688
 2260 0c4a 03F5C043 		add	r3, r3, #24576
 2261 0c4e 1946     		mov	r1, r3
1520:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****             (uint32_t)ptCurve->pui32Prime[i];
 2262              		.loc 1 1520 0 discriminator 3
 2263 0c50 BB68     		ldr	r3, [r7, #8]
 2264 0c52 9A68     		ldr	r2, [r3, #8]
 2265 0c54 FB69     		ldr	r3, [r7, #28]
 2266 0c56 9B00     		lsls	r3, r3, #2
 2267 0c58 1344     		add	r3, r3, r2
 2268 0c5a 1B68     		ldr	r3, [r3]
1519:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****             (uint32_t)ptCurve->pui32Prime[i];
 2269              		.loc 1 1519 0 discriminator 3
 2270 0c5c 0B60     		str	r3, [r1]
1517:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 2271              		.loc 1 1517 0 discriminator 3
 2272 0c5e FB69     		ldr	r3, [r7, #28]
 2273 0c60 0133     		adds	r3, r3, #1
 2274 0c62 FB61     		str	r3, [r7, #28]
 2275              	.L136:
1517:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 2276              		.loc 1 1517 0 is_stmt 0 discriminator 1
 2277 0c64 BB68     		ldr	r3, [r7, #8]
 2278 0c66 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2279 0c68 1A46     		mov	r2, r3
 2280 0c6a FB69     		ldr	r3, [r7, #28]
 2281 0c6c 9A42     		cmp	r2, r3
 2282 0c6e E5DC     		bgt	.L137
1521:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
1522:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1523:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1524:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Determine the offset in PKA RAM for the next data.
1525:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1526:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     offset += 4 * (i + extraBuf);
 2283              		.loc 1 1526 0 is_stmt 1
 2284 0c70 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 2285 0c72 FB69     		ldr	r3, [r7, #28]
 2286 0c74 1344     		add	r3, r3, r2
 2287 0c76 9B00     		lsls	r3, r3, #2
 2288 0c78 1A46     		mov	r2, r3
 2289 0c7a BB69     		ldr	r3, [r7, #24]
 2290 0c7c 1344     		add	r3, r3, r2
 2291 0c7e BB61     		str	r3, [r7, #24]
1527:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1528:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1529:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Write curve parameter 'a' in PKA RAM.
1530:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1531:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     for(i = 0; i < ptCurve->ui8Size; i++)
 2292              		.loc 1 1531 0
 2293 0c80 0023     		movs	r3, #0
 2294 0c82 FB61     		str	r3, [r7, #28]
 2295 0c84 13E0     		b	.L138
 2296              	.L139:
1532:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
1533:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) = (uint32_t)ptCurve->pui32A[i];
 2297              		.loc 1 1533 0 discriminator 3
 2298 0c86 FB69     		ldr	r3, [r7, #28]
 2299 0c88 9B00     		lsls	r3, r3, #2
 2300 0c8a 1A46     		mov	r2, r3
 2301 0c8c BB69     		ldr	r3, [r7, #24]
 2302 0c8e 1344     		add	r3, r3, r2
 2303 0c90 03F18843 		add	r3, r3, #1140850688
 2304 0c94 03F5C043 		add	r3, r3, #24576
 2305 0c98 1946     		mov	r1, r3
 2306 0c9a BB68     		ldr	r3, [r7, #8]
 2307 0c9c 1A69     		ldr	r2, [r3, #16]
 2308 0c9e FB69     		ldr	r3, [r7, #28]
 2309 0ca0 9B00     		lsls	r3, r3, #2
 2310 0ca2 1344     		add	r3, r3, r2
 2311 0ca4 1B68     		ldr	r3, [r3]
 2312 0ca6 0B60     		str	r3, [r1]
1531:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 2313              		.loc 1 1531 0 discriminator 3
 2314 0ca8 FB69     		ldr	r3, [r7, #28]
 2315 0caa 0133     		adds	r3, r3, #1
 2316 0cac FB61     		str	r3, [r7, #28]
 2317              	.L138:
1531:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 2318              		.loc 1 1531 0 is_stmt 0 discriminator 1
 2319 0cae BB68     		ldr	r3, [r7, #8]
 2320 0cb0 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2321 0cb2 1A46     		mov	r2, r3
 2322 0cb4 FB69     		ldr	r3, [r7, #28]
 2323 0cb6 9A42     		cmp	r2, r3
 2324 0cb8 E5DC     		bgt	.L139
1534:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
1535:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1536:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1537:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Determine the offset in PKA RAM for the next data.
1538:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1539:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     offset += 4 * (i + extraBuf);
 2325              		.loc 1 1539 0 is_stmt 1
 2326 0cba FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 2327 0cbc FB69     		ldr	r3, [r7, #28]
 2328 0cbe 1344     		add	r3, r3, r2
 2329 0cc0 9B00     		lsls	r3, r3, #2
 2330 0cc2 1A46     		mov	r2, r3
 2331 0cc4 BB69     		ldr	r3, [r7, #24]
 2332 0cc6 1344     		add	r3, r3, r2
 2333 0cc8 BB61     		str	r3, [r7, #24]
1540:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1541:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1542:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // write curve parameter 'b' in PKA RAM.
1543:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1544:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     for(i = 0; i < ptCurve->ui8Size; i++)
 2334              		.loc 1 1544 0
 2335 0cca 0023     		movs	r3, #0
 2336 0ccc FB61     		str	r3, [r7, #28]
 2337 0cce 13E0     		b	.L140
 2338              	.L141:
1545:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
1546:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) = (uint32_t)ptCurve->pui32B[i];
 2339              		.loc 1 1546 0 discriminator 3
 2340 0cd0 FB69     		ldr	r3, [r7, #28]
 2341 0cd2 9B00     		lsls	r3, r3, #2
 2342 0cd4 1A46     		mov	r2, r3
 2343 0cd6 BB69     		ldr	r3, [r7, #24]
 2344 0cd8 1344     		add	r3, r3, r2
 2345 0cda 03F18843 		add	r3, r3, #1140850688
 2346 0cde 03F5C043 		add	r3, r3, #24576
 2347 0ce2 1946     		mov	r1, r3
 2348 0ce4 BB68     		ldr	r3, [r7, #8]
 2349 0ce6 5A69     		ldr	r2, [r3, #20]
 2350 0ce8 FB69     		ldr	r3, [r7, #28]
 2351 0cea 9B00     		lsls	r3, r3, #2
 2352 0cec 1344     		add	r3, r3, r2
 2353 0cee 1B68     		ldr	r3, [r3]
 2354 0cf0 0B60     		str	r3, [r1]
1544:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 2355              		.loc 1 1544 0 discriminator 3
 2356 0cf2 FB69     		ldr	r3, [r7, #28]
 2357 0cf4 0133     		adds	r3, r3, #1
 2358 0cf6 FB61     		str	r3, [r7, #28]
 2359              	.L140:
1544:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 2360              		.loc 1 1544 0 is_stmt 0 discriminator 1
 2361 0cf8 BB68     		ldr	r3, [r7, #8]
 2362 0cfa 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2363 0cfc 1A46     		mov	r2, r3
 2364 0cfe FB69     		ldr	r3, [r7, #28]
 2365 0d00 9A42     		cmp	r2, r3
 2366 0d02 E5DC     		bgt	.L141
1547:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
1548:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1549:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1550:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Determine the offset in PKA RAM for the next data.
1551:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1552:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     offset += 4 * (i + extraBuf);
 2367              		.loc 1 1552 0 is_stmt 1
 2368 0d04 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 2369 0d06 FB69     		ldr	r3, [r7, #28]
 2370 0d08 1344     		add	r3, r3, r2
 2371 0d0a 9B00     		lsls	r3, r3, #2
 2372 0d0c 1A46     		mov	r2, r3
 2373 0d0e BB69     		ldr	r3, [r7, #24]
 2374 0d10 1344     		add	r3, r3, r2
 2375 0d12 BB61     		str	r3, [r7, #24]
1553:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1554:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1555:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Update the C ptr with the offset address of the PKA RAM location
1556:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // where the Gx, Gy will be stored.
1557:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1558:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG(PKA_CPTR) = offset >> 2;
 2376              		.loc 1 1558 0
 2377 0d14 384A     		ldr	r2, .L146+12
 2378 0d16 BB69     		ldr	r3, [r7, #24]
 2379 0d18 9B08     		lsrs	r3, r3, #2
 2380 0d1a 1360     		str	r3, [r2]
1559:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1560:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1561:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Write x co-ordinate value of the Generator point in PKA RAM.
1562:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1563:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     for(i = 0; i < ptCurve->ui8Size; i++)
 2381              		.loc 1 1563 0
 2382 0d1c 0023     		movs	r3, #0
 2383 0d1e FB61     		str	r3, [r7, #28]
 2384 0d20 13E0     		b	.L142
 2385              	.L143:
1564:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
1565:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) = (uint32_t)ptCurve->pui32Gx[i];
 2386              		.loc 1 1565 0 discriminator 3
 2387 0d22 FB69     		ldr	r3, [r7, #28]
 2388 0d24 9B00     		lsls	r3, r3, #2
 2389 0d26 1A46     		mov	r2, r3
 2390 0d28 BB69     		ldr	r3, [r7, #24]
 2391 0d2a 1344     		add	r3, r3, r2
 2392 0d2c 03F18843 		add	r3, r3, #1140850688
 2393 0d30 03F5C043 		add	r3, r3, #24576
 2394 0d34 1946     		mov	r1, r3
 2395 0d36 BB68     		ldr	r3, [r7, #8]
 2396 0d38 9A69     		ldr	r2, [r3, #24]
 2397 0d3a FB69     		ldr	r3, [r7, #28]
 2398 0d3c 9B00     		lsls	r3, r3, #2
 2399 0d3e 1344     		add	r3, r3, r2
 2400 0d40 1B68     		ldr	r3, [r3]
 2401 0d42 0B60     		str	r3, [r1]
1563:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 2402              		.loc 1 1563 0 discriminator 3
 2403 0d44 FB69     		ldr	r3, [r7, #28]
 2404 0d46 0133     		adds	r3, r3, #1
 2405 0d48 FB61     		str	r3, [r7, #28]
 2406              	.L142:
1563:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 2407              		.loc 1 1563 0 is_stmt 0 discriminator 1
 2408 0d4a BB68     		ldr	r3, [r7, #8]
 2409 0d4c 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2410 0d4e 1A46     		mov	r2, r3
 2411 0d50 FB69     		ldr	r3, [r7, #28]
 2412 0d52 9A42     		cmp	r2, r3
 2413 0d54 E5DC     		bgt	.L143
1566:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
1567:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1568:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1569:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Determine the offset in PKA RAM for the next data.
1570:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1571:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     offset += 4 * (i + extraBuf);
 2414              		.loc 1 1571 0 is_stmt 1
 2415 0d56 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 2416 0d58 FB69     		ldr	r3, [r7, #28]
 2417 0d5a 1344     		add	r3, r3, r2
 2418 0d5c 9B00     		lsls	r3, r3, #2
 2419 0d5e 1A46     		mov	r2, r3
 2420 0d60 BB69     		ldr	r3, [r7, #24]
 2421 0d62 1344     		add	r3, r3, r2
 2422 0d64 BB61     		str	r3, [r7, #24]
1572:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1573:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1574:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Write y co-ordinate value of the Generator point in PKA RAM.
1575:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1576:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     for(i = 0; i < ptCurve->ui8Size; i++)
 2423              		.loc 1 1576 0
 2424 0d66 0023     		movs	r3, #0
 2425 0d68 FB61     		str	r3, [r7, #28]
 2426 0d6a 13E0     		b	.L144
 2427              	.L145:
1577:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
1578:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) = (uint32_t)ptCurve->pui32Gy[i];
 2428              		.loc 1 1578 0 discriminator 3
 2429 0d6c FB69     		ldr	r3, [r7, #28]
 2430 0d6e 9B00     		lsls	r3, r3, #2
 2431 0d70 1A46     		mov	r2, r3
 2432 0d72 BB69     		ldr	r3, [r7, #24]
 2433 0d74 1344     		add	r3, r3, r2
 2434 0d76 03F18843 		add	r3, r3, #1140850688
 2435 0d7a 03F5C043 		add	r3, r3, #24576
 2436 0d7e 1946     		mov	r1, r3
 2437 0d80 BB68     		ldr	r3, [r7, #8]
 2438 0d82 DA69     		ldr	r2, [r3, #28]
 2439 0d84 FB69     		ldr	r3, [r7, #28]
 2440 0d86 9B00     		lsls	r3, r3, #2
 2441 0d88 1344     		add	r3, r3, r2
 2442 0d8a 1B68     		ldr	r3, [r3]
 2443 0d8c 0B60     		str	r3, [r1]
1576:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 2444              		.loc 1 1576 0 discriminator 3
 2445 0d8e FB69     		ldr	r3, [r7, #28]
 2446 0d90 0133     		adds	r3, r3, #1
 2447 0d92 FB61     		str	r3, [r7, #28]
 2448              	.L144:
1576:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 2449              		.loc 1 1576 0 is_stmt 0 discriminator 1
 2450 0d94 BB68     		ldr	r3, [r7, #8]
 2451 0d96 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2452 0d98 1A46     		mov	r2, r3
 2453 0d9a FB69     		ldr	r3, [r7, #28]
 2454 0d9c 9A42     		cmp	r2, r3
 2455 0d9e E5DC     		bgt	.L145
1579:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
1580:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1581:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1582:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Determine the offset in PKA RAM for the next data.
1583:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1584:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     offset += 4 * (i + extraBuf);
 2456              		.loc 1 1584 0 is_stmt 1
 2457 0da0 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 2458 0da2 FB69     		ldr	r3, [r7, #28]
 2459 0da4 1344     		add	r3, r3, r2
 2460 0da6 9B00     		lsls	r3, r3, #2
 2461 0da8 1A46     		mov	r2, r3
 2462 0daa BB69     		ldr	r3, [r7, #24]
 2463 0dac 1344     		add	r3, r3, r2
 2464 0dae BB61     		str	r3, [r7, #24]
1585:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1586:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1587:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Update the result location.
1588:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1589:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     *pui32ResultVector =  PKA_RAM_BASE + offset;
 2465              		.loc 1 1589 0
 2466 0db0 BB69     		ldr	r3, [r7, #24]
 2467 0db2 03F18843 		add	r3, r3, #1140850688
 2468 0db6 03F5C043 		add	r3, r3, #24576
 2469 0dba 7A68     		ldr	r2, [r7, #4]
 2470 0dbc 1360     		str	r3, [r2]
1590:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1591:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1592:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Load D ptr with the result location in PKA RAM.
1593:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1594:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG(PKA_DPTR) = offset >> 2;
 2471              		.loc 1 1594 0
 2472 0dbe 0F4A     		ldr	r2, .L146+16
 2473 0dc0 BB69     		ldr	r3, [r7, #24]
 2474 0dc2 9B08     		lsrs	r3, r3, #2
 2475 0dc4 1360     		str	r3, [r2]
1595:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1596:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1597:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Load length registers.
1598:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1599:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG(PKA_ALENGTH) = ptCurve->ui8Size;
 2476              		.loc 1 1599 0
 2477 0dc6 0E4A     		ldr	r2, .L146+20
 2478 0dc8 BB68     		ldr	r3, [r7, #8]
 2479 0dca 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2480 0dcc 1360     		str	r3, [r2]
1600:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG(PKA_BLENGTH) = ptCurve->ui8Size;
 2481              		.loc 1 1600 0
 2482 0dce 0D4A     		ldr	r2, .L146+24
 2483 0dd0 BB68     		ldr	r3, [r7, #8]
 2484 0dd2 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2485 0dd4 1360     		str	r3, [r2]
1601:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1602:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1603:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Set the PKA function to ECC-MULT and start the operation.
1604:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1605:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG( (PKA_FUNCTION) ) = 0x0000D000;
 2486              		.loc 1 1605 0
 2487 0dd6 054B     		ldr	r3, .L146
 2488 0dd8 4FF45042 		mov	r2, #53248
 2489 0ddc 1A60     		str	r2, [r3]
1606:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1607:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     return (PKA_STATUS_SUCCESS);
 2490              		.loc 1 1607 0
 2491 0dde 0023     		movs	r3, #0
 2492              	.L133:
1608:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** }
 2493              		.loc 1 1608 0
 2494 0de0 1846     		mov	r0, r3
 2495 0de2 2437     		adds	r7, r7, #36
 2496              		.cfi_def_cfa_offset 4
 2497 0de4 BD46     		mov	sp, r7
 2498              		.cfi_def_cfa_register 13
 2499              		@ sp needed
 2500 0de6 80BC     		pop	{r7}
 2501              		.cfi_restore 7
 2502              		.cfi_def_cfa_offset 0
 2503 0de8 7047     		bx	lr
 2504              	.L147:
 2505 0dea 00BF     		.align	2
 2506              	.L146:
 2507 0dec 1C400044 		.word	1140867100
 2508 0df0 00400044 		.word	1140867072
 2509 0df4 04400044 		.word	1140867076
 2510 0df8 08400044 		.word	1140867080
 2511 0dfc 0C400044 		.word	1140867084
 2512 0e00 10400044 		.word	1140867088
 2513 0e04 14400044 		.word	1140867092
 2514              		.cfi_endproc
 2515              	.LFE18:
 2517              		.align	2
 2518              		.global	PKAECCMultGenPtGetResult
 2519              		.thumb
 2520              		.thumb_func
 2522              	PKAECCMultGenPtGetResult:
 2523              	.LFB19:
1609:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1610:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
1611:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
1612:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! Gets the result of ECC Multiplication with Generator point.
1613:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
1614:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param ptOutEcPt is the pointer to the structure where the resultant EC
1615:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! point will be stored.  The callee is responsible to allocate the space for
1616:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! the ec point structure and the x and y co-ordinate as well.
1617:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param ui32ResVectorLoc is the address of the result location which
1618:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! was provided by the start function \sa PKAECCMultGenPtStart().
1619:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
1620:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! This function gets the result of ecc point multiplication operation on the
1621:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! scalar point and the known generator point on the curve, previously started
1622:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! using the function \sa PKAECCMultGenPtStart().
1623:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
1624:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \return Returns:
1625:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_SUCCESS if the operation is successful. 
1626:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_OPERATION_INPRG, if the PKA hw module is busy performing 
1627:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! the operation.
1628:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_RESULT_0 if the result is all zeroes.
1629:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_FAILURE if the operation is not successful.
1630:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
1631:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
1632:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** tPKAStatus
1633:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** PKAECCMultGenPtGetResult(tECPt* ptOutEcPt, uint32_t ui32ResVectorLoc)
1634:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** {
 2524              		.loc 1 1634 0
 2525              		.cfi_startproc
 2526              		@ args = 0, pretend = 0, frame = 24
 2527              		@ frame_needed = 1, uses_anonymous_args = 0
 2528              		@ link register save eliminated.
 2529 0e08 80B4     		push	{r7}
 2530              		.cfi_def_cfa_offset 4
 2531              		.cfi_offset 7, -4
 2532 0e0a 87B0     		sub	sp, sp, #28
 2533              		.cfi_def_cfa_offset 32
 2534 0e0c 00AF     		add	r7, sp, #0
 2535              		.cfi_def_cfa_register 7
 2536 0e0e 7860     		str	r0, [r7, #4]
 2537 0e10 3960     		str	r1, [r7]
1635:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     int i;
1636:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     uint32_t regMSWVal;
1637:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     uint32_t addr;
1638:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     uint32_t len;
1639:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1640:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1641:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Check for the arguments.
1642:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1643:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != ptOutEcPt);
1644:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != ptOutEcPt->pui32X);
1645:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != ptOutEcPt->pui32Y);
1646:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT((ui32ResVectorLoc > PKA_RAM_BASE) &&
1647:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****            (ui32ResVectorLoc < (PKA_RAM_BASE + PKA_RAM_SIZE)));
1648:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1649:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1650:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Verify that the operation is completed.
1651:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1652:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     if((HWREG(PKA_FUNCTION) & PKA_FUNCTION_RUN) != 0)
 2538              		.loc 1 1652 0
 2539 0e12 314B     		ldr	r3, .L157
 2540 0e14 1B68     		ldr	r3, [r3]
 2541 0e16 03F40043 		and	r3, r3, #32768
 2542 0e1a 002B     		cmp	r3, #0
 2543 0e1c 01D0     		beq	.L149
1653:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
1654:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         return (PKA_STATUS_OPERATION_INPRG);
 2544              		.loc 1 1654 0
 2545 0e1e 0723     		movs	r3, #7
 2546 0e20 54E0     		b	.L150
 2547              	.L149:
1655:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
1656:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1657:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     if(HWREG(PKA_SHIFT) == 0x00000000)
 2548              		.loc 1 1657 0
 2549 0e22 2E4B     		ldr	r3, .L157+4
 2550 0e24 1B68     		ldr	r3, [r3]
 2551 0e26 002B     		cmp	r3, #0
 2552 0e28 4FD1     		bne	.L151
1658:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
1659:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         //
1660:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         // Get the MSW register value.
1661:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         //
1662:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         regMSWVal = HWREG(PKA_MSW);
 2553              		.loc 1 1662 0
 2554 0e2a 2D4B     		ldr	r3, .L157+8
 2555 0e2c 1B68     		ldr	r3, [r3]
 2556 0e2e 3B61     		str	r3, [r7, #16]
1663:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1664:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         //
1665:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         // Check to make sure that the result vector is not all zeroes.
1666:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         //
1667:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         if(regMSWVal & PKA_MSW_RESULT_IS_ZERO)
 2557              		.loc 1 1667 0
 2558 0e30 3B69     		ldr	r3, [r7, #16]
 2559 0e32 03F40043 		and	r3, r3, #32768
 2560 0e36 002B     		cmp	r3, #0
 2561 0e38 01D0     		beq	.L152
1668:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         {
1669:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****             return (PKA_STATUS_RESULT_0);
 2562              		.loc 1 1669 0
 2563 0e3a 0423     		movs	r3, #4
 2564 0e3c 46E0     		b	.L150
 2565              	.L152:
1670:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         }
1671:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1672:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         //
1673:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         // Get the length of the result.
1674:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         //
1675:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         len = ((regMSWVal & PKA_MSW_MSW_ADDRESS_M) + 1) -
 2566              		.loc 1 1675 0
 2567 0e3e 3B69     		ldr	r3, [r7, #16]
 2568 0e40 C3F30A02 		ubfx	r2, r3, #0, #11
1676:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****               ((ui32ResVectorLoc - PKA_RAM_BASE) >> 2);
 2569              		.loc 1 1676 0
 2570 0e44 3B68     		ldr	r3, [r7]
 2571 0e46 03F13C43 		add	r3, r3, #-1140850688
 2572 0e4a A3F5C043 		sub	r3, r3, #24576
 2573 0e4e 9B08     		lsrs	r3, r3, #2
1675:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****               ((ui32ResVectorLoc - PKA_RAM_BASE) >> 2);
 2574              		.loc 1 1675 0
 2575 0e50 D31A     		subs	r3, r2, r3
 2576 0e52 0133     		adds	r3, r3, #1
 2577 0e54 FB60     		str	r3, [r7, #12]
1677:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1678:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         addr = ui32ResVectorLoc;
 2578              		.loc 1 1678 0
 2579 0e56 3B68     		ldr	r3, [r7]
 2580 0e58 BB60     		str	r3, [r7, #8]
1679:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1680:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         //
1681:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         // Copy the x co-ordinate value of the result from vector D into the
1682:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         // EC point.
1683:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         //
1684:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         for(i = 0; i < len; i++)
 2581              		.loc 1 1684 0
 2582 0e5a 0023     		movs	r3, #0
 2583 0e5c 7B61     		str	r3, [r7, #20]
 2584 0e5e 0EE0     		b	.L153
 2585              	.L154:
1685:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         {
1686:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****             ptOutEcPt->pui32X[i] = HWREG( (addr + 4*i) );
 2586              		.loc 1 1686 0 discriminator 3
 2587 0e60 7B68     		ldr	r3, [r7, #4]
 2588 0e62 1A68     		ldr	r2, [r3]
 2589 0e64 7B69     		ldr	r3, [r7, #20]
 2590 0e66 9B00     		lsls	r3, r3, #2
 2591 0e68 1344     		add	r3, r3, r2
 2592 0e6a 7A69     		ldr	r2, [r7, #20]
 2593 0e6c 9200     		lsls	r2, r2, #2
 2594 0e6e 1146     		mov	r1, r2
 2595 0e70 BA68     		ldr	r2, [r7, #8]
 2596 0e72 0A44     		add	r2, r2, r1
 2597 0e74 1268     		ldr	r2, [r2]
 2598 0e76 1A60     		str	r2, [r3]
1684:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         {
 2599              		.loc 1 1684 0 discriminator 3
 2600 0e78 7B69     		ldr	r3, [r7, #20]
 2601 0e7a 0133     		adds	r3, r3, #1
 2602 0e7c 7B61     		str	r3, [r7, #20]
 2603              	.L153:
1684:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         {
 2604              		.loc 1 1684 0 is_stmt 0 discriminator 1
 2605 0e7e 7A69     		ldr	r2, [r7, #20]
 2606 0e80 FB68     		ldr	r3, [r7, #12]
 2607 0e82 9A42     		cmp	r2, r3
 2608 0e84 ECD3     		bcc	.L154
1687:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         }
1688:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1689:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         addr += 4 * (i + 2 + len % 2);
 2609              		.loc 1 1689 0 is_stmt 1
 2610 0e86 FB68     		ldr	r3, [r7, #12]
 2611 0e88 03F00102 		and	r2, r3, #1
 2612 0e8c 7B69     		ldr	r3, [r7, #20]
 2613 0e8e 1344     		add	r3, r3, r2
 2614 0e90 0233     		adds	r3, r3, #2
 2615 0e92 9B00     		lsls	r3, r3, #2
 2616 0e94 BA68     		ldr	r2, [r7, #8]
 2617 0e96 1344     		add	r3, r3, r2
 2618 0e98 BB60     		str	r3, [r7, #8]
1690:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1691:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         //
1692:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         // Copy the y co-ordinate value of the result from vector D into the
1693:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         // EC point.
1694:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         //
1695:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         for(i = 0; i < len; i++)
 2619              		.loc 1 1695 0
 2620 0e9a 0023     		movs	r3, #0
 2621 0e9c 7B61     		str	r3, [r7, #20]
 2622 0e9e 0EE0     		b	.L155
 2623              	.L156:
1696:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         {
1697:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****             ptOutEcPt->pui32Y[i] = HWREG( (addr + 4*i) );
 2624              		.loc 1 1697 0 discriminator 3
 2625 0ea0 7B68     		ldr	r3, [r7, #4]
 2626 0ea2 5A68     		ldr	r2, [r3, #4]
 2627 0ea4 7B69     		ldr	r3, [r7, #20]
 2628 0ea6 9B00     		lsls	r3, r3, #2
 2629 0ea8 1344     		add	r3, r3, r2
 2630 0eaa 7A69     		ldr	r2, [r7, #20]
 2631 0eac 9200     		lsls	r2, r2, #2
 2632 0eae 1146     		mov	r1, r2
 2633 0eb0 BA68     		ldr	r2, [r7, #8]
 2634 0eb2 0A44     		add	r2, r2, r1
 2635 0eb4 1268     		ldr	r2, [r2]
 2636 0eb6 1A60     		str	r2, [r3]
1695:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         {
 2637              		.loc 1 1695 0 discriminator 3
 2638 0eb8 7B69     		ldr	r3, [r7, #20]
 2639 0eba 0133     		adds	r3, r3, #1
 2640 0ebc 7B61     		str	r3, [r7, #20]
 2641              	.L155:
1695:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         {
 2642              		.loc 1 1695 0 is_stmt 0 discriminator 1
 2643 0ebe 7A69     		ldr	r2, [r7, #20]
 2644 0ec0 FB68     		ldr	r3, [r7, #12]
 2645 0ec2 9A42     		cmp	r2, r3
 2646 0ec4 ECD3     		bcc	.L156
1698:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         }
1699:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1700:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         return (PKA_STATUS_SUCCESS);
 2647              		.loc 1 1700 0 is_stmt 1
 2648 0ec6 0023     		movs	r3, #0
 2649 0ec8 00E0     		b	.L150
 2650              	.L151:
1701:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
1702:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     else
1703:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
1704:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         return (PKA_STATUS_FAILURE);
 2651              		.loc 1 1704 0
 2652 0eca 0123     		movs	r3, #1
 2653              	.L150:
1705:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
1706:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** }
 2654              		.loc 1 1706 0
 2655 0ecc 1846     		mov	r0, r3
 2656 0ece 1C37     		adds	r7, r7, #28
 2657              		.cfi_def_cfa_offset 4
 2658 0ed0 BD46     		mov	sp, r7
 2659              		.cfi_def_cfa_register 13
 2660              		@ sp needed
 2661 0ed2 80BC     		pop	{r7}
 2662              		.cfi_restore 7
 2663              		.cfi_def_cfa_offset 0
 2664 0ed4 7047     		bx	lr
 2665              	.L158:
 2666 0ed6 00BF     		.align	2
 2667              	.L157:
 2668 0ed8 1C400044 		.word	1140867100
 2669 0edc 18400044 		.word	1140867096
 2670 0ee0 24400044 		.word	1140867108
 2671              		.cfi_endproc
 2672              	.LFE19:
 2674              		.align	2
 2675              		.global	PKAECCAddStart
 2676              		.thumb
 2677              		.thumb_func
 2679              	PKAECCAddStart:
 2680              	.LFB20:
1707:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1708:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
1709:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
1710:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! Starts the ECC Addition.
1711:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
1712:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param ptEcPt1 is the pointer to the structure containing the first
1713:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! ecc point.
1714:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param ptEcPt2 is the pointer to the structure containing the
1715:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! second ecc point.
1716:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param ptCurve is the pointer to the structure containing the curve
1717:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! info.
1718:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param pui32ResultVector is the pointer to the result vector location
1719:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! which will be set by this function.
1720:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
1721:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! This function starts the ecc point addition operation on the
1722:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! two given ec points and generates the resultant ecc point.
1723:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
1724:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!\return Returns: 
1725:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_SUCCESS if successful in starting the operation.  
1726:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_OPERATION_INPRG, if the PKA hw module is busy doing
1727:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! some other operation.
1728:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
1729:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
1730:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** tPKAStatus
1731:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** PKAECCAddStart(tECPt* ptEcPt1, tECPt* ptEcPt2,tECCCurveInfo* ptCurve,
1732:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****                uint32_t* pui32ResultVector)
1733:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** {
 2681              		.loc 1 1733 0
 2682              		.cfi_startproc
 2683              		@ args = 0, pretend = 0, frame = 32
 2684              		@ frame_needed = 1, uses_anonymous_args = 0
 2685              		@ link register save eliminated.
 2686 0ee4 80B4     		push	{r7}
 2687              		.cfi_def_cfa_offset 4
 2688              		.cfi_offset 7, -4
 2689 0ee6 89B0     		sub	sp, sp, #36
 2690              		.cfi_def_cfa_offset 40
 2691 0ee8 00AF     		add	r7, sp, #0
 2692              		.cfi_def_cfa_register 7
 2693 0eea F860     		str	r0, [r7, #12]
 2694 0eec B960     		str	r1, [r7, #8]
 2695 0eee 7A60     		str	r2, [r7, #4]
 2696 0ef0 3B60     		str	r3, [r7]
1734:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     uint8_t extraBuf;
1735:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     uint32_t offset;
1736:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     int i;
1737:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1738:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1739:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Check for the arguments.
1740:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1741:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != ptEcPt1);
1742:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != ptEcPt1->pui32X);
1743:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != ptEcPt1->pui32Y);
1744:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != ptEcPt2);
1745:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != ptEcPt2->pui32X);
1746:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != ptEcPt2->pui32Y);
1747:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != ptCurve);
1748:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != pui32ResultVector);
1749:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1750:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     offset = 0;
 2697              		.loc 1 1750 0
 2698 0ef2 0023     		movs	r3, #0
 2699 0ef4 BB61     		str	r3, [r7, #24]
1751:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1752:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1753:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Make sure no operation is in progress.
1754:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1755:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     if((HWREG(PKA_FUNCTION) & PKA_FUNCTION_RUN) != 0)
 2700              		.loc 1 1755 0
 2701 0ef6 894B     		ldr	r3, .L174
 2702 0ef8 1B68     		ldr	r3, [r3]
 2703 0efa 03F40043 		and	r3, r3, #32768
 2704 0efe 002B     		cmp	r3, #0
 2705 0f00 01D0     		beq	.L160
1756:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
1757:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         return (PKA_STATUS_OPERATION_INPRG);
 2706              		.loc 1 1757 0
 2707 0f02 0723     		movs	r3, #7
 2708 0f04 04E1     		b	.L161
 2709              	.L160:
1758:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
1759:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1760:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1761:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Calculate the extra buffer requirement.
1762:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1763:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     extraBuf = 2 + ptCurve->ui8Size % 2;
 2710              		.loc 1 1763 0
 2711 0f06 7B68     		ldr	r3, [r7, #4]
 2712 0f08 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2713 0f0a 03F00103 		and	r3, r3, #1
 2714 0f0e DBB2     		uxtb	r3, r3
 2715 0f10 0233     		adds	r3, r3, #2
 2716 0f12 FB75     		strb	r3, [r7, #23]
1764:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1765:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1766:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Update the A ptr with the offset address of the PKA RAM location
1767:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // where the first ecPt will be stored.
1768:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1769:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG(PKA_APTR) = offset >> 2;
 2717              		.loc 1 1769 0
 2718 0f14 824A     		ldr	r2, .L174+4
 2719 0f16 BB69     		ldr	r3, [r7, #24]
 2720 0f18 9B08     		lsrs	r3, r3, #2
 2721 0f1a 1360     		str	r3, [r2]
1770:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1771:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1772:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Load the x co-ordinate value of the first EC point in PKA RAM.
1773:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1774:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     for(i = 0; i < ptCurve->ui8Size; i++)
 2722              		.loc 1 1774 0
 2723 0f1c 0023     		movs	r3, #0
 2724 0f1e FB61     		str	r3, [r7, #28]
 2725 0f20 13E0     		b	.L162
 2726              	.L163:
1775:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
1776:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) = ptEcPt1->pui32X[i];
 2727              		.loc 1 1776 0 discriminator 3
 2728 0f22 FB69     		ldr	r3, [r7, #28]
 2729 0f24 9B00     		lsls	r3, r3, #2
 2730 0f26 1A46     		mov	r2, r3
 2731 0f28 BB69     		ldr	r3, [r7, #24]
 2732 0f2a 1344     		add	r3, r3, r2
 2733 0f2c 03F18843 		add	r3, r3, #1140850688
 2734 0f30 03F5C043 		add	r3, r3, #24576
 2735 0f34 1946     		mov	r1, r3
 2736 0f36 FB68     		ldr	r3, [r7, #12]
 2737 0f38 1A68     		ldr	r2, [r3]
 2738 0f3a FB69     		ldr	r3, [r7, #28]
 2739 0f3c 9B00     		lsls	r3, r3, #2
 2740 0f3e 1344     		add	r3, r3, r2
 2741 0f40 1B68     		ldr	r3, [r3]
 2742 0f42 0B60     		str	r3, [r1]
1774:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 2743              		.loc 1 1774 0 discriminator 3
 2744 0f44 FB69     		ldr	r3, [r7, #28]
 2745 0f46 0133     		adds	r3, r3, #1
 2746 0f48 FB61     		str	r3, [r7, #28]
 2747              	.L162:
1774:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 2748              		.loc 1 1774 0 is_stmt 0 discriminator 1
 2749 0f4a 7B68     		ldr	r3, [r7, #4]
 2750 0f4c 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2751 0f4e 1A46     		mov	r2, r3
 2752 0f50 FB69     		ldr	r3, [r7, #28]
 2753 0f52 9A42     		cmp	r2, r3
 2754 0f54 E5DC     		bgt	.L163
1777:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
1778:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1779:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1780:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Determine the offset in PKA RAM for the next data.
1781:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1782:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     offset += 4 * (i + extraBuf);
 2755              		.loc 1 1782 0 is_stmt 1
 2756 0f56 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 2757 0f58 FB69     		ldr	r3, [r7, #28]
 2758 0f5a 1344     		add	r3, r3, r2
 2759 0f5c 9B00     		lsls	r3, r3, #2
 2760 0f5e 1A46     		mov	r2, r3
 2761 0f60 BB69     		ldr	r3, [r7, #24]
 2762 0f62 1344     		add	r3, r3, r2
 2763 0f64 BB61     		str	r3, [r7, #24]
1783:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1784:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1785:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Load the y co-ordinate value of the first EC point in PKA RAM.
1786:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1787:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     for(i = 0; i < ptCurve->ui8Size; i++)
 2764              		.loc 1 1787 0
 2765 0f66 0023     		movs	r3, #0
 2766 0f68 FB61     		str	r3, [r7, #28]
 2767 0f6a 13E0     		b	.L164
 2768              	.L165:
1788:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
1789:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) = ptEcPt1->pui32Y[i];
 2769              		.loc 1 1789 0 discriminator 3
 2770 0f6c FB69     		ldr	r3, [r7, #28]
 2771 0f6e 9B00     		lsls	r3, r3, #2
 2772 0f70 1A46     		mov	r2, r3
 2773 0f72 BB69     		ldr	r3, [r7, #24]
 2774 0f74 1344     		add	r3, r3, r2
 2775 0f76 03F18843 		add	r3, r3, #1140850688
 2776 0f7a 03F5C043 		add	r3, r3, #24576
 2777 0f7e 1946     		mov	r1, r3
 2778 0f80 FB68     		ldr	r3, [r7, #12]
 2779 0f82 5A68     		ldr	r2, [r3, #4]
 2780 0f84 FB69     		ldr	r3, [r7, #28]
 2781 0f86 9B00     		lsls	r3, r3, #2
 2782 0f88 1344     		add	r3, r3, r2
 2783 0f8a 1B68     		ldr	r3, [r3]
 2784 0f8c 0B60     		str	r3, [r1]
1787:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 2785              		.loc 1 1787 0 discriminator 3
 2786 0f8e FB69     		ldr	r3, [r7, #28]
 2787 0f90 0133     		adds	r3, r3, #1
 2788 0f92 FB61     		str	r3, [r7, #28]
 2789              	.L164:
1787:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 2790              		.loc 1 1787 0 is_stmt 0 discriminator 1
 2791 0f94 7B68     		ldr	r3, [r7, #4]
 2792 0f96 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2793 0f98 1A46     		mov	r2, r3
 2794 0f9a FB69     		ldr	r3, [r7, #28]
 2795 0f9c 9A42     		cmp	r2, r3
 2796 0f9e E5DC     		bgt	.L165
1790:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
1791:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1792:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1793:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Determine the offset in PKA RAM for the next data.
1794:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1795:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     offset += 4 * (i + extraBuf);
 2797              		.loc 1 1795 0 is_stmt 1
 2798 0fa0 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 2799 0fa2 FB69     		ldr	r3, [r7, #28]
 2800 0fa4 1344     		add	r3, r3, r2
 2801 0fa6 9B00     		lsls	r3, r3, #2
 2802 0fa8 1A46     		mov	r2, r3
 2803 0faa BB69     		ldr	r3, [r7, #24]
 2804 0fac 1344     		add	r3, r3, r2
 2805 0fae BB61     		str	r3, [r7, #24]
1796:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1797:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1798:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Update the B ptr with the offset address of the PKA RAM location
1799:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // where the curve parameters will be stored.
1800:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1801:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG(PKA_BPTR) = offset >> 2;
 2806              		.loc 1 1801 0
 2807 0fb0 5C4A     		ldr	r2, .L174+8
 2808 0fb2 BB69     		ldr	r3, [r7, #24]
 2809 0fb4 9B08     		lsrs	r3, r3, #2
 2810 0fb6 1360     		str	r3, [r2]
1802:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1803:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1804:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Write curve parameter 'p' as 1st part of vector B
1805:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1806:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     for(i = 0; i < ptCurve->ui8Size; i++)
 2811              		.loc 1 1806 0
 2812 0fb8 0023     		movs	r3, #0
 2813 0fba FB61     		str	r3, [r7, #28]
 2814 0fbc 13E0     		b	.L166
 2815              	.L167:
1807:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
1808:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) =
 2816              		.loc 1 1808 0 discriminator 3
 2817 0fbe FB69     		ldr	r3, [r7, #28]
 2818 0fc0 9B00     		lsls	r3, r3, #2
 2819 0fc2 1A46     		mov	r2, r3
 2820 0fc4 BB69     		ldr	r3, [r7, #24]
 2821 0fc6 1344     		add	r3, r3, r2
 2822 0fc8 03F18843 		add	r3, r3, #1140850688
 2823 0fcc 03F5C043 		add	r3, r3, #24576
 2824 0fd0 1946     		mov	r1, r3
1809:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****             (uint32_t)ptCurve->pui32Prime[i];
 2825              		.loc 1 1809 0 discriminator 3
 2826 0fd2 7B68     		ldr	r3, [r7, #4]
 2827 0fd4 9A68     		ldr	r2, [r3, #8]
 2828 0fd6 FB69     		ldr	r3, [r7, #28]
 2829 0fd8 9B00     		lsls	r3, r3, #2
 2830 0fda 1344     		add	r3, r3, r2
 2831 0fdc 1B68     		ldr	r3, [r3]
1808:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****             (uint32_t)ptCurve->pui32Prime[i];
 2832              		.loc 1 1808 0 discriminator 3
 2833 0fde 0B60     		str	r3, [r1]
1806:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 2834              		.loc 1 1806 0 discriminator 3
 2835 0fe0 FB69     		ldr	r3, [r7, #28]
 2836 0fe2 0133     		adds	r3, r3, #1
 2837 0fe4 FB61     		str	r3, [r7, #28]
 2838              	.L166:
1806:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 2839              		.loc 1 1806 0 is_stmt 0 discriminator 1
 2840 0fe6 7B68     		ldr	r3, [r7, #4]
 2841 0fe8 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2842 0fea 1A46     		mov	r2, r3
 2843 0fec FB69     		ldr	r3, [r7, #28]
 2844 0fee 9A42     		cmp	r2, r3
 2845 0ff0 E5DC     		bgt	.L167
1810:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
1811:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1812:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1813:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Determine the offset in PKA RAM for the next data.
1814:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1815:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     offset += 4 * (i + extraBuf);
 2846              		.loc 1 1815 0 is_stmt 1
 2847 0ff2 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 2848 0ff4 FB69     		ldr	r3, [r7, #28]
 2849 0ff6 1344     		add	r3, r3, r2
 2850 0ff8 9B00     		lsls	r3, r3, #2
 2851 0ffa 1A46     		mov	r2, r3
 2852 0ffc BB69     		ldr	r3, [r7, #24]
 2853 0ffe 1344     		add	r3, r3, r2
 2854 1000 BB61     		str	r3, [r7, #24]
1816:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1817:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1818:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Write curve parameter 'a'.
1819:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1820:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     for(i = 0; i < ptCurve->ui8Size; i++)
 2855              		.loc 1 1820 0
 2856 1002 0023     		movs	r3, #0
 2857 1004 FB61     		str	r3, [r7, #28]
 2858 1006 13E0     		b	.L168
 2859              	.L169:
1821:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
1822:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) = (uint32_t)ptCurve->pui32A[i];
 2860              		.loc 1 1822 0 discriminator 3
 2861 1008 FB69     		ldr	r3, [r7, #28]
 2862 100a 9B00     		lsls	r3, r3, #2
 2863 100c 1A46     		mov	r2, r3
 2864 100e BB69     		ldr	r3, [r7, #24]
 2865 1010 1344     		add	r3, r3, r2
 2866 1012 03F18843 		add	r3, r3, #1140850688
 2867 1016 03F5C043 		add	r3, r3, #24576
 2868 101a 1946     		mov	r1, r3
 2869 101c 7B68     		ldr	r3, [r7, #4]
 2870 101e 1A69     		ldr	r2, [r3, #16]
 2871 1020 FB69     		ldr	r3, [r7, #28]
 2872 1022 9B00     		lsls	r3, r3, #2
 2873 1024 1344     		add	r3, r3, r2
 2874 1026 1B68     		ldr	r3, [r3]
 2875 1028 0B60     		str	r3, [r1]
1820:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 2876              		.loc 1 1820 0 discriminator 3
 2877 102a FB69     		ldr	r3, [r7, #28]
 2878 102c 0133     		adds	r3, r3, #1
 2879 102e FB61     		str	r3, [r7, #28]
 2880              	.L168:
1820:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 2881              		.loc 1 1820 0 is_stmt 0 discriminator 1
 2882 1030 7B68     		ldr	r3, [r7, #4]
 2883 1032 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2884 1034 1A46     		mov	r2, r3
 2885 1036 FB69     		ldr	r3, [r7, #28]
 2886 1038 9A42     		cmp	r2, r3
 2887 103a E5DC     		bgt	.L169
1823:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
1824:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1825:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1826:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Determine the offset in PKA RAM for the next data.
1827:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1828:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     offset += 4 * (i + extraBuf);
 2888              		.loc 1 1828 0 is_stmt 1
 2889 103c FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 2890 103e FB69     		ldr	r3, [r7, #28]
 2891 1040 1344     		add	r3, r3, r2
 2892 1042 9B00     		lsls	r3, r3, #2
 2893 1044 1A46     		mov	r2, r3
 2894 1046 BB69     		ldr	r3, [r7, #24]
 2895 1048 1344     		add	r3, r3, r2
 2896 104a BB61     		str	r3, [r7, #24]
1829:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1830:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1831:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Update the C ptr with the offset address of the PKA RAM location
1832:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // where the ecPt2 will be stored.
1833:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1834:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG(PKA_CPTR) = offset >> 2;
 2897              		.loc 1 1834 0
 2898 104c 364A     		ldr	r2, .L174+12
 2899 104e BB69     		ldr	r3, [r7, #24]
 2900 1050 9B08     		lsrs	r3, r3, #2
 2901 1052 1360     		str	r3, [r2]
1835:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1836:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1837:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Load the x co-ordinate value of the second EC point in PKA RAM.
1838:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1839:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     for(i = 0; i < ptCurve->ui8Size; i++)
 2902              		.loc 1 1839 0
 2903 1054 0023     		movs	r3, #0
 2904 1056 FB61     		str	r3, [r7, #28]
 2905 1058 13E0     		b	.L170
 2906              	.L171:
1840:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
1841:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) = ptEcPt2->pui32X[i];
 2907              		.loc 1 1841 0 discriminator 3
 2908 105a FB69     		ldr	r3, [r7, #28]
 2909 105c 9B00     		lsls	r3, r3, #2
 2910 105e 1A46     		mov	r2, r3
 2911 1060 BB69     		ldr	r3, [r7, #24]
 2912 1062 1344     		add	r3, r3, r2
 2913 1064 03F18843 		add	r3, r3, #1140850688
 2914 1068 03F5C043 		add	r3, r3, #24576
 2915 106c 1946     		mov	r1, r3
 2916 106e BB68     		ldr	r3, [r7, #8]
 2917 1070 1A68     		ldr	r2, [r3]
 2918 1072 FB69     		ldr	r3, [r7, #28]
 2919 1074 9B00     		lsls	r3, r3, #2
 2920 1076 1344     		add	r3, r3, r2
 2921 1078 1B68     		ldr	r3, [r3]
 2922 107a 0B60     		str	r3, [r1]
1839:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 2923              		.loc 1 1839 0 discriminator 3
 2924 107c FB69     		ldr	r3, [r7, #28]
 2925 107e 0133     		adds	r3, r3, #1
 2926 1080 FB61     		str	r3, [r7, #28]
 2927              	.L170:
1839:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 2928              		.loc 1 1839 0 is_stmt 0 discriminator 1
 2929 1082 7B68     		ldr	r3, [r7, #4]
 2930 1084 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2931 1086 1A46     		mov	r2, r3
 2932 1088 FB69     		ldr	r3, [r7, #28]
 2933 108a 9A42     		cmp	r2, r3
 2934 108c E5DC     		bgt	.L171
1842:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
1843:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1844:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1845:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Determine the offset in PKA RAM for the next data.
1846:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1847:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     offset += 4 * (i + extraBuf);
 2935              		.loc 1 1847 0 is_stmt 1
 2936 108e FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 2937 1090 FB69     		ldr	r3, [r7, #28]
 2938 1092 1344     		add	r3, r3, r2
 2939 1094 9B00     		lsls	r3, r3, #2
 2940 1096 1A46     		mov	r2, r3
 2941 1098 BB69     		ldr	r3, [r7, #24]
 2942 109a 1344     		add	r3, r3, r2
 2943 109c BB61     		str	r3, [r7, #24]
1848:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1849:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1850:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Load the y co-ordinate value of the second EC point in PKA RAM.
1851:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1852:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     for(i = 0; i < ptCurve->ui8Size; i++)
 2944              		.loc 1 1852 0
 2945 109e 0023     		movs	r3, #0
 2946 10a0 FB61     		str	r3, [r7, #28]
 2947 10a2 13E0     		b	.L172
 2948              	.L173:
1853:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
1854:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         HWREG((PKA_RAM_BASE + offset + 4*i)) = ptEcPt2->pui32Y[i];
 2949              		.loc 1 1854 0 discriminator 3
 2950 10a4 FB69     		ldr	r3, [r7, #28]
 2951 10a6 9B00     		lsls	r3, r3, #2
 2952 10a8 1A46     		mov	r2, r3
 2953 10aa BB69     		ldr	r3, [r7, #24]
 2954 10ac 1344     		add	r3, r3, r2
 2955 10ae 03F18843 		add	r3, r3, #1140850688
 2956 10b2 03F5C043 		add	r3, r3, #24576
 2957 10b6 1946     		mov	r1, r3
 2958 10b8 BB68     		ldr	r3, [r7, #8]
 2959 10ba 5A68     		ldr	r2, [r3, #4]
 2960 10bc FB69     		ldr	r3, [r7, #28]
 2961 10be 9B00     		lsls	r3, r3, #2
 2962 10c0 1344     		add	r3, r3, r2
 2963 10c2 1B68     		ldr	r3, [r3]
 2964 10c4 0B60     		str	r3, [r1]
1852:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 2965              		.loc 1 1852 0 discriminator 3
 2966 10c6 FB69     		ldr	r3, [r7, #28]
 2967 10c8 0133     		adds	r3, r3, #1
 2968 10ca FB61     		str	r3, [r7, #28]
 2969              	.L172:
1852:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
 2970              		.loc 1 1852 0 is_stmt 0 discriminator 1
 2971 10cc 7B68     		ldr	r3, [r7, #4]
 2972 10ce 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2973 10d0 1A46     		mov	r2, r3
 2974 10d2 FB69     		ldr	r3, [r7, #28]
 2975 10d4 9A42     		cmp	r2, r3
 2976 10d6 E5DC     		bgt	.L173
1855:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
1856:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1857:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1858:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Determine the offset in PKA RAM for the next data.
1859:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1860:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     offset += 4 * (i + extraBuf);
 2977              		.loc 1 1860 0 is_stmt 1
 2978 10d8 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 2979 10da FB69     		ldr	r3, [r7, #28]
 2980 10dc 1344     		add	r3, r3, r2
 2981 10de 9B00     		lsls	r3, r3, #2
 2982 10e0 1A46     		mov	r2, r3
 2983 10e2 BB69     		ldr	r3, [r7, #24]
 2984 10e4 1344     		add	r3, r3, r2
 2985 10e6 BB61     		str	r3, [r7, #24]
1861:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1862:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1863:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Copy the result vector location.
1864:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1865:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     *pui32ResultVector = PKA_RAM_BASE + offset;
 2986              		.loc 1 1865 0
 2987 10e8 BB69     		ldr	r3, [r7, #24]
 2988 10ea 03F18843 		add	r3, r3, #1140850688
 2989 10ee 03F5C043 		add	r3, r3, #24576
 2990 10f2 3A68     		ldr	r2, [r7]
 2991 10f4 1360     		str	r3, [r2]
1866:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1867:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1868:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Load D ptr with the result location in PKA RAM.
1869:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1870:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG(PKA_DPTR) = offset >> 2;
 2992              		.loc 1 1870 0
 2993 10f6 0D4A     		ldr	r2, .L174+16
 2994 10f8 BB69     		ldr	r3, [r7, #24]
 2995 10fa 9B08     		lsrs	r3, r3, #2
 2996 10fc 1360     		str	r3, [r2]
1871:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1872:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1873:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Load length registers.
1874:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1875:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG(PKA_BLENGTH) = ptCurve->ui8Size;
 2997              		.loc 1 1875 0
 2998 10fe 0C4A     		ldr	r2, .L174+20
 2999 1100 7B68     		ldr	r3, [r7, #4]
 3000 1102 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 3001 1104 1360     		str	r3, [r2]
1876:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1877:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1878:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Set the PKA Function to ECC-ADD and start the operation.
1879:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1880:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     HWREG( (PKA_FUNCTION) ) = 0x0000B000;
 3002              		.loc 1 1880 0
 3003 1106 054B     		ldr	r3, .L174
 3004 1108 4FF43042 		mov	r2, #45056
 3005 110c 1A60     		str	r2, [r3]
1881:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1882:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     return (PKA_STATUS_SUCCESS);
 3006              		.loc 1 1882 0
 3007 110e 0023     		movs	r3, #0
 3008              	.L161:
1883:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** }
 3009              		.loc 1 1883 0
 3010 1110 1846     		mov	r0, r3
 3011 1112 2437     		adds	r7, r7, #36
 3012              		.cfi_def_cfa_offset 4
 3013 1114 BD46     		mov	sp, r7
 3014              		.cfi_def_cfa_register 13
 3015              		@ sp needed
 3016 1116 80BC     		pop	{r7}
 3017              		.cfi_restore 7
 3018              		.cfi_def_cfa_offset 0
 3019 1118 7047     		bx	lr
 3020              	.L175:
 3021 111a 00BF     		.align	2
 3022              	.L174:
 3023 111c 1C400044 		.word	1140867100
 3024 1120 00400044 		.word	1140867072
 3025 1124 04400044 		.word	1140867076
 3026 1128 08400044 		.word	1140867080
 3027 112c 0C400044 		.word	1140867084
 3028 1130 14400044 		.word	1140867092
 3029              		.cfi_endproc
 3030              	.LFE20:
 3032              		.align	2
 3033              		.global	PKAECCAddGetResult
 3034              		.thumb
 3035              		.thumb_func
 3037              	PKAECCAddGetResult:
 3038              	.LFB21:
1884:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1885:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
1886:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
1887:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! Gets the result of the ECC Addition
1888:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
1889:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param ptOutEcPt is the pointer to the structure where the resultant
1890:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!        point will be stored. The callee is responsible to allocate memory,
1891:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!        for the ec point structure including the memory for x and y
1892:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!        co-ordinate values.
1893:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \param ui32ResVectorLoc is the address of the result location which
1894:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!        was provided by the function \sa PKAECCAddStart().
1895:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
1896:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! This function gets the result of ecc point addition operation on the
1897:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! on the two given ec points, previously started using the function \sa
1898:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! PKAECCAddStart().
1899:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //!
1900:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! \return Returns:
1901:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_SUCCESS if the operation is successful. 
1902:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_OPERATION_INPRG, if the PKA hw module is busy performing 
1903:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! the operation.
1904:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_RESULT_0 if the result is all zeroes.
1905:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //! - \b PKA_STATUS_FAILURE if the operation is not successful.
1906:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //
1907:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** //*****************************************************************************
1908:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** tPKAStatus
1909:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** PKAECCAddGetResult(tECPt* ptOutEcPt, uint32_t ui32ResVectorLoc)
1910:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** {
 3039              		.loc 1 1910 0
 3040              		.cfi_startproc
 3041              		@ args = 0, pretend = 0, frame = 24
 3042              		@ frame_needed = 1, uses_anonymous_args = 0
 3043              		@ link register save eliminated.
 3044 1134 80B4     		push	{r7}
 3045              		.cfi_def_cfa_offset 4
 3046              		.cfi_offset 7, -4
 3047 1136 87B0     		sub	sp, sp, #28
 3048              		.cfi_def_cfa_offset 32
 3049 1138 00AF     		add	r7, sp, #0
 3050              		.cfi_def_cfa_register 7
 3051 113a 7860     		str	r0, [r7, #4]
 3052 113c 3960     		str	r1, [r7]
1911:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     uint32_t regMSWVal;
1912:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     uint32_t addr;
1913:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     int i;
1914:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     uint32_t len;
1915:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1916:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1917:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     // Check for the arguments.
1918:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     //
1919:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != ptOutEcPt);
1920:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != ptOutEcPt->pui32X);
1921:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT(NULL != ptOutEcPt->pui32Y);
1922:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     ASSERT((ui32ResVectorLoc > PKA_RAM_BASE) &&
1923:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****            (ui32ResVectorLoc < (PKA_RAM_BASE + PKA_RAM_SIZE)));
1924:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1925:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     if((HWREG(PKA_FUNCTION) & PKA_FUNCTION_RUN) != 0)
 3053              		.loc 1 1925 0
 3054 113e 314B     		ldr	r3, .L185
 3055 1140 1B68     		ldr	r3, [r3]
 3056 1142 03F40043 		and	r3, r3, #32768
 3057 1146 002B     		cmp	r3, #0
 3058 1148 01D0     		beq	.L177
1926:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
1927:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         return (PKA_STATUS_OPERATION_INPRG);
 3059              		.loc 1 1927 0
 3060 114a 0723     		movs	r3, #7
 3061 114c 54E0     		b	.L178
 3062              	.L177:
1928:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
1929:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1930:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     if(HWREG(PKA_SHIFT) == 0x00000000)
 3063              		.loc 1 1930 0
 3064 114e 2E4B     		ldr	r3, .L185+4
 3065 1150 1B68     		ldr	r3, [r3]
 3066 1152 002B     		cmp	r3, #0
 3067 1154 4FD1     		bne	.L179
1931:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
1932:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         //
1933:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         // Get the MSW register value.
1934:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         //
1935:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         regMSWVal = HWREG(PKA_MSW);
 3068              		.loc 1 1935 0
 3069 1156 2D4B     		ldr	r3, .L185+8
 3070 1158 1B68     		ldr	r3, [r3]
 3071 115a 3B61     		str	r3, [r7, #16]
1936:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1937:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         //
1938:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         // Check to make sure that the result vector is not all zeroes.
1939:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         //
1940:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         if(regMSWVal & PKA_MSW_RESULT_IS_ZERO)
 3072              		.loc 1 1940 0
 3073 115c 3B69     		ldr	r3, [r7, #16]
 3074 115e 03F40043 		and	r3, r3, #32768
 3075 1162 002B     		cmp	r3, #0
 3076 1164 01D0     		beq	.L180
1941:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         {
1942:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****             return (PKA_STATUS_RESULT_0);
 3077              		.loc 1 1942 0
 3078 1166 0423     		movs	r3, #4
 3079 1168 46E0     		b	.L178
 3080              	.L180:
1943:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         }
1944:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1945:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         //
1946:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         // Get the length of the result.
1947:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         //
1948:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         len = ((regMSWVal & PKA_MSW_MSW_ADDRESS_M) + 1) -
 3081              		.loc 1 1948 0
 3082 116a 3B69     		ldr	r3, [r7, #16]
 3083 116c C3F30A02 		ubfx	r2, r3, #0, #11
1949:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****               ((ui32ResVectorLoc - PKA_RAM_BASE) >> 2);
 3084              		.loc 1 1949 0
 3085 1170 3B68     		ldr	r3, [r7]
 3086 1172 03F13C43 		add	r3, r3, #-1140850688
 3087 1176 A3F5C043 		sub	r3, r3, #24576
 3088 117a 9B08     		lsrs	r3, r3, #2
1948:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****               ((ui32ResVectorLoc - PKA_RAM_BASE) >> 2);
 3089              		.loc 1 1948 0
 3090 117c D31A     		subs	r3, r2, r3
 3091 117e 0133     		adds	r3, r3, #1
 3092 1180 FB60     		str	r3, [r7, #12]
1950:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1951:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         addr = ui32ResVectorLoc;
 3093              		.loc 1 1951 0
 3094 1182 3B68     		ldr	r3, [r7]
 3095 1184 BB60     		str	r3, [r7, #8]
1952:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1953:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         //
1954:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         // Copy the x co-ordinate value of result from vector D into the
1955:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         // the output EC Point.
1956:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         //
1957:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         for(i = 0; i < len; i++)
 3096              		.loc 1 1957 0
 3097 1186 0023     		movs	r3, #0
 3098 1188 7B61     		str	r3, [r7, #20]
 3099 118a 0EE0     		b	.L181
 3100              	.L182:
1958:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         {
1959:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****             ptOutEcPt->pui32X[i] = HWREG((addr + 4*i));
 3101              		.loc 1 1959 0 discriminator 3
 3102 118c 7B68     		ldr	r3, [r7, #4]
 3103 118e 1A68     		ldr	r2, [r3]
 3104 1190 7B69     		ldr	r3, [r7, #20]
 3105 1192 9B00     		lsls	r3, r3, #2
 3106 1194 1344     		add	r3, r3, r2
 3107 1196 7A69     		ldr	r2, [r7, #20]
 3108 1198 9200     		lsls	r2, r2, #2
 3109 119a 1146     		mov	r1, r2
 3110 119c BA68     		ldr	r2, [r7, #8]
 3111 119e 0A44     		add	r2, r2, r1
 3112 11a0 1268     		ldr	r2, [r2]
 3113 11a2 1A60     		str	r2, [r3]
1957:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         {
 3114              		.loc 1 1957 0 discriminator 3
 3115 11a4 7B69     		ldr	r3, [r7, #20]
 3116 11a6 0133     		adds	r3, r3, #1
 3117 11a8 7B61     		str	r3, [r7, #20]
 3118              	.L181:
1957:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         {
 3119              		.loc 1 1957 0 is_stmt 0 discriminator 1
 3120 11aa 7A69     		ldr	r2, [r7, #20]
 3121 11ac FB68     		ldr	r3, [r7, #12]
 3122 11ae 9A42     		cmp	r2, r3
 3123 11b0 ECD3     		bcc	.L182
1960:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         }
1961:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1962:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         addr += 4 * (i + 2 + len % 2);
 3124              		.loc 1 1962 0 is_stmt 1
 3125 11b2 FB68     		ldr	r3, [r7, #12]
 3126 11b4 03F00102 		and	r2, r3, #1
 3127 11b8 7B69     		ldr	r3, [r7, #20]
 3128 11ba 1344     		add	r3, r3, r2
 3129 11bc 0233     		adds	r3, r3, #2
 3130 11be 9B00     		lsls	r3, r3, #2
 3131 11c0 BA68     		ldr	r2, [r7, #8]
 3132 11c2 1344     		add	r3, r3, r2
 3133 11c4 BB60     		str	r3, [r7, #8]
1963:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1964:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         //
1965:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         // Copy the y co-ordinate value of result from vector D into the
1966:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         // the output EC Point.
1967:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         //
1968:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         for(i = 0; i < len; i++)
 3134              		.loc 1 1968 0
 3135 11c6 0023     		movs	r3, #0
 3136 11c8 7B61     		str	r3, [r7, #20]
 3137 11ca 0EE0     		b	.L183
 3138              	.L184:
1969:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         {
1970:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****             ptOutEcPt->pui32Y[i] = HWREG((addr + 4*i));
 3139              		.loc 1 1970 0 discriminator 3
 3140 11cc 7B68     		ldr	r3, [r7, #4]
 3141 11ce 5A68     		ldr	r2, [r3, #4]
 3142 11d0 7B69     		ldr	r3, [r7, #20]
 3143 11d2 9B00     		lsls	r3, r3, #2
 3144 11d4 1344     		add	r3, r3, r2
 3145 11d6 7A69     		ldr	r2, [r7, #20]
 3146 11d8 9200     		lsls	r2, r2, #2
 3147 11da 1146     		mov	r1, r2
 3148 11dc BA68     		ldr	r2, [r7, #8]
 3149 11de 0A44     		add	r2, r2, r1
 3150 11e0 1268     		ldr	r2, [r2]
 3151 11e2 1A60     		str	r2, [r3]
1968:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         {
 3152              		.loc 1 1968 0 discriminator 3
 3153 11e4 7B69     		ldr	r3, [r7, #20]
 3154 11e6 0133     		adds	r3, r3, #1
 3155 11e8 7B61     		str	r3, [r7, #20]
 3156              	.L183:
1968:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         {
 3157              		.loc 1 1968 0 is_stmt 0 discriminator 1
 3158 11ea 7A69     		ldr	r2, [r7, #20]
 3159 11ec FB68     		ldr	r3, [r7, #12]
 3160 11ee 9A42     		cmp	r2, r3
 3161 11f0 ECD3     		bcc	.L184
1971:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         }
1972:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** 
1973:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         return (PKA_STATUS_SUCCESS);
 3162              		.loc 1 1973 0 is_stmt 1
 3163 11f2 0023     		movs	r3, #0
 3164 11f4 00E0     		b	.L178
 3165              	.L179:
1974:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
1975:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     else
1976:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     {
1977:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****         return (PKA_STATUS_FAILURE);
 3166              		.loc 1 1977 0
 3167 11f6 0123     		movs	r3, #1
 3168              	.L178:
1978:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c ****     }
1979:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.c **** }
 3169              		.loc 1 1979 0
 3170 11f8 1846     		mov	r0, r3
 3171 11fa 1C37     		adds	r7, r7, #28
 3172              		.cfi_def_cfa_offset 4
 3173 11fc BD46     		mov	sp, r7
 3174              		.cfi_def_cfa_register 13
 3175              		@ sp needed
 3176 11fe 80BC     		pop	{r7}
 3177              		.cfi_restore 7
 3178              		.cfi_def_cfa_offset 0
 3179 1200 7047     		bx	lr
 3180              	.L186:
 3181 1202 00BF     		.align	2
 3182              	.L185:
 3183 1204 1C400044 		.word	1140867100
 3184 1208 18400044 		.word	1140867096
 3185 120c 24400044 		.word	1140867108
 3186              		.cfi_endproc
 3187              	.LFE21:
 3189              	.Letext0:
 3190              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 3191              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 3192              		.file 4 "build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ecc_curveinfo.h"
 3193              		.file 5 "build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/pka.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 pka.c
     /tmp/cceF7BAh.s:19     .text:0000000000000000 $t
     /tmp/cceF7BAh.s:24     .text:0000000000000000 PKAEnableInt
     /tmp/cceF7BAh.s:51     .text:0000000000000010 PKADisableInt
     /tmp/cceF7BAh.s:77     .text:0000000000000020 PKAClearInt
     /tmp/cceF7BAh.s:103    .text:0000000000000030 PKARegInt
     /tmp/cceF7BAh.s:138    .text:0000000000000048 PKAUnRegInt
     /tmp/cceF7BAh.s:164    .text:0000000000000058 PKAGetOpsStatus
     /tmp/cceF7BAh.s:201    .text:0000000000000078 $d
     /tmp/cceF7BAh.s:205    .text:000000000000007c $t
     /tmp/cceF7BAh.s:210    .text:000000000000007c PKABigNumModStart
     /tmp/cceF7BAh.s:379    .text:0000000000000184 $d
     /tmp/cceF7BAh.s:388    .text:000000000000019c $t
     /tmp/cceF7BAh.s:393    .text:000000000000019c PKABigNumModGetResult
     /tmp/cceF7BAh.s:499    .text:0000000000000228 $d
     /tmp/cceF7BAh.s:504    .text:0000000000000230 $t
     /tmp/cceF7BAh.s:509    .text:0000000000000230 PKABigNumCmpStart
     /tmp/cceF7BAh.s:645    .text:00000000000002f8 $d
     /tmp/cceF7BAh.s:652    .text:0000000000000308 $t
     /tmp/cceF7BAh.s:657    .text:0000000000000308 PKABigNumCmpGetResult
     /tmp/cceF7BAh.s:734    .text:0000000000000358 $d
     /tmp/cceF7BAh.s:739    .text:0000000000000360 $t
     /tmp/cceF7BAh.s:744    .text:0000000000000360 PKABigNumInvModStart
     /tmp/cceF7BAh.s:908    .text:0000000000000460 $d
     /tmp/cceF7BAh.s:917    .text:0000000000000478 $t
     /tmp/cceF7BAh.s:922    .text:0000000000000478 PKABigNumInvModGetResult
     /tmp/cceF7BAh.s:1028   .text:0000000000000504 $d
     /tmp/cceF7BAh.s:1033   .text:000000000000050c $t
     /tmp/cceF7BAh.s:1038   .text:000000000000050c PKABigNumMultiplyStart
     /tmp/cceF7BAh.s:1204   .text:000000000000060c $d
     /tmp/cceF7BAh.s:1213   .text:0000000000000624 $t
     /tmp/cceF7BAh.s:1218   .text:0000000000000624 PKABigNumMultGetResult
     /tmp/cceF7BAh.s:1329   .text:00000000000006b8 $d
     /tmp/cceF7BAh.s:1334   .text:00000000000006c0 $t
     /tmp/cceF7BAh.s:1339   .text:00000000000006c0 PKABigNumAddStart
     /tmp/cceF7BAh.s:1503   .text:00000000000007c0 $d
     /tmp/cceF7BAh.s:1512   .text:00000000000007d8 $t
     /tmp/cceF7BAh.s:1517   .text:00000000000007d8 PKABigNumAddGetResult
     /tmp/cceF7BAh.s:1628   .text:000000000000086c $d
     /tmp/cceF7BAh.s:1633   .text:0000000000000874 $t
     /tmp/cceF7BAh.s:1638   .text:0000000000000874 PKAECCMultiplyStart
     /tmp/cceF7BAh.s:1987   .text:0000000000000ab4 $d
     /tmp/cceF7BAh.s:1997   .text:0000000000000ad0 $t
     /tmp/cceF7BAh.s:2002   .text:0000000000000ad0 PKAECCMultiplyGetResult
     /tmp/cceF7BAh.s:2148   .text:0000000000000ba0 $d
     /tmp/cceF7BAh.s:2154   .text:0000000000000bac $t
     /tmp/cceF7BAh.s:2159   .text:0000000000000bac PKAECCMultGenPtStart
     /tmp/cceF7BAh.s:2507   .text:0000000000000dec $d
     /tmp/cceF7BAh.s:2517   .text:0000000000000e08 $t
     /tmp/cceF7BAh.s:2522   .text:0000000000000e08 PKAECCMultGenPtGetResult
     /tmp/cceF7BAh.s:2668   .text:0000000000000ed8 $d
     /tmp/cceF7BAh.s:2674   .text:0000000000000ee4 $t
     /tmp/cceF7BAh.s:2679   .text:0000000000000ee4 PKAECCAddStart
     /tmp/cceF7BAh.s:3023   .text:000000000000111c $d
     /tmp/cceF7BAh.s:3032   .text:0000000000001134 $t
     /tmp/cceF7BAh.s:3037   .text:0000000000001134 PKAECCAddGetResult
     /tmp/cceF7BAh.s:3183   .text:0000000000001204 $d
                     .debug_frame:0000000000000010 $d
                           .group:0000000000000000 wm4.0.8e445c0106ab795ab4704214cba6f089
                           .group:0000000000000000 wm4.hw_ints.h.42.85b9479f2be35b086f1bb7cbb15bc097
                           .group:0000000000000000 wm4.hw_memmap.h.39.19283c377d449c9bca5fdd8ccb62628c
                           .group:0000000000000000 wm4.hw_pka.h.39.21ddda4008595aed4ecf0317dc241440
                           .group:0000000000000000 wm4._newlib_version.h.4.ad342815780c8db09778091a421b5b5b
                           .group:0000000000000000 wm4.features.h.33.d97f2d646536517df901beeb5b9993f5
                           .group:0000000000000000 wm4._default_types.h.15.933e8edd27a65e0b69af4a865eb623d2
                           .group:0000000000000000 wm4._intsup.h.10.b82bf99f69d6a5c085fc866de0d3eb9b
                           .group:0000000000000000 wm4._stdint.h.10.7a5f60e6741af4a5594a3867d347e1f9
                           .group:0000000000000000 wm4.stdint.h.23.373a9d32a9e4c2e88fd347156532d281
                           .group:0000000000000000 wm4.stdbool.h.29.07dce69c3b78884144b7f7bd19483461
                           .group:0000000000000000 wm4.hw_types.h.67.b10589a0806dcc2d274d6fab6b736519
                           .group:0000000000000000 wm4.interrupt.h.41.272fc4ec0e276feb439e7974d0f77eaf
                           .group:0000000000000000 wm4.pka.h.64.e6658a746a1332f9f0f055d6d08ac005
                           .group:0000000000000000 wm4.sys_ctrl.h.41.c6bbd4dace326d685c1afa45bc1ba1e2
                           .group:0000000000000000 wm4.debug.h.41.b891e613993738d067c45a5ff528d11a

UNDEFINED SYMBOLS
IntEnable
IntDisable
IntPendClear
IntRegister
IntUnregister
