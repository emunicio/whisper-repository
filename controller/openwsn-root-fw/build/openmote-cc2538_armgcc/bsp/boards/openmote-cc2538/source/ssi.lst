   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"ssi.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.align	2
  20              		.global	SSIConfigSetExpClk
  21              		.thumb
  22              		.thumb_func
  24              	SSIConfigSetExpClk:
  25              	.LFB0:
  26              		.file 1 "build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c"
   1:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** /******************************************************************************
   2:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** *  Filename:       ssi.c
   3:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** *  Revised:        $Date: 2013-03-20 14:47:53 +0100 (Wed, 20 Mar 2013) $
   4:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** *  Revision:       $Revision: 9489 $
   5:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** *
   6:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** *  Description:    Driver for Synchronous Serial Interface.
   7:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** *
   8:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** *  Copyright (C) 2012 Texas Instruments Incorporated - http://www.ti.com/
   9:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** *
  10:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** *
  11:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** *  Redistribution and use in source and binary forms, with or without
  12:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** *  modification, are permitted provided that the following conditions
  13:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** *  are met:
  14:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** *
  15:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** *    Redistributions of source code must retain the above copyright
  16:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** *    notice, this list of conditions and the following disclaimer.
  17:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** *
  18:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** *    Redistributions in binary form must reproduce the above copyright
  19:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** *    notice, this list of conditions and the following disclaimer in the
  20:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** *    documentation and/or other materials provided with the distribution.
  21:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** *
  22:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** *    Neither the name of Texas Instruments Incorporated nor the names of
  23:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** *    its contributors may be used to endorse or promote products derived
  24:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** *    from this software without specific prior written permission.
  25:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** *
  26:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  27:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  28:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
  29:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
  30:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  31:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  32:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  33:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  34:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  35:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  36:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** *  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  37:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** *
  38:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** ******************************************************************************/
  39:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** 
  40:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //*****************************************************************************
  41:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //
  42:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! \addtogroup ssi_api
  43:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! @{
  44:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //
  45:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //*****************************************************************************
  46:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** 
  47:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** #include <headers/hw_ints.h>
  48:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** #include <headers/hw_memmap.h>
  49:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** #include <headers/hw_ssi.h>
  50:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** #include "debug.h"
  51:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** #include "interrupt.h"
  52:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** #include "ssi.h"
  53:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** 
  54:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //*****************************************************************************
  55:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //
  56:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! Configures the synchronous serial interface
  57:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //!
  58:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! \param ui32Base specifies the SSI module base address.
  59:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! \param ui32SSIClk is the rate of the clock supplied to the SSI module.
  60:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! \param ui32Protocol specifies the data transfer protocol.
  61:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! \param ui32Mode specifies the mode of operation.
  62:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! \param ui32BitRate specifies the clock rate.
  63:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! \param ui32DataWidth specifies number of bits transferred per frame.
  64:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //!
  65:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! This function configures the synchronous serial interface.  It sets
  66:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! the SSI protocol, mode of operation, bit rate, and data width.
  67:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //!
  68:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! The \e ui32Protocol parameter defines the data frame format.  The
  69:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! \e ui32Protocol parameter can be one of the following values:
  70:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! \b SSI_FRF_MOTO_MODE_0, \b SSI_FRF_MOTO_MODE_1, \b SSI_FRF_MOTO_MODE_2,
  71:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! \b SSI_FRF_MOTO_MODE_3, \b SSI_FRF_TI, or \b SSI_FRF_NMW.  The Motorola
  72:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! frame formats imply the following polarity and phase configurations:
  73:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //!
  74:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! <pre>
  75:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! Polarity Phase       Mode
  76:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //!   0       0   SSI_FRF_MOTO_MODE_0
  77:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //!   0       1   SSI_FRF_MOTO_MODE_1
  78:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //!   1       0   SSI_FRF_MOTO_MODE_2
  79:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //!   1       1   SSI_FRF_MOTO_MODE_3
  80:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! </pre>
  81:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //!
  82:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! The \e ui32Mode parameter defines the operating mode of the SSI module.  The
  83:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! SSI module can operate as a master or slave; if a slave, the SSI can be
  84:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! configured to disable output on its serial output line.  The \e ui32Mode
  85:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! parameter can be one of the following values: \b SSI_MODE_MASTER,
  86:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! \b SSI_MODE_SLAVE, or \b SSI_MODE_SLAVE_OD.
  87:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //!
  88:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! The \e ui32BitRate parameter defines the bit rate for the SSI.  This bit rate
  89:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! must satisfy the following clock ratio criteria:
  90:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //!
  91:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! - FSSI >= 2 * bit rate (master mode)
  92:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! - FSSI >= 12 * bit rate (slave modes)
  93:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //!
  94:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! where FSSI is the frequency of the clock supplied to the SSI module.
  95:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //!
  96:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! The \e ui32DataWidth parameter defines the width of the data transfers, and
  97:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! can be a value between 4 and 16, inclusive.
  98:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //!
  99:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! The peripheral clock is set in the System Control module.  The frequency of
 100:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! the system clock is the value returned by SysCtrlClockGet() or
 101:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! SysCtrlIOClockGet() depending on the chosen clock source as set by
 102:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! SSIClockSourceSet(), or it can be explicitly hard coded if it is constant
 103:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! and known (to save the code/execution overhead of a call to
 104:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! SysCtrlClockGet() or SysCtrlIOClockGet()).
 105:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //!
 106:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! \return None
 107:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //
 108:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //*****************************************************************************
 109:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** void
 110:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** SSIConfigSetExpClk(uint32_t ui32Base, uint32_t ui32SSIClk,
 111:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****                    uint32_t ui32Protocol, uint32_t ui32Mode,
 112:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****                    uint32_t ui32BitRate, uint32_t ui32DataWidth)
 113:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** {
  27              		.loc 1 113 0
  28              		.cfi_startproc
  29              		@ args = 8, pretend = 0, frame = 40
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32 0000 80B4     		push	{r7}
  33              		.cfi_def_cfa_offset 4
  34              		.cfi_offset 7, -4
  35 0002 8BB0     		sub	sp, sp, #44
  36              		.cfi_def_cfa_offset 48
  37 0004 00AF     		add	r7, sp, #0
  38              		.cfi_def_cfa_register 7
  39 0006 F860     		str	r0, [r7, #12]
  40 0008 B960     		str	r1, [r7, #8]
  41 000a 7A60     		str	r2, [r7, #4]
  42 000c 3B60     		str	r3, [r7]
 114:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     uint32_t ui32MaxBitRate;
 115:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     uint32_t ui32RegVal;
 116:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     uint32_t ui32PreDiv;
 117:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     uint32_t ui32SCR;
 118:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     uint32_t ui32SPH_SPO;
 119:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** 
 120:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     //
 121:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     // Check the arguments.
 122:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     //
 123:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     ASSERT((ui32Base == SSI0_BASE) || (ui32Base == SSI1_BASE));
 124:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     ASSERT((ui32Protocol == SSI_FRF_MOTO_MODE_0) ||
 125:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****            (ui32Protocol == SSI_FRF_MOTO_MODE_1) ||
 126:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****            (ui32Protocol == SSI_FRF_MOTO_MODE_2) ||
 127:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****            (ui32Protocol == SSI_FRF_MOTO_MODE_3) ||
 128:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****            (ui32Protocol == SSI_FRF_TI) ||
 129:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****            (ui32Protocol == SSI_FRF_NMW));
 130:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     ASSERT((ui32Mode == SSI_MODE_MASTER) ||
 131:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****            (ui32Mode == SSI_MODE_SLAVE) ||
 132:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****            (ui32Mode == SSI_MODE_SLAVE_OD));
 133:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     ASSERT(((ui32Mode == SSI_MODE_MASTER) && (ui32BitRate <= (ui32SSIClk / 2))) ||
 134:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****            ((ui32Mode != SSI_MODE_MASTER) && (ui32BitRate <= (ui32SSIClk / 12))));
 135:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     ASSERT((ui32SSIClk / ui32BitRate) <= (254 * 256));
 136:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     ASSERT((ui32DataWidth >= 4) && (ui32DataWidth <= 16));
 137:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** 
 138:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     //
 139:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     // Set the mode.
 140:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     //
 141:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     ui32RegVal = (ui32Mode == SSI_MODE_SLAVE_OD) ? SSI_CR1_SOD : 0;
  43              		.loc 1 141 0
  44 000e 3B68     		ldr	r3, [r7]
  45 0010 022B     		cmp	r3, #2
  46 0012 01D1     		bne	.L2
  47              		.loc 1 141 0 is_stmt 0 discriminator 1
  48 0014 0823     		movs	r3, #8
  49 0016 00E0     		b	.L3
  50              	.L2:
  51              		.loc 1 141 0 discriminator 2
  52 0018 0023     		movs	r3, #0
  53              	.L3:
  54              		.loc 1 141 0 discriminator 4
  55 001a 3B62     		str	r3, [r7, #32]
 142:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     ui32RegVal |= (ui32Mode == SSI_MODE_MASTER) ? 0 : SSI_CR1_MS;
  56              		.loc 1 142 0 is_stmt 1 discriminator 4
  57 001c 3B68     		ldr	r3, [r7]
  58 001e 002B     		cmp	r3, #0
  59 0020 01D1     		bne	.L4
  60              		.loc 1 142 0 is_stmt 0 discriminator 1
  61 0022 0023     		movs	r3, #0
  62 0024 00E0     		b	.L5
  63              	.L4:
  64              		.loc 1 142 0 discriminator 2
  65 0026 0423     		movs	r3, #4
  66              	.L5:
  67              		.loc 1 142 0 discriminator 4
  68 0028 3A6A     		ldr	r2, [r7, #32]
  69 002a 1343     		orrs	r3, r3, r2
  70 002c 3B62     		str	r3, [r7, #32]
 143:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     HWREG(ui32Base + SSI_O_CR1) = ui32RegVal;
  71              		.loc 1 143 0 is_stmt 1 discriminator 4
  72 002e FB68     		ldr	r3, [r7, #12]
  73 0030 0433     		adds	r3, r3, #4
  74 0032 1A46     		mov	r2, r3
  75 0034 3B6A     		ldr	r3, [r7, #32]
  76 0036 1360     		str	r3, [r2]
 144:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** 
 145:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     //
 146:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     // Set the clock predivider.
 147:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     //
 148:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     ui32MaxBitRate = ui32SSIClk / ui32BitRate;
  77              		.loc 1 148 0 discriminator 4
  78 0038 BA68     		ldr	r2, [r7, #8]
  79 003a 3B6B     		ldr	r3, [r7, #48]
  80 003c B2FBF3F3 		udiv	r3, r2, r3
  81 0040 FB61     		str	r3, [r7, #28]
 149:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     ui32PreDiv = 0;
  82              		.loc 1 149 0 discriminator 4
  83 0042 0023     		movs	r3, #0
  84 0044 7B62     		str	r3, [r7, #36]
  85              	.L6:
 150:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     do
 151:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     {
 152:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****         ui32PreDiv += 2;
  86              		.loc 1 152 0 discriminator 1
  87 0046 7B6A     		ldr	r3, [r7, #36]
  88 0048 0233     		adds	r3, r3, #2
  89 004a 7B62     		str	r3, [r7, #36]
 153:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****         ui32SCR = (ui32MaxBitRate / ui32PreDiv) - 1;
  90              		.loc 1 153 0 discriminator 1
  91 004c FA69     		ldr	r2, [r7, #28]
  92 004e 7B6A     		ldr	r3, [r7, #36]
  93 0050 B2FBF3F3 		udiv	r3, r2, r3
  94 0054 013B     		subs	r3, r3, #1
  95 0056 BB61     		str	r3, [r7, #24]
 154:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     }
 155:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     while(ui32SCR > 255);
  96              		.loc 1 155 0 discriminator 1
  97 0058 BB69     		ldr	r3, [r7, #24]
  98 005a FF2B     		cmp	r3, #255
  99 005c F3D8     		bhi	.L6
 156:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     HWREG(ui32Base + SSI_O_CPSR) = ui32PreDiv;
 100              		.loc 1 156 0
 101 005e FB68     		ldr	r3, [r7, #12]
 102 0060 1033     		adds	r3, r3, #16
 103 0062 1A46     		mov	r2, r3
 104 0064 7B6A     		ldr	r3, [r7, #36]
 105 0066 1360     		str	r3, [r2]
 157:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** 
 158:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     //
 159:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     // Set protocol and clock rate.
 160:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     //
 161:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     ui32SPH_SPO = (ui32Protocol & 3) << 6;
 106              		.loc 1 161 0
 107 0068 7B68     		ldr	r3, [r7, #4]
 108 006a 9B01     		lsls	r3, r3, #6
 109 006c DBB2     		uxtb	r3, r3
 110 006e 7B61     		str	r3, [r7, #20]
 162:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     ui32Protocol &= SSI_CR0_FRF_M;
 111              		.loc 1 162 0
 112 0070 7B68     		ldr	r3, [r7, #4]
 113 0072 03F03003 		and	r3, r3, #48
 114 0076 7B60     		str	r3, [r7, #4]
 163:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     ui32RegVal = (ui32SCR << 8) | ui32SPH_SPO | ui32Protocol | (ui32DataWidth - 1);
 115              		.loc 1 163 0
 116 0078 BB69     		ldr	r3, [r7, #24]
 117 007a 1A02     		lsls	r2, r3, #8
 118 007c 7B69     		ldr	r3, [r7, #20]
 119 007e 1A43     		orrs	r2, r2, r3
 120 0080 7B68     		ldr	r3, [r7, #4]
 121 0082 1A43     		orrs	r2, r2, r3
 122 0084 7B6B     		ldr	r3, [r7, #52]
 123 0086 013B     		subs	r3, r3, #1
 124 0088 1343     		orrs	r3, r3, r2
 125 008a 3B62     		str	r3, [r7, #32]
 164:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     HWREG(ui32Base + SSI_O_CR0) = ui32RegVal;
 126              		.loc 1 164 0
 127 008c FB68     		ldr	r3, [r7, #12]
 128 008e 3A6A     		ldr	r2, [r7, #32]
 129 0090 1A60     		str	r2, [r3]
 165:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** }
 130              		.loc 1 165 0
 131 0092 00BF     		nop
 132 0094 2C37     		adds	r7, r7, #44
 133              		.cfi_def_cfa_offset 4
 134 0096 BD46     		mov	sp, r7
 135              		.cfi_def_cfa_register 13
 136              		@ sp needed
 137 0098 80BC     		pop	{r7}
 138              		.cfi_restore 7
 139              		.cfi_def_cfa_offset 0
 140 009a 7047     		bx	lr
 141              		.cfi_endproc
 142              	.LFE0:
 144              		.align	2
 145              		.global	SSIEnable
 146              		.thumb
 147              		.thumb_func
 149              	SSIEnable:
 150              	.LFB1:
 166:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** 
 167:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //*****************************************************************************
 168:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //
 169:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! Enables the synchronous serial interface
 170:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //!
 171:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! \param ui32Base specifies the SSI module base address.
 172:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //!
 173:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! This function enables operation of the synchronous serial interface.  The
 174:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! synchronous serial interface must be configured before it is enabled.
 175:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //!
 176:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! \return None
 177:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //
 178:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //*****************************************************************************
 179:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** void
 180:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** SSIEnable(uint32_t ui32Base)
 181:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** {
 151              		.loc 1 181 0
 152              		.cfi_startproc
 153              		@ args = 0, pretend = 0, frame = 8
 154              		@ frame_needed = 1, uses_anonymous_args = 0
 155              		@ link register save eliminated.
 156 009c 80B4     		push	{r7}
 157              		.cfi_def_cfa_offset 4
 158              		.cfi_offset 7, -4
 159 009e 83B0     		sub	sp, sp, #12
 160              		.cfi_def_cfa_offset 16
 161 00a0 00AF     		add	r7, sp, #0
 162              		.cfi_def_cfa_register 7
 163 00a2 7860     		str	r0, [r7, #4]
 182:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     //
 183:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     // Check the arguments.
 184:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     //
 185:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     ASSERT((ui32Base == SSI0_BASE) || (ui32Base == SSI1_BASE));
 186:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** 
 187:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     //
 188:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     // Read-modify-write the enable bit.
 189:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     //
 190:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     HWREG(ui32Base + SSI_O_CR1) |= SSI_CR1_SSE;
 164              		.loc 1 190 0
 165 00a4 7B68     		ldr	r3, [r7, #4]
 166 00a6 0433     		adds	r3, r3, #4
 167 00a8 1A46     		mov	r2, r3
 168 00aa 7B68     		ldr	r3, [r7, #4]
 169 00ac 0433     		adds	r3, r3, #4
 170 00ae 1B68     		ldr	r3, [r3]
 171 00b0 43F00203 		orr	r3, r3, #2
 172 00b4 1360     		str	r3, [r2]
 191:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** }
 173              		.loc 1 191 0
 174 00b6 00BF     		nop
 175 00b8 0C37     		adds	r7, r7, #12
 176              		.cfi_def_cfa_offset 4
 177 00ba BD46     		mov	sp, r7
 178              		.cfi_def_cfa_register 13
 179              		@ sp needed
 180 00bc 80BC     		pop	{r7}
 181              		.cfi_restore 7
 182              		.cfi_def_cfa_offset 0
 183 00be 7047     		bx	lr
 184              		.cfi_endproc
 185              	.LFE1:
 187              		.align	2
 188              		.global	SSIDisable
 189              		.thumb
 190              		.thumb_func
 192              	SSIDisable:
 193              	.LFB2:
 192:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** 
 193:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //*****************************************************************************
 194:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //
 195:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! Disables the synchronous serial interface
 196:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //!
 197:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! \param ui32Base specifies the SSI module base address.
 198:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //!
 199:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! This function disables operation of the synchronous serial interface.
 200:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //!
 201:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! \return None
 202:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //
 203:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //*****************************************************************************
 204:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** void
 205:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** SSIDisable(uint32_t ui32Base)
 206:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** {
 194              		.loc 1 206 0
 195              		.cfi_startproc
 196              		@ args = 0, pretend = 0, frame = 8
 197              		@ frame_needed = 1, uses_anonymous_args = 0
 198              		@ link register save eliminated.
 199 00c0 80B4     		push	{r7}
 200              		.cfi_def_cfa_offset 4
 201              		.cfi_offset 7, -4
 202 00c2 83B0     		sub	sp, sp, #12
 203              		.cfi_def_cfa_offset 16
 204 00c4 00AF     		add	r7, sp, #0
 205              		.cfi_def_cfa_register 7
 206 00c6 7860     		str	r0, [r7, #4]
 207:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     //
 208:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     // Check the arguments.
 209:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     //
 210:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     ASSERT((ui32Base == SSI0_BASE) || (ui32Base == SSI1_BASE));
 211:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** 
 212:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     //
 213:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     // Read-modify-write the enable bit.
 214:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     //
 215:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     HWREG(ui32Base + SSI_O_CR1) &= ~(SSI_CR1_SSE);
 207              		.loc 1 215 0
 208 00c8 7B68     		ldr	r3, [r7, #4]
 209 00ca 0433     		adds	r3, r3, #4
 210 00cc 1A46     		mov	r2, r3
 211 00ce 7B68     		ldr	r3, [r7, #4]
 212 00d0 0433     		adds	r3, r3, #4
 213 00d2 1B68     		ldr	r3, [r3]
 214 00d4 23F00203 		bic	r3, r3, #2
 215 00d8 1360     		str	r3, [r2]
 216:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** }
 216              		.loc 1 216 0
 217 00da 00BF     		nop
 218 00dc 0C37     		adds	r7, r7, #12
 219              		.cfi_def_cfa_offset 4
 220 00de BD46     		mov	sp, r7
 221              		.cfi_def_cfa_register 13
 222              		@ sp needed
 223 00e0 80BC     		pop	{r7}
 224              		.cfi_restore 7
 225              		.cfi_def_cfa_offset 0
 226 00e2 7047     		bx	lr
 227              		.cfi_endproc
 228              	.LFE2:
 230              		.align	2
 231              		.global	SSIIntRegister
 232              		.thumb
 233              		.thumb_func
 235              	SSIIntRegister:
 236              	.LFB3:
 217:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** 
 218:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //*****************************************************************************
 219:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //
 220:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! Registers an interrupt handler for the synchronous serial interface
 221:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //!
 222:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! \param ui32Base specifies the SSI module base address.
 223:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! \param pfnHandler is a pointer to the function to be called when the
 224:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! synchronous serial interface interrupt occurs.
 225:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //!
 226:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! This sets the handler to be called when an SSI interrupt
 227:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! occurs.  This will enable the global interrupt in the interrupt controller;
 228:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! specific SSI interrupts must be enabled via SSIIntEnable().  If necessary,
 229:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! it is the interrupt handler's responsibility to clear the interrupt source
 230:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! via SSIIntClear().
 231:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //!
 232:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! \sa See IntRegister() for important information about registering interrupt
 233:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! handlers.
 234:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //!
 235:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! \return None
 236:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //
 237:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //*****************************************************************************
 238:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** void
 239:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** SSIIntRegister(uint32_t ui32Base, void (*pfnHandler)(void))
 240:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** {
 237              		.loc 1 240 0
 238              		.cfi_startproc
 239              		@ args = 0, pretend = 0, frame = 16
 240              		@ frame_needed = 1, uses_anonymous_args = 0
 241 00e4 80B5     		push	{r7, lr}
 242              		.cfi_def_cfa_offset 8
 243              		.cfi_offset 7, -8
 244              		.cfi_offset 14, -4
 245 00e6 84B0     		sub	sp, sp, #16
 246              		.cfi_def_cfa_offset 24
 247 00e8 00AF     		add	r7, sp, #0
 248              		.cfi_def_cfa_register 7
 249 00ea 7860     		str	r0, [r7, #4]
 250 00ec 3960     		str	r1, [r7]
 241:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     uint32_t ui32Int;
 242:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** 
 243:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     //
 244:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     // Check the arguments.
 245:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     //
 246:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     ASSERT((ui32Base == SSI0_BASE) || (ui32Base == SSI1_BASE));
 247:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** 
 248:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     //
 249:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     // Determine the interrupt number based on the SSI port.
 250:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     //
 251:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     ui32Int = (ui32Base == SSI0_BASE) ? INT_SSI0 : INT_SSI1;
 251              		.loc 1 251 0
 252 00ee 7B68     		ldr	r3, [r7, #4]
 253 00f0 084A     		ldr	r2, .L12
 254 00f2 9342     		cmp	r3, r2
 255 00f4 01D1     		bne	.L10
 256              		.loc 1 251 0 is_stmt 0 discriminator 1
 257 00f6 1723     		movs	r3, #23
 258 00f8 00E0     		b	.L11
 259              	.L10:
 260              		.loc 1 251 0 discriminator 2
 261 00fa 3223     		movs	r3, #50
 262              	.L11:
 263              		.loc 1 251 0 discriminator 4
 264 00fc FB60     		str	r3, [r7, #12]
 252:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** 
 253:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     //
 254:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     // Register the interrupt handler, returning an error if an error occurs.
 255:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     //
 256:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     IntRegister(ui32Int, pfnHandler);
 265              		.loc 1 256 0 is_stmt 1 discriminator 4
 266 00fe 3968     		ldr	r1, [r7]
 267 0100 F868     		ldr	r0, [r7, #12]
 268 0102 FFF7FEFF 		bl	IntRegister
 257:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** 
 258:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     //
 259:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     // Enable the synchronous serial interface interrupt.
 260:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     //
 261:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     IntEnable(ui32Int);
 269              		.loc 1 261 0 discriminator 4
 270 0106 F868     		ldr	r0, [r7, #12]
 271 0108 FFF7FEFF 		bl	IntEnable
 262:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** }
 272              		.loc 1 262 0 discriminator 4
 273 010c 00BF     		nop
 274 010e 1037     		adds	r7, r7, #16
 275              		.cfi_def_cfa_offset 8
 276 0110 BD46     		mov	sp, r7
 277              		.cfi_def_cfa_register 13
 278              		@ sp needed
 279 0112 80BD     		pop	{r7, pc}
 280              	.L13:
 281              		.align	2
 282              	.L12:
 283 0114 00800040 		.word	1073774592
 284              		.cfi_endproc
 285              	.LFE3:
 287              		.align	2
 288              		.global	SSIIntUnregister
 289              		.thumb
 290              		.thumb_func
 292              	SSIIntUnregister:
 293              	.LFB4:
 263:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** 
 264:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //*****************************************************************************
 265:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //
 266:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! Unregisters an interrupt handler for the synchronous serial interface
 267:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //!
 268:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! \param ui32Base specifies the SSI module base address.
 269:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //!
 270:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! This function will clear the handler to be called when a SSI
 271:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! interrupt occurs.  This will also mask off the interrupt in the interrupt
 272:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! controller so that the interrupt handler no longer is called.
 273:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //!
 274:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! \sa See IntRegister() for important information about registering interrupt
 275:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! handlers.
 276:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //!
 277:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! \return None
 278:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //
 279:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //*****************************************************************************
 280:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** void
 281:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** SSIIntUnregister(uint32_t ui32Base)
 282:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** {
 294              		.loc 1 282 0
 295              		.cfi_startproc
 296              		@ args = 0, pretend = 0, frame = 16
 297              		@ frame_needed = 1, uses_anonymous_args = 0
 298 0118 80B5     		push	{r7, lr}
 299              		.cfi_def_cfa_offset 8
 300              		.cfi_offset 7, -8
 301              		.cfi_offset 14, -4
 302 011a 84B0     		sub	sp, sp, #16
 303              		.cfi_def_cfa_offset 24
 304 011c 00AF     		add	r7, sp, #0
 305              		.cfi_def_cfa_register 7
 306 011e 7860     		str	r0, [r7, #4]
 283:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     uint32_t ui32Int;
 284:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** 
 285:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     //
 286:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     // Check the arguments.
 287:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     //
 288:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     ASSERT((ui32Base == SSI0_BASE) || (ui32Base == SSI1_BASE));
 289:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** 
 290:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     //
 291:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     // Determine the interrupt number based on the SSI port.
 292:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     //
 293:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     ui32Int = (ui32Base == SSI0_BASE) ? INT_SSI0 : INT_SSI1;
 307              		.loc 1 293 0
 308 0120 7B68     		ldr	r3, [r7, #4]
 309 0122 084A     		ldr	r2, .L17
 310 0124 9342     		cmp	r3, r2
 311 0126 01D1     		bne	.L15
 312              		.loc 1 293 0 is_stmt 0 discriminator 1
 313 0128 1723     		movs	r3, #23
 314 012a 00E0     		b	.L16
 315              	.L15:
 316              		.loc 1 293 0 discriminator 2
 317 012c 3223     		movs	r3, #50
 318              	.L16:
 319              		.loc 1 293 0 discriminator 4
 320 012e FB60     		str	r3, [r7, #12]
 294:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** 
 295:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     //
 296:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     // Disable the interrupt.
 297:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     //
 298:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     IntDisable(ui32Int);
 321              		.loc 1 298 0 is_stmt 1 discriminator 4
 322 0130 F868     		ldr	r0, [r7, #12]
 323 0132 FFF7FEFF 		bl	IntDisable
 299:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** 
 300:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     //
 301:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     // Unregister the interrupt handler.
 302:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     //
 303:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     IntUnregister(ui32Int);
 324              		.loc 1 303 0 discriminator 4
 325 0136 F868     		ldr	r0, [r7, #12]
 326 0138 FFF7FEFF 		bl	IntUnregister
 304:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** }
 327              		.loc 1 304 0 discriminator 4
 328 013c 00BF     		nop
 329 013e 1037     		adds	r7, r7, #16
 330              		.cfi_def_cfa_offset 8
 331 0140 BD46     		mov	sp, r7
 332              		.cfi_def_cfa_register 13
 333              		@ sp needed
 334 0142 80BD     		pop	{r7, pc}
 335              	.L18:
 336              		.align	2
 337              	.L17:
 338 0144 00800040 		.word	1073774592
 339              		.cfi_endproc
 340              	.LFE4:
 342              		.align	2
 343              		.global	SSIIntEnable
 344              		.thumb
 345              		.thumb_func
 347              	SSIIntEnable:
 348              	.LFB5:
 305:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** 
 306:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //*****************************************************************************
 307:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //
 308:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! Enables individual SSI interrupt sources
 309:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //!
 310:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! \param ui32Base specifies the SSI module base address.
 311:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! \param ui32IntFlags is a bit mask of the interrupt sources to be enabled.
 312:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //!
 313:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! Enables the indicated SSI interrupt sources.  Only the sources that are
 314:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! enabled can be reflected to the processor interrupt; disabled sources have
 315:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! no effect on the processor.  The \e ui32IntFlags parameter can be any of the
 316:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! \b SSI_TXFF, \b SSI_RXFF, \b SSI_RXTO, or \b SSI_RXOR values.
 317:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //!
 318:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! \return None
 319:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //
 320:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //*****************************************************************************
 321:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** void
 322:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** SSIIntEnable(uint32_t ui32Base, uint32_t ui32IntFlags)
 323:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** {
 349              		.loc 1 323 0
 350              		.cfi_startproc
 351              		@ args = 0, pretend = 0, frame = 8
 352              		@ frame_needed = 1, uses_anonymous_args = 0
 353              		@ link register save eliminated.
 354 0148 80B4     		push	{r7}
 355              		.cfi_def_cfa_offset 4
 356              		.cfi_offset 7, -4
 357 014a 83B0     		sub	sp, sp, #12
 358              		.cfi_def_cfa_offset 16
 359 014c 00AF     		add	r7, sp, #0
 360              		.cfi_def_cfa_register 7
 361 014e 7860     		str	r0, [r7, #4]
 362 0150 3960     		str	r1, [r7]
 324:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     //
 325:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     // Check the arguments.
 326:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     //
 327:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     ASSERT((ui32Base == SSI0_BASE) || (ui32Base == SSI1_BASE));
 328:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** 
 329:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     //
 330:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     // Enable the specified interrupts.
 331:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     //
 332:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     HWREG(ui32Base + SSI_O_IM) |= ui32IntFlags;
 363              		.loc 1 332 0
 364 0152 7B68     		ldr	r3, [r7, #4]
 365 0154 1433     		adds	r3, r3, #20
 366 0156 1946     		mov	r1, r3
 367 0158 7B68     		ldr	r3, [r7, #4]
 368 015a 1433     		adds	r3, r3, #20
 369 015c 1A68     		ldr	r2, [r3]
 370 015e 3B68     		ldr	r3, [r7]
 371 0160 1343     		orrs	r3, r3, r2
 372 0162 0B60     		str	r3, [r1]
 333:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** }
 373              		.loc 1 333 0
 374 0164 00BF     		nop
 375 0166 0C37     		adds	r7, r7, #12
 376              		.cfi_def_cfa_offset 4
 377 0168 BD46     		mov	sp, r7
 378              		.cfi_def_cfa_register 13
 379              		@ sp needed
 380 016a 80BC     		pop	{r7}
 381              		.cfi_restore 7
 382              		.cfi_def_cfa_offset 0
 383 016c 7047     		bx	lr
 384              		.cfi_endproc
 385              	.LFE5:
 387 016e 00BF     		.align	2
 388              		.global	SSIIntDisable
 389              		.thumb
 390              		.thumb_func
 392              	SSIIntDisable:
 393              	.LFB6:
 334:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** 
 335:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //*****************************************************************************
 336:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //
 337:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! Disables individual SSI interrupt sources
 338:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //!
 339:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! \param ui32Base specifies the SSI module base address.
 340:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! \param ui32IntFlags is a bit mask of the interrupt sources to be disabled.
 341:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //!
 342:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! Disables the indicated SSI interrupt sources.  The \e ui32IntFlags parameter
 343:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! can be any of the \b SSI_TXFF, \b SSI_RXFF, \b SSI_RXTO, or \b SSI_RXOR
 344:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! values.
 345:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //!
 346:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! \return None
 347:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //
 348:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //*****************************************************************************
 349:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** void
 350:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** SSIIntDisable(uint32_t ui32Base, uint32_t ui32IntFlags)
 351:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** {
 394              		.loc 1 351 0
 395              		.cfi_startproc
 396              		@ args = 0, pretend = 0, frame = 8
 397              		@ frame_needed = 1, uses_anonymous_args = 0
 398              		@ link register save eliminated.
 399 0170 80B4     		push	{r7}
 400              		.cfi_def_cfa_offset 4
 401              		.cfi_offset 7, -4
 402 0172 83B0     		sub	sp, sp, #12
 403              		.cfi_def_cfa_offset 16
 404 0174 00AF     		add	r7, sp, #0
 405              		.cfi_def_cfa_register 7
 406 0176 7860     		str	r0, [r7, #4]
 407 0178 3960     		str	r1, [r7]
 352:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     //
 353:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     // Check the arguments.
 354:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     //
 355:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     ASSERT((ui32Base == SSI0_BASE) || (ui32Base == SSI1_BASE));
 356:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** 
 357:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     //
 358:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     // Disable the specified interrupts.
 359:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     //
 360:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     HWREG(ui32Base + SSI_O_IM) &= ~(ui32IntFlags);
 408              		.loc 1 360 0
 409 017a 7B68     		ldr	r3, [r7, #4]
 410 017c 1433     		adds	r3, r3, #20
 411 017e 1946     		mov	r1, r3
 412 0180 7B68     		ldr	r3, [r7, #4]
 413 0182 1433     		adds	r3, r3, #20
 414 0184 1A68     		ldr	r2, [r3]
 415 0186 3B68     		ldr	r3, [r7]
 416 0188 DB43     		mvns	r3, r3
 417 018a 1340     		ands	r3, r3, r2
 418 018c 0B60     		str	r3, [r1]
 361:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** }
 419              		.loc 1 361 0
 420 018e 00BF     		nop
 421 0190 0C37     		adds	r7, r7, #12
 422              		.cfi_def_cfa_offset 4
 423 0192 BD46     		mov	sp, r7
 424              		.cfi_def_cfa_register 13
 425              		@ sp needed
 426 0194 80BC     		pop	{r7}
 427              		.cfi_restore 7
 428              		.cfi_def_cfa_offset 0
 429 0196 7047     		bx	lr
 430              		.cfi_endproc
 431              	.LFE6:
 433              		.align	2
 434              		.global	SSIIntStatus
 435              		.thumb
 436              		.thumb_func
 438              	SSIIntStatus:
 439              	.LFB7:
 362:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** 
 363:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //*****************************************************************************
 364:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //
 365:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! Gets the current interrupt status
 366:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //!
 367:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! \param ui32Base specifies the SSI module base address.
 368:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! \param bMasked is \b false if the raw interrupt status is required or
 369:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! \b true if the masked interrupt status is required.
 370:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //!
 371:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! This function returns the interrupt status for the SSI module.  Either the
 372:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! raw interrupt status or the status of interrupts that are allowed to
 373:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! reflect to the processor can be returned.
 374:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //!
 375:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! \return The current interrupt status, enumerated as a bit field of
 376:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! \b SSI_TXFF, \b SSI_RXFF, \b SSI_RXTO, and \b SSI_RXOR.
 377:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //
 378:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //*****************************************************************************
 379:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** uint32_t
 380:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** SSIIntStatus(uint32_t ui32Base, bool bMasked)
 381:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** {
 440              		.loc 1 381 0
 441              		.cfi_startproc
 442              		@ args = 0, pretend = 0, frame = 8
 443              		@ frame_needed = 1, uses_anonymous_args = 0
 444              		@ link register save eliminated.
 445 0198 80B4     		push	{r7}
 446              		.cfi_def_cfa_offset 4
 447              		.cfi_offset 7, -4
 448 019a 83B0     		sub	sp, sp, #12
 449              		.cfi_def_cfa_offset 16
 450 019c 00AF     		add	r7, sp, #0
 451              		.cfi_def_cfa_register 7
 452 019e 7860     		str	r0, [r7, #4]
 453 01a0 0B46     		mov	r3, r1
 454 01a2 FB70     		strb	r3, [r7, #3]
 382:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     //
 383:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     // Check the arguments.
 384:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     //
 385:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     ASSERT((ui32Base == SSI0_BASE) || (ui32Base == SSI1_BASE));
 386:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** 
 387:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     //
 388:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     // Return either the interrupt status or the raw interrupt status as
 389:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     // requested.
 390:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     //
 391:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     if(bMasked)
 455              		.loc 1 391 0
 456 01a4 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 457 01a6 002B     		cmp	r3, #0
 458 01a8 03D0     		beq	.L22
 392:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     {
 393:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****         return(HWREG(ui32Base + SSI_O_MIS));
 459              		.loc 1 393 0
 460 01aa 7B68     		ldr	r3, [r7, #4]
 461 01ac 1C33     		adds	r3, r3, #28
 462 01ae 1B68     		ldr	r3, [r3]
 463 01b0 02E0     		b	.L23
 464              	.L22:
 394:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     }
 395:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     else
 396:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     {
 397:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****         return(HWREG(ui32Base + SSI_O_RIS));
 465              		.loc 1 397 0
 466 01b2 7B68     		ldr	r3, [r7, #4]
 467 01b4 1833     		adds	r3, r3, #24
 468 01b6 1B68     		ldr	r3, [r3]
 469              	.L23:
 398:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     }
 399:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** }
 470              		.loc 1 399 0
 471 01b8 1846     		mov	r0, r3
 472 01ba 0C37     		adds	r7, r7, #12
 473              		.cfi_def_cfa_offset 4
 474 01bc BD46     		mov	sp, r7
 475              		.cfi_def_cfa_register 13
 476              		@ sp needed
 477 01be 80BC     		pop	{r7}
 478              		.cfi_restore 7
 479              		.cfi_def_cfa_offset 0
 480 01c0 7047     		bx	lr
 481              		.cfi_endproc
 482              	.LFE7:
 484 01c2 00BF     		.align	2
 485              		.global	SSIIntClear
 486              		.thumb
 487              		.thumb_func
 489              	SSIIntClear:
 490              	.LFB8:
 400:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** 
 401:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //*****************************************************************************
 402:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //
 403:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! Clears SSI interrupt sources
 404:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //!
 405:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! \param ui32Base specifies the SSI module base address.
 406:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! \param ui32IntFlags is a bit mask of the interrupt sources to be cleared.
 407:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //!
 408:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! The specified SSI interrupt sources are cleared so that they no longer
 409:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! assert.  This function must be called in the interrupt handler to keep the
 410:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! interrupts from being recognized again immediately upon exit.  The
 411:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! \e ui32IntFlags parameter can consist of either or both the \b SSI_RXTO and
 412:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! \b SSI_RXOR values.
 413:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //!
 414:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! \note Because there is a write buffer in the Cortex-M3 processor, it may
 415:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! take several clock cycles before the interrupt source is actually cleared.
 416:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! Therefore, it is recommended that the interrupt source be cleared early in
 417:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! the interrupt handler (as opposed to the very last action) to avoid
 418:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! returning from the interrupt handler before the interrupt source is
 419:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! actually cleared.  Failure to do so may result in the interrupt handler
 420:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! being immediately reentered (because the interrupt controller still sees
 421:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! the interrupt source asserted).
 422:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //!
 423:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! \return None
 424:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //
 425:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //*****************************************************************************
 426:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** void
 427:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** SSIIntClear(uint32_t ui32Base, uint32_t ui32IntFlags)
 428:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** {
 491              		.loc 1 428 0
 492              		.cfi_startproc
 493              		@ args = 0, pretend = 0, frame = 8
 494              		@ frame_needed = 1, uses_anonymous_args = 0
 495              		@ link register save eliminated.
 496 01c4 80B4     		push	{r7}
 497              		.cfi_def_cfa_offset 4
 498              		.cfi_offset 7, -4
 499 01c6 83B0     		sub	sp, sp, #12
 500              		.cfi_def_cfa_offset 16
 501 01c8 00AF     		add	r7, sp, #0
 502              		.cfi_def_cfa_register 7
 503 01ca 7860     		str	r0, [r7, #4]
 504 01cc 3960     		str	r1, [r7]
 429:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     //
 430:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     // Check the arguments.
 431:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     //
 432:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     ASSERT((ui32Base == SSI0_BASE) || (ui32Base == SSI1_BASE));
 433:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** 
 434:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     //
 435:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     // Clear the requested interrupt sources.
 436:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     //
 437:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     HWREG(ui32Base + SSI_O_ICR) = ui32IntFlags;
 505              		.loc 1 437 0
 506 01ce 7B68     		ldr	r3, [r7, #4]
 507 01d0 2033     		adds	r3, r3, #32
 508 01d2 1A46     		mov	r2, r3
 509 01d4 3B68     		ldr	r3, [r7]
 510 01d6 1360     		str	r3, [r2]
 438:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** }
 511              		.loc 1 438 0
 512 01d8 00BF     		nop
 513 01da 0C37     		adds	r7, r7, #12
 514              		.cfi_def_cfa_offset 4
 515 01dc BD46     		mov	sp, r7
 516              		.cfi_def_cfa_register 13
 517              		@ sp needed
 518 01de 80BC     		pop	{r7}
 519              		.cfi_restore 7
 520              		.cfi_def_cfa_offset 0
 521 01e0 7047     		bx	lr
 522              		.cfi_endproc
 523              	.LFE8:
 525 01e2 00BF     		.align	2
 526              		.global	SSIDataPut
 527              		.thumb
 528              		.thumb_func
 530              	SSIDataPut:
 531              	.LFB9:
 439:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** 
 440:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //*****************************************************************************
 441:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //
 442:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! Puts a data element into the SSI transmit FIFO
 443:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //!
 444:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! \param ui32Base specifies the SSI module base address.
 445:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! \param ui32Data is the data to be transmitted over the SSI interface.
 446:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //!
 447:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! This function places the supplied data into the transmit FIFO of the
 448:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! specified SSI module.
 449:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //!
 450:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! \note The upper 32 - N bits of the \e ui32Data are discarded by the hardware,
 451:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! where N is the data width as configured by SSIConfigSetExpClk().  For
 452:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! example, if the interface is configured for 8-bit data width, the upper 24
 453:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! bits of \e ui32Data are discarded.
 454:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //!
 455:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! \return None
 456:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //
 457:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //*****************************************************************************
 458:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** void
 459:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** SSIDataPut(uint32_t ui32Base, uint32_t ui32Data)
 460:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** {
 532              		.loc 1 460 0
 533              		.cfi_startproc
 534              		@ args = 0, pretend = 0, frame = 8
 535              		@ frame_needed = 1, uses_anonymous_args = 0
 536              		@ link register save eliminated.
 537 01e4 80B4     		push	{r7}
 538              		.cfi_def_cfa_offset 4
 539              		.cfi_offset 7, -4
 540 01e6 83B0     		sub	sp, sp, #12
 541              		.cfi_def_cfa_offset 16
 542 01e8 00AF     		add	r7, sp, #0
 543              		.cfi_def_cfa_register 7
 544 01ea 7860     		str	r0, [r7, #4]
 545 01ec 3960     		str	r1, [r7]
 461:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     //
 462:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     // Check the arguments.
 463:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     //
 464:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     ASSERT((ui32Base == SSI0_BASE) || (ui32Base == SSI1_BASE));
 465:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     ASSERT((ui32Data & (0xfffffffe << (HWREG(ui32Base + SSI_O_CR0) &
 466:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****                                        SSI_CR0_DSS_M))) == 0);
 467:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** 
 468:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     //
 469:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     // Wait until there is space.
 470:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     //
 471:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     while(!(HWREG(ui32Base + SSI_O_SR) & SSI_SR_TNF))
 546              		.loc 1 471 0
 547 01ee 00BF     		nop
 548              	.L26:
 549              		.loc 1 471 0 is_stmt 0 discriminator 1
 550 01f0 7B68     		ldr	r3, [r7, #4]
 551 01f2 0C33     		adds	r3, r3, #12
 552 01f4 1B68     		ldr	r3, [r3]
 553 01f6 03F00203 		and	r3, r3, #2
 554 01fa 002B     		cmp	r3, #0
 555 01fc F8D0     		beq	.L26
 472:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     {
 473:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     }
 474:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** 
 475:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     //
 476:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     // Write the data to the SSI.
 477:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     //
 478:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     HWREG(ui32Base + SSI_O_DR) = ui32Data;
 556              		.loc 1 478 0 is_stmt 1
 557 01fe 7B68     		ldr	r3, [r7, #4]
 558 0200 0833     		adds	r3, r3, #8
 559 0202 1A46     		mov	r2, r3
 560 0204 3B68     		ldr	r3, [r7]
 561 0206 1360     		str	r3, [r2]
 479:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** }
 562              		.loc 1 479 0
 563 0208 00BF     		nop
 564 020a 0C37     		adds	r7, r7, #12
 565              		.cfi_def_cfa_offset 4
 566 020c BD46     		mov	sp, r7
 567              		.cfi_def_cfa_register 13
 568              		@ sp needed
 569 020e 80BC     		pop	{r7}
 570              		.cfi_restore 7
 571              		.cfi_def_cfa_offset 0
 572 0210 7047     		bx	lr
 573              		.cfi_endproc
 574              	.LFE9:
 576 0212 00BF     		.align	2
 577              		.global	SSIDataPutNonBlocking
 578              		.thumb
 579              		.thumb_func
 581              	SSIDataPutNonBlocking:
 582              	.LFB10:
 480:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** 
 481:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //*****************************************************************************
 482:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //
 483:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! Puts a data element into the SSI transmit FIFO
 484:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //!
 485:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! \param ui32Base specifies the SSI module base address.
 486:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! \param ui32Data is the data to be transmitted over the SSI interface.
 487:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //!
 488:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! This function places the supplied data into the transmit FIFO of the
 489:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! specified SSI module.  If there is no space in the FIFO, then this function
 490:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! returns a zero.
 491:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //!
 492:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! \note The upper 32 - N bits of the \e ui32Data are discarded by the hardware,
 493:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! where N is the data width as configured by SSIConfigSetExpClk().  For
 494:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! example, if the interface is configured for 8-bit data width, the upper 24
 495:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! bits of \e ui32Data are discarded.
 496:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //!
 497:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! \return Returns the number of elements written to the SSI transmit FIFO.
 498:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //
 499:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //*****************************************************************************
 500:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** int32_t
 501:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** SSIDataPutNonBlocking(uint32_t ui32Base, uint32_t ui32Data)
 502:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** {
 583              		.loc 1 502 0
 584              		.cfi_startproc
 585              		@ args = 0, pretend = 0, frame = 8
 586              		@ frame_needed = 1, uses_anonymous_args = 0
 587              		@ link register save eliminated.
 588 0214 80B4     		push	{r7}
 589              		.cfi_def_cfa_offset 4
 590              		.cfi_offset 7, -4
 591 0216 83B0     		sub	sp, sp, #12
 592              		.cfi_def_cfa_offset 16
 593 0218 00AF     		add	r7, sp, #0
 594              		.cfi_def_cfa_register 7
 595 021a 7860     		str	r0, [r7, #4]
 596 021c 3960     		str	r1, [r7]
 503:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     //
 504:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     // Check the arguments.
 505:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     //
 506:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     ASSERT((ui32Base == SSI0_BASE) || (ui32Base == SSI1_BASE));
 507:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     ASSERT((ui32Data & (0xfffffffe << (HWREG(ui32Base + SSI_O_CR0) &
 508:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****                                        SSI_CR0_DSS_M))) == 0);
 509:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** 
 510:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     //
 511:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     // Check for space to write.
 512:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     //
 513:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     if(HWREG(ui32Base + SSI_O_SR) & SSI_SR_TNF)
 597              		.loc 1 513 0
 598 021e 7B68     		ldr	r3, [r7, #4]
 599 0220 0C33     		adds	r3, r3, #12
 600 0222 1B68     		ldr	r3, [r3]
 601 0224 03F00203 		and	r3, r3, #2
 602 0228 002B     		cmp	r3, #0
 603 022a 06D0     		beq	.L28
 514:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     {
 515:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****         HWREG(ui32Base + SSI_O_DR) = ui32Data;
 604              		.loc 1 515 0
 605 022c 7B68     		ldr	r3, [r7, #4]
 606 022e 0833     		adds	r3, r3, #8
 607 0230 1A46     		mov	r2, r3
 608 0232 3B68     		ldr	r3, [r7]
 609 0234 1360     		str	r3, [r2]
 516:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****         return(1);
 610              		.loc 1 516 0
 611 0236 0123     		movs	r3, #1
 612 0238 00E0     		b	.L29
 613              	.L28:
 517:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     }
 518:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     else
 519:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     {
 520:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****         return(0);
 614              		.loc 1 520 0
 615 023a 0023     		movs	r3, #0
 616              	.L29:
 521:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     }
 522:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** }
 617              		.loc 1 522 0
 618 023c 1846     		mov	r0, r3
 619 023e 0C37     		adds	r7, r7, #12
 620              		.cfi_def_cfa_offset 4
 621 0240 BD46     		mov	sp, r7
 622              		.cfi_def_cfa_register 13
 623              		@ sp needed
 624 0242 80BC     		pop	{r7}
 625              		.cfi_restore 7
 626              		.cfi_def_cfa_offset 0
 627 0244 7047     		bx	lr
 628              		.cfi_endproc
 629              	.LFE10:
 631 0246 00BF     		.align	2
 632              		.global	SSIDataGet
 633              		.thumb
 634              		.thumb_func
 636              	SSIDataGet:
 637              	.LFB11:
 523:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** 
 524:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //*****************************************************************************
 525:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //
 526:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! Gets a data element from the SSI receive FIFO
 527:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //!
 528:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! \param ui32Base specifies the SSI module base address.
 529:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! \param pui32Data is a pointer to a storage location for data that was
 530:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! received over the SSI interface.
 531:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //!
 532:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! This function gets received data from the receive FIFO of the specified
 533:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! SSI module and places that data into the location specified by the
 534:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! \e pui32Data parameter.
 535:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //!
 536:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! \note Only the lower N bits of the value written to \e pui32Data contain
 537:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! valid data, where N is the data width as configured by
 538:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! SSIConfigSetExpClk().  For example, if the interface is configured for
 539:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! 8-bit data width, only the lower 8 bits of the value written to \e pui32Data
 540:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! contain valid data.
 541:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //!
 542:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! \return None
 543:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //
 544:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //*****************************************************************************
 545:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** void
 546:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** SSIDataGet(uint32_t ui32Base, uint32_t *pui32Data)
 547:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** {
 638              		.loc 1 547 0
 639              		.cfi_startproc
 640              		@ args = 0, pretend = 0, frame = 8
 641              		@ frame_needed = 1, uses_anonymous_args = 0
 642              		@ link register save eliminated.
 643 0248 80B4     		push	{r7}
 644              		.cfi_def_cfa_offset 4
 645              		.cfi_offset 7, -4
 646 024a 83B0     		sub	sp, sp, #12
 647              		.cfi_def_cfa_offset 16
 648 024c 00AF     		add	r7, sp, #0
 649              		.cfi_def_cfa_register 7
 650 024e 7860     		str	r0, [r7, #4]
 651 0250 3960     		str	r1, [r7]
 548:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     //
 549:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     // Check the arguments.
 550:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     //
 551:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     ASSERT((ui32Base == SSI0_BASE) || (ui32Base == SSI1_BASE));
 552:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** 
 553:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     //
 554:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     // Wait until there is data to be read.
 555:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     //
 556:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     while(!(HWREG(ui32Base + SSI_O_SR) & SSI_SR_RNE))
 652              		.loc 1 556 0
 653 0252 00BF     		nop
 654              	.L31:
 655              		.loc 1 556 0 is_stmt 0 discriminator 1
 656 0254 7B68     		ldr	r3, [r7, #4]
 657 0256 0C33     		adds	r3, r3, #12
 658 0258 1B68     		ldr	r3, [r3]
 659 025a 03F00403 		and	r3, r3, #4
 660 025e 002B     		cmp	r3, #0
 661 0260 F8D0     		beq	.L31
 557:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     {
 558:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     }
 559:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** 
 560:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     //
 561:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     // Read data from SSI.
 562:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     //
 563:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     *pui32Data = HWREG(ui32Base + SSI_O_DR);
 662              		.loc 1 563 0 is_stmt 1
 663 0262 7B68     		ldr	r3, [r7, #4]
 664 0264 0833     		adds	r3, r3, #8
 665 0266 1A68     		ldr	r2, [r3]
 666 0268 3B68     		ldr	r3, [r7]
 667 026a 1A60     		str	r2, [r3]
 564:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** }
 668              		.loc 1 564 0
 669 026c 00BF     		nop
 670 026e 0C37     		adds	r7, r7, #12
 671              		.cfi_def_cfa_offset 4
 672 0270 BD46     		mov	sp, r7
 673              		.cfi_def_cfa_register 13
 674              		@ sp needed
 675 0272 80BC     		pop	{r7}
 676              		.cfi_restore 7
 677              		.cfi_def_cfa_offset 0
 678 0274 7047     		bx	lr
 679              		.cfi_endproc
 680              	.LFE11:
 682 0276 00BF     		.align	2
 683              		.global	SSIDataGetNonBlocking
 684              		.thumb
 685              		.thumb_func
 687              	SSIDataGetNonBlocking:
 688              	.LFB12:
 565:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** 
 566:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //*****************************************************************************
 567:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //
 568:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! Gets a data element from the SSI receive FIFO
 569:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //!
 570:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! \param ui32Base specifies the SSI module base address.
 571:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! \param pui32Data is a pointer to a storage location for data that was
 572:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! received over the SSI interface.
 573:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //!
 574:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! This function gets received data from the receive FIFO of the specified SSI
 575:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! module and places that data into the location specified by the \e ui32Data
 576:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! parameter.  If there is no data in the FIFO, then this function returns a
 577:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! zero.
 578:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //!
 579:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! \note Only the lower N bits of the value written to \e pui32Data contain
 580:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! valid data, where N is the data width as configured by
 581:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! SSIConfigSetExpClk().  For example, if the interface is configured for
 582:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! 8-bit data width, only the lower 8 bits of the value written to \e pui32Data
 583:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! contain valid data.
 584:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //!
 585:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! \return Returns the number of elements read from the SSI receive FIFO.
 586:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //
 587:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //*****************************************************************************
 588:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** int32_t
 589:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** SSIDataGetNonBlocking(uint32_t ui32Base, uint32_t *pui32Data)
 590:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** {
 689              		.loc 1 590 0
 690              		.cfi_startproc
 691              		@ args = 0, pretend = 0, frame = 8
 692              		@ frame_needed = 1, uses_anonymous_args = 0
 693              		@ link register save eliminated.
 694 0278 80B4     		push	{r7}
 695              		.cfi_def_cfa_offset 4
 696              		.cfi_offset 7, -4
 697 027a 83B0     		sub	sp, sp, #12
 698              		.cfi_def_cfa_offset 16
 699 027c 00AF     		add	r7, sp, #0
 700              		.cfi_def_cfa_register 7
 701 027e 7860     		str	r0, [r7, #4]
 702 0280 3960     		str	r1, [r7]
 591:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     //
 592:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     // Check the arguments.
 593:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     //
 594:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     ASSERT((ui32Base == SSI0_BASE) || (ui32Base == SSI1_BASE));
 595:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** 
 596:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     //
 597:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     // Check for data to read.
 598:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     //
 599:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     if(HWREG(ui32Base + SSI_O_SR) & SSI_SR_RNE)
 703              		.loc 1 599 0
 704 0282 7B68     		ldr	r3, [r7, #4]
 705 0284 0C33     		adds	r3, r3, #12
 706 0286 1B68     		ldr	r3, [r3]
 707 0288 03F00403 		and	r3, r3, #4
 708 028c 002B     		cmp	r3, #0
 709 028e 06D0     		beq	.L33
 600:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     {
 601:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****         *pui32Data = HWREG(ui32Base + SSI_O_DR);
 710              		.loc 1 601 0
 711 0290 7B68     		ldr	r3, [r7, #4]
 712 0292 0833     		adds	r3, r3, #8
 713 0294 1A68     		ldr	r2, [r3]
 714 0296 3B68     		ldr	r3, [r7]
 715 0298 1A60     		str	r2, [r3]
 602:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****         return(1);
 716              		.loc 1 602 0
 717 029a 0123     		movs	r3, #1
 718 029c 00E0     		b	.L34
 719              	.L33:
 603:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     }
 604:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     else
 605:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     {
 606:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****         return(0);
 720              		.loc 1 606 0
 721 029e 0023     		movs	r3, #0
 722              	.L34:
 607:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     }
 608:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** }
 723              		.loc 1 608 0
 724 02a0 1846     		mov	r0, r3
 725 02a2 0C37     		adds	r7, r7, #12
 726              		.cfi_def_cfa_offset 4
 727 02a4 BD46     		mov	sp, r7
 728              		.cfi_def_cfa_register 13
 729              		@ sp needed
 730 02a6 80BC     		pop	{r7}
 731              		.cfi_restore 7
 732              		.cfi_def_cfa_offset 0
 733 02a8 7047     		bx	lr
 734              		.cfi_endproc
 735              	.LFE12:
 737 02aa 00BF     		.align	2
 738              		.global	SSIDMAEnable
 739              		.thumb
 740              		.thumb_func
 742              	SSIDMAEnable:
 743              	.LFB13:
 609:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** 
 610:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //*****************************************************************************
 611:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //
 612:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! Enable SSI DMA operation
 613:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //!
 614:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! \param ui32Base is the base address of the SSI port.
 615:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! \param ui32DMAFlags is a bit mask of the DMA features to enable.
 616:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //!
 617:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! The specified SSI DMA features are enabled.  The SSI can be
 618:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! configured to use DMA for transmit and/or receive data transfers.
 619:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! The \e ui32DMAFlags parameter is the logical OR of any of the following
 620:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! values:
 621:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //!
 622:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! - SSI_DMA_RX - enable DMA for receive
 623:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! - SSI_DMA_TX - enable DMA for transmit
 624:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //!
 625:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! \note The uDMA controller must also be set up before DMA can be used
 626:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! with the SSI.
 627:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //!
 628:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! \return None
 629:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //
 630:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //*****************************************************************************
 631:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** void
 632:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** SSIDMAEnable(uint32_t ui32Base, uint32_t ui32DMAFlags)
 633:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** {
 744              		.loc 1 633 0
 745              		.cfi_startproc
 746              		@ args = 0, pretend = 0, frame = 8
 747              		@ frame_needed = 1, uses_anonymous_args = 0
 748              		@ link register save eliminated.
 749 02ac 80B4     		push	{r7}
 750              		.cfi_def_cfa_offset 4
 751              		.cfi_offset 7, -4
 752 02ae 83B0     		sub	sp, sp, #12
 753              		.cfi_def_cfa_offset 16
 754 02b0 00AF     		add	r7, sp, #0
 755              		.cfi_def_cfa_register 7
 756 02b2 7860     		str	r0, [r7, #4]
 757 02b4 3960     		str	r1, [r7]
 634:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     //
 635:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     // Check the arguments.
 636:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     //
 637:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     ASSERT((ui32Base == SSI0_BASE) || (ui32Base == SSI1_BASE));
 638:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** 
 639:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     //
 640:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     // Set the requested bits in the SSI DMA control register.
 641:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     //
 642:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     HWREG(ui32Base + SSI_O_DMACTL) |= ui32DMAFlags;
 758              		.loc 1 642 0
 759 02b6 7B68     		ldr	r3, [r7, #4]
 760 02b8 2433     		adds	r3, r3, #36
 761 02ba 1946     		mov	r1, r3
 762 02bc 7B68     		ldr	r3, [r7, #4]
 763 02be 2433     		adds	r3, r3, #36
 764 02c0 1A68     		ldr	r2, [r3]
 765 02c2 3B68     		ldr	r3, [r7]
 766 02c4 1343     		orrs	r3, r3, r2
 767 02c6 0B60     		str	r3, [r1]
 643:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** }
 768              		.loc 1 643 0
 769 02c8 00BF     		nop
 770 02ca 0C37     		adds	r7, r7, #12
 771              		.cfi_def_cfa_offset 4
 772 02cc BD46     		mov	sp, r7
 773              		.cfi_def_cfa_register 13
 774              		@ sp needed
 775 02ce 80BC     		pop	{r7}
 776              		.cfi_restore 7
 777              		.cfi_def_cfa_offset 0
 778 02d0 7047     		bx	lr
 779              		.cfi_endproc
 780              	.LFE13:
 782 02d2 00BF     		.align	2
 783              		.global	SSIDMADisable
 784              		.thumb
 785              		.thumb_func
 787              	SSIDMADisable:
 788              	.LFB14:
 644:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** 
 645:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //*****************************************************************************
 646:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //
 647:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! Disable SSI DMA operation
 648:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //!
 649:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! \param ui32Base is the base address of the SSI port.
 650:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! \param ui32DMAFlags is a bit mask of the DMA features to disable.
 651:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //!
 652:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! This function is used to disable SSI DMA features that were enabled
 653:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! by SSIDMAEnable().  The specified SSI DMA features are disabled.  The
 654:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! \e ui32DMAFlags parameter is the logical OR of any of the following values:
 655:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //!
 656:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! - SSI_DMA_RX - disable DMA for receive
 657:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! - SSI_DMA_TX - disable DMA for transmit
 658:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //!
 659:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! \return None
 660:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //
 661:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //*****************************************************************************
 662:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** void
 663:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** SSIDMADisable(uint32_t ui32Base, uint32_t ui32DMAFlags)
 664:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** {
 789              		.loc 1 664 0
 790              		.cfi_startproc
 791              		@ args = 0, pretend = 0, frame = 8
 792              		@ frame_needed = 1, uses_anonymous_args = 0
 793              		@ link register save eliminated.
 794 02d4 80B4     		push	{r7}
 795              		.cfi_def_cfa_offset 4
 796              		.cfi_offset 7, -4
 797 02d6 83B0     		sub	sp, sp, #12
 798              		.cfi_def_cfa_offset 16
 799 02d8 00AF     		add	r7, sp, #0
 800              		.cfi_def_cfa_register 7
 801 02da 7860     		str	r0, [r7, #4]
 802 02dc 3960     		str	r1, [r7]
 665:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     //
 666:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     // Check the arguments.
 667:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     //
 668:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     ASSERT((ui32Base == SSI0_BASE) || (ui32Base == SSI1_BASE));
 669:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** 
 670:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     //
 671:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     // Clear the requested bits in the SSI DMA control register.
 672:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     //
 673:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     HWREG(ui32Base + SSI_O_DMACTL) &= ~ui32DMAFlags;
 803              		.loc 1 673 0
 804 02de 7B68     		ldr	r3, [r7, #4]
 805 02e0 2433     		adds	r3, r3, #36
 806 02e2 1946     		mov	r1, r3
 807 02e4 7B68     		ldr	r3, [r7, #4]
 808 02e6 2433     		adds	r3, r3, #36
 809 02e8 1A68     		ldr	r2, [r3]
 810 02ea 3B68     		ldr	r3, [r7]
 811 02ec DB43     		mvns	r3, r3
 812 02ee 1340     		ands	r3, r3, r2
 813 02f0 0B60     		str	r3, [r1]
 674:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** }
 814              		.loc 1 674 0
 815 02f2 00BF     		nop
 816 02f4 0C37     		adds	r7, r7, #12
 817              		.cfi_def_cfa_offset 4
 818 02f6 BD46     		mov	sp, r7
 819              		.cfi_def_cfa_register 13
 820              		@ sp needed
 821 02f8 80BC     		pop	{r7}
 822              		.cfi_restore 7
 823              		.cfi_def_cfa_offset 0
 824 02fa 7047     		bx	lr
 825              		.cfi_endproc
 826              	.LFE14:
 828              		.align	2
 829              		.global	SSIBusy
 830              		.thumb
 831              		.thumb_func
 833              	SSIBusy:
 834              	.LFB15:
 675:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** 
 676:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //*****************************************************************************
 677:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //
 678:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! Determines whether the SSI transmitter is busy or not
 679:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //!
 680:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! \param ui32Base is the base address of the SSI port.
 681:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //!
 682:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! Allows the caller to determine whether all transmitted bytes have cleared
 683:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! the transmitter hardware.  If \b false is returned, then the transmit FIFO
 684:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! is empty and all bits of the last transmitted word have left the hardware
 685:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! shift register.
 686:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //!
 687:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! \return Returns \b true if the SSI is transmitting or \b false if all
 688:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! transmissions are complete.
 689:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //
 690:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //*****************************************************************************
 691:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** bool
 692:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** SSIBusy(uint32_t ui32Base)
 693:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** {
 835              		.loc 1 693 0
 836              		.cfi_startproc
 837              		@ args = 0, pretend = 0, frame = 8
 838              		@ frame_needed = 1, uses_anonymous_args = 0
 839              		@ link register save eliminated.
 840 02fc 80B4     		push	{r7}
 841              		.cfi_def_cfa_offset 4
 842              		.cfi_offset 7, -4
 843 02fe 83B0     		sub	sp, sp, #12
 844              		.cfi_def_cfa_offset 16
 845 0300 00AF     		add	r7, sp, #0
 846              		.cfi_def_cfa_register 7
 847 0302 7860     		str	r0, [r7, #4]
 694:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     //
 695:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     // Check the arguments.
 696:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     //
 697:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     ASSERT((ui32Base == SSI0_BASE) || (ui32Base == SSI1_BASE));
 698:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** 
 699:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     //
 700:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     // Determine if the SSI is busy.
 701:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     //
 702:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     return((HWREG(ui32Base + SSI_O_SR) & SSI_SR_BSY) ? true : false);
 848              		.loc 1 702 0
 849 0304 7B68     		ldr	r3, [r7, #4]
 850 0306 0C33     		adds	r3, r3, #12
 851 0308 1B68     		ldr	r3, [r3]
 852 030a 03F01003 		and	r3, r3, #16
 853 030e 002B     		cmp	r3, #0
 854 0310 14BF     		ite	ne
 855 0312 0123     		movne	r3, #1
 856 0314 0023     		moveq	r3, #0
 857 0316 DBB2     		uxtb	r3, r3
 703:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** }
 858              		.loc 1 703 0
 859 0318 1846     		mov	r0, r3
 860 031a 0C37     		adds	r7, r7, #12
 861              		.cfi_def_cfa_offset 4
 862 031c BD46     		mov	sp, r7
 863              		.cfi_def_cfa_register 13
 864              		@ sp needed
 865 031e 80BC     		pop	{r7}
 866              		.cfi_restore 7
 867              		.cfi_def_cfa_offset 0
 868 0320 7047     		bx	lr
 869              		.cfi_endproc
 870              	.LFE15:
 872 0322 00BF     		.align	2
 873              		.global	SSIClockSourceSet
 874              		.thumb
 875              		.thumb_func
 877              	SSIClockSourceSet:
 878              	.LFB16:
 704:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** 
 705:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //*****************************************************************************
 706:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //
 707:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! Sets the data clock source for the specified SSI peripheral
 708:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //!
 709:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! \param ui32Base is the base address of the SSI port.
 710:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! \param ui32Source is the baud clock source for the SSI.
 711:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //!
 712:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! This function allows the baud clock source for the SSI to be selected.
 713:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! The possible clock source are the system clock (\b SSI_CLOCK_SYSTEM) or
 714:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! the precision internal oscillator (\b SSI_CLOCK_PIOSC), i.e. the IO clock
 715:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! in the SysCtrl.
 716:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! If \b SSI_CLOCK_SYSTEM is chosen, the IO clock frequency must thus be
 717:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! queried by SysCtrlClockSet().
 718:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! If \b SSI_CLOCK_PIOSC the SysCtrlIOClockSet() function must be used.
 719:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //!
 720:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! Changing the baud clock source will change the data rate generated by the
 721:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! SSI.  Therefore, the data rate should be reconfigured after any change to
 722:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! the SSI clock source.
 723:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //!
 724:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! \return None
 725:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //
 726:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //*****************************************************************************
 727:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** void
 728:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** SSIClockSourceSet(uint32_t ui32Base, uint32_t ui32Source)
 729:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** {
 879              		.loc 1 729 0
 880              		.cfi_startproc
 881              		@ args = 0, pretend = 0, frame = 8
 882              		@ frame_needed = 1, uses_anonymous_args = 0
 883              		@ link register save eliminated.
 884 0324 80B4     		push	{r7}
 885              		.cfi_def_cfa_offset 4
 886              		.cfi_offset 7, -4
 887 0326 83B0     		sub	sp, sp, #12
 888              		.cfi_def_cfa_offset 16
 889 0328 00AF     		add	r7, sp, #0
 890              		.cfi_def_cfa_register 7
 891 032a 7860     		str	r0, [r7, #4]
 892 032c 3960     		str	r1, [r7]
 730:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     //
 731:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     // Check the arguments.
 732:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     //
 733:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     ASSERT((ui32Base == SSI0_BASE) || (ui32Base == SSI1_BASE));
 734:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     ASSERT((ui32Source == SSI_CLOCK_SYSTEM) || (ui32Source == SSI_CLOCK_PIOSC));
 735:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** 
 736:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     //
 737:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     // Set the SSI clock source.
 738:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     //
 739:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     HWREG(ui32Base + SSI_O_CC) = ui32Source;
 893              		.loc 1 739 0
 894 032e 7B68     		ldr	r3, [r7, #4]
 895 0330 03F6C873 		addw	r3, r3, #4040
 896 0334 1A46     		mov	r2, r3
 897 0336 3B68     		ldr	r3, [r7]
 898 0338 1360     		str	r3, [r2]
 740:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** }
 899              		.loc 1 740 0
 900 033a 00BF     		nop
 901 033c 0C37     		adds	r7, r7, #12
 902              		.cfi_def_cfa_offset 4
 903 033e BD46     		mov	sp, r7
 904              		.cfi_def_cfa_register 13
 905              		@ sp needed
 906 0340 80BC     		pop	{r7}
 907              		.cfi_restore 7
 908              		.cfi_def_cfa_offset 0
 909 0342 7047     		bx	lr
 910              		.cfi_endproc
 911              	.LFE16:
 913              		.align	2
 914              		.global	SSIClockSourceGet
 915              		.thumb
 916              		.thumb_func
 918              	SSIClockSourceGet:
 919              	.LFB17:
 741:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** 
 742:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //*****************************************************************************
 743:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //
 744:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! Gets the data clock source for the specified SSI peripheral
 745:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //!
 746:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! \param ui32Base is the base address of the SSI port.
 747:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //!
 748:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! This function returns the data clock source for the specified SSI.  The
 749:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! possible data clock source are the system clock (\b SSI_CLOCK_SYSTEM) or
 750:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! the precision internal oscillator (\b SSI_CLOCK_PIOSC).
 751:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //!
 752:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //! \return None
 753:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //
 754:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** //*****************************************************************************
 755:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** uint32_t
 756:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** SSIClockSourceGet(uint32_t ui32Base)
 757:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** {
 920              		.loc 1 757 0
 921              		.cfi_startproc
 922              		@ args = 0, pretend = 0, frame = 8
 923              		@ frame_needed = 1, uses_anonymous_args = 0
 924              		@ link register save eliminated.
 925 0344 80B4     		push	{r7}
 926              		.cfi_def_cfa_offset 4
 927              		.cfi_offset 7, -4
 928 0346 83B0     		sub	sp, sp, #12
 929              		.cfi_def_cfa_offset 16
 930 0348 00AF     		add	r7, sp, #0
 931              		.cfi_def_cfa_register 7
 932 034a 7860     		str	r0, [r7, #4]
 758:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     //
 759:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     // Check the arguments.
 760:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     //
 761:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     ASSERT((ui32Base == SSI0_BASE) || (ui32Base == SSI1_BASE));
 762:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** 
 763:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     //
 764:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     // Return the SSI clock source.
 765:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     //
 766:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c ****     return(HWREG(ui32Base + SSI_O_CC));
 933              		.loc 1 766 0
 934 034c 7B68     		ldr	r3, [r7, #4]
 935 034e 03F6C873 		addw	r3, r3, #4040
 936 0352 1B68     		ldr	r3, [r3]
 767:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/ssi.c **** }
 937              		.loc 1 767 0
 938 0354 1846     		mov	r0, r3
 939 0356 0C37     		adds	r7, r7, #12
 940              		.cfi_def_cfa_offset 4
 941 0358 BD46     		mov	sp, r7
 942              		.cfi_def_cfa_register 13
 943              		@ sp needed
 944 035a 80BC     		pop	{r7}
 945              		.cfi_restore 7
 946              		.cfi_def_cfa_offset 0
 947 035c 7047     		bx	lr
 948              		.cfi_endproc
 949              	.LFE17:
 951              	.Letext0:
 952              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 953              		.file 3 "/usr/include/newlib/sys/_stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 ssi.c
     /tmp/ccKOYu4s.s:19     .text:0000000000000000 $t
     /tmp/ccKOYu4s.s:24     .text:0000000000000000 SSIConfigSetExpClk
     /tmp/ccKOYu4s.s:149    .text:000000000000009c SSIEnable
     /tmp/ccKOYu4s.s:192    .text:00000000000000c0 SSIDisable
     /tmp/ccKOYu4s.s:235    .text:00000000000000e4 SSIIntRegister
     /tmp/ccKOYu4s.s:283    .text:0000000000000114 $d
     /tmp/ccKOYu4s.s:287    .text:0000000000000118 $t
     /tmp/ccKOYu4s.s:292    .text:0000000000000118 SSIIntUnregister
     /tmp/ccKOYu4s.s:338    .text:0000000000000144 $d
     /tmp/ccKOYu4s.s:342    .text:0000000000000148 $t
     /tmp/ccKOYu4s.s:347    .text:0000000000000148 SSIIntEnable
     /tmp/ccKOYu4s.s:392    .text:0000000000000170 SSIIntDisable
     /tmp/ccKOYu4s.s:438    .text:0000000000000198 SSIIntStatus
     /tmp/ccKOYu4s.s:489    .text:00000000000001c4 SSIIntClear
     /tmp/ccKOYu4s.s:530    .text:00000000000001e4 SSIDataPut
     /tmp/ccKOYu4s.s:581    .text:0000000000000214 SSIDataPutNonBlocking
     /tmp/ccKOYu4s.s:636    .text:0000000000000248 SSIDataGet
     /tmp/ccKOYu4s.s:687    .text:0000000000000278 SSIDataGetNonBlocking
     /tmp/ccKOYu4s.s:742    .text:00000000000002ac SSIDMAEnable
     /tmp/ccKOYu4s.s:787    .text:00000000000002d4 SSIDMADisable
     /tmp/ccKOYu4s.s:833    .text:00000000000002fc SSIBusy
     /tmp/ccKOYu4s.s:877    .text:0000000000000324 SSIClockSourceSet
     /tmp/ccKOYu4s.s:918    .text:0000000000000344 SSIClockSourceGet
                     .debug_frame:0000000000000010 $d
                           .group:0000000000000000 wm4.0.8e445c0106ab795ab4704214cba6f089
                           .group:0000000000000000 wm4.hw_ints.h.42.85b9479f2be35b086f1bb7cbb15bc097
                           .group:0000000000000000 wm4.hw_memmap.h.39.19283c377d449c9bca5fdd8ccb62628c
                           .group:0000000000000000 wm4.hw_ssi.h.39.9082f14e87d6077894a6e46eebe76d2f
                           .group:0000000000000000 wm4._newlib_version.h.4.ad342815780c8db09778091a421b5b5b
                           .group:0000000000000000 wm4.features.h.33.d97f2d646536517df901beeb5b9993f5
                           .group:0000000000000000 wm4._default_types.h.15.933e8edd27a65e0b69af4a865eb623d2
                           .group:0000000000000000 wm4._intsup.h.10.b82bf99f69d6a5c085fc866de0d3eb9b
                           .group:0000000000000000 wm4._stdint.h.10.7a5f60e6741af4a5594a3867d347e1f9
                           .group:0000000000000000 wm4.stdint.h.23.373a9d32a9e4c2e88fd347156532d281
                           .group:0000000000000000 wm4.stdbool.h.29.07dce69c3b78884144b7f7bd19483461
                           .group:0000000000000000 wm4.hw_types.h.67.b10589a0806dcc2d274d6fab6b736519
                           .group:0000000000000000 wm4.interrupt.h.41.272fc4ec0e276feb439e7974d0f77eaf
                           .group:0000000000000000 wm4.ssi.h.41.9d9fef101e9b51d683ad9b5927a1b748

UNDEFINED SYMBOLS
IntRegister
IntEnable
IntDisable
IntUnregister
