   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"gptimer.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.align	2
  20              		.global	TimerEnable
  21              		.thumb
  22              		.thumb_func
  24              	TimerEnable:
  25              	.LFB0:
  26              		.file 1 "build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c"
   1:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** /******************************************************************************
   2:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** *  Filename:       gptimer.c
   3:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** *  Revised:        $Date: 2013-04-12 14:54:28 +0200 (Fri, 12 Apr 2013) $
   4:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** *  Revision:       $Revision: 9731 $
   5:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** *
   6:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** *  Description:    Driver for the general purpose timer module.
   7:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** *
   8:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** *  Copyright (C) 2012 Texas Instruments Incorporated - http://www.ti.com/
   9:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** *
  10:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** *
  11:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** *  Redistribution and use in source and binary forms, with or without
  12:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** *  modification, are permitted provided that the following conditions
  13:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** *  are met:
  14:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** *
  15:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** *    Redistributions of source code must retain the above copyright
  16:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** *    notice, this list of conditions and the following disclaimer.
  17:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** *
  18:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** *    Redistributions in binary form must reproduce the above copyright
  19:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** *    notice, this list of conditions and the following disclaimer in the
  20:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** *    documentation and/or other materials provided with the distribution.
  21:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** *
  22:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** *    Neither the name of Texas Instruments Incorporated nor the names of
  23:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** *    its contributors may be used to endorse or promote products derived
  24:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** *    from this software without specific prior written permission.
  25:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** *
  26:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  27:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  28:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
  29:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
  30:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  31:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  32:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  33:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  34:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  35:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  36:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** *  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  37:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** *
  38:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** ******************************************************************************/
  39:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** 
  40:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //*****************************************************************************
  41:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //
  42:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \addtogroup timer_api
  43:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! @{
  44:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //
  45:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //*****************************************************************************
  46:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** 
  47:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** #include <headers/hw_gptimer.h>
  48:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** #include <headers/hw_ints.h>
  49:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** #include <headers/hw_memmap.h>
  50:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** #include "debug.h"
  51:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** #include "interrupt.h"
  52:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** #include "gptimer.h"
  53:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** 
  54:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //*****************************************************************************
  55:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //
  56:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \internal
  57:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! Checks a timer base address
  58:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
  59:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \param ui32Base is the base address of the timer module.
  60:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
  61:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! This function determines if a timer module base address is valid.
  62:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
  63:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \return Returns \b true if the base address is valid and \b false
  64:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! otherwise.
  65:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //
  66:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //*****************************************************************************
  67:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** #ifdef ENABLE_ASSERT
  68:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** static bool
  69:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** TimerBaseValid(uint32_t ui32Base)
  70:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** {
  71:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     return((ui32Base == GPTIMER0_BASE) || (ui32Base == GPTIMER1_BASE) ||
  72:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****            (ui32Base == GPTIMER2_BASE) || (ui32Base == GPTIMER3_BASE));
  73:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** }
  74:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** #endif
  75:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** 
  76:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //*****************************************************************************
  77:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //
  78:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! Enables the timer(s)
  79:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
  80:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \param ui32Base is the base address of the timer module.
  81:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \param ui32Timer specifies the timer(s) to enable; must be one of \b GPTIMER_A,
  82:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \b GPTIMER_B, or \b GPTIMER_BOTH.
  83:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
  84:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! This function enables operation of the timer module.  The timer must be
  85:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! configured before it is enabled.
  86:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
  87:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \return None
  88:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //
  89:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //*****************************************************************************
  90:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** void
  91:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** TimerEnable(uint32_t ui32Base, uint32_t ui32Timer)
  92:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** {
  27              		.loc 1 92 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 8
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32 0000 80B4     		push	{r7}
  33              		.cfi_def_cfa_offset 4
  34              		.cfi_offset 7, -4
  35 0002 83B0     		sub	sp, sp, #12
  36              		.cfi_def_cfa_offset 16
  37 0004 00AF     		add	r7, sp, #0
  38              		.cfi_def_cfa_register 7
  39 0006 7860     		str	r0, [r7, #4]
  40 0008 3960     		str	r1, [r7]
  93:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
  94:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     // Check the arguments.
  95:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
  96:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     ASSERT(TimerBaseValid(ui32Base));
  97:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     ASSERT((ui32Timer == GPTIMER_A) || (ui32Timer == GPTIMER_B) ||
  98:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****            (ui32Timer == GPTIMER_BOTH));
  99:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** 
 100:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 101:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     // Enable the timer(s) module.
 102:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 103:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     HWREG(ui32Base + GPTIMER_O_CTL) |= ui32Timer & (GPTIMER_CTL_TAEN | GPTIMER_CTL_TBEN);
  41              		.loc 1 103 0
  42 000a 7B68     		ldr	r3, [r7, #4]
  43 000c 0C33     		adds	r3, r3, #12
  44 000e 1846     		mov	r0, r3
  45 0010 7B68     		ldr	r3, [r7, #4]
  46 0012 0C33     		adds	r3, r3, #12
  47 0014 1A68     		ldr	r2, [r3]
  48 0016 3968     		ldr	r1, [r7]
  49 0018 40F20113 		movw	r3, #257
  50 001c 0B40     		ands	r3, r3, r1
  51 001e 1343     		orrs	r3, r3, r2
  52 0020 0360     		str	r3, [r0]
 104:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** }
  53              		.loc 1 104 0
  54 0022 00BF     		nop
  55 0024 0C37     		adds	r7, r7, #12
  56              		.cfi_def_cfa_offset 4
  57 0026 BD46     		mov	sp, r7
  58              		.cfi_def_cfa_register 13
  59              		@ sp needed
  60 0028 80BC     		pop	{r7}
  61              		.cfi_restore 7
  62              		.cfi_def_cfa_offset 0
  63 002a 7047     		bx	lr
  64              		.cfi_endproc
  65              	.LFE0:
  67              		.align	2
  68              		.global	TimerDisable
  69              		.thumb
  70              		.thumb_func
  72              	TimerDisable:
  73              	.LFB1:
 105:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** 
 106:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //*****************************************************************************
 107:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //
 108:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! Disables the timer(s)
 109:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
 110:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \param ui32Base is the base address of the timer module.
 111:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \param ui32Timer specifies the timer(s) to disable; must be one of
 112:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \b GPTIMER_A, \b GPTIMER_B, or \b GPTIMER_BOTH.
 113:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
 114:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! This function disables operation of the timer module.
 115:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
 116:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \return None
 117:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //
 118:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //*****************************************************************************
 119:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** void
 120:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** TimerDisable(uint32_t ui32Base, uint32_t ui32Timer)
 121:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** {
  74              		.loc 1 121 0
  75              		.cfi_startproc
  76              		@ args = 0, pretend = 0, frame = 8
  77              		@ frame_needed = 1, uses_anonymous_args = 0
  78              		@ link register save eliminated.
  79 002c 80B4     		push	{r7}
  80              		.cfi_def_cfa_offset 4
  81              		.cfi_offset 7, -4
  82 002e 83B0     		sub	sp, sp, #12
  83              		.cfi_def_cfa_offset 16
  84 0030 00AF     		add	r7, sp, #0
  85              		.cfi_def_cfa_register 7
  86 0032 7860     		str	r0, [r7, #4]
  87 0034 3960     		str	r1, [r7]
 122:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 123:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     // Check the arguments.
 124:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 125:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     ASSERT(TimerBaseValid(ui32Base));
 126:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     ASSERT((ui32Timer == GPTIMER_A) || (ui32Timer == GPTIMER_B) ||
 127:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****            (ui32Timer == GPTIMER_BOTH));
 128:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** 
 129:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 130:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     // Disable the timer module.
 131:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 132:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     HWREG(ui32Base + GPTIMER_O_CTL) &= ~(ui32Timer &
  88              		.loc 1 132 0
  89 0036 7B68     		ldr	r3, [r7, #4]
  90 0038 0C33     		adds	r3, r3, #12
  91 003a 1846     		mov	r0, r3
  92 003c 7B68     		ldr	r3, [r7, #4]
  93 003e 0C33     		adds	r3, r3, #12
  94 0040 1A68     		ldr	r2, [r3]
  95 0042 3968     		ldr	r1, [r7]
  96 0044 40F20113 		movw	r3, #257
  97 0048 0B40     		ands	r3, r3, r1
  98 004a DB43     		mvns	r3, r3
  99 004c 1340     		ands	r3, r3, r2
 100 004e 0360     		str	r3, [r0]
 133:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****                                          (GPTIMER_CTL_TAEN | GPTIMER_CTL_TBEN));
 134:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** }
 101              		.loc 1 134 0
 102 0050 00BF     		nop
 103 0052 0C37     		adds	r7, r7, #12
 104              		.cfi_def_cfa_offset 4
 105 0054 BD46     		mov	sp, r7
 106              		.cfi_def_cfa_register 13
 107              		@ sp needed
 108 0056 80BC     		pop	{r7}
 109              		.cfi_restore 7
 110              		.cfi_def_cfa_offset 0
 111 0058 7047     		bx	lr
 112              		.cfi_endproc
 113              	.LFE1:
 115 005a 00BF     		.align	2
 116              		.global	TimerConfigure
 117              		.thumb
 118              		.thumb_func
 120              	TimerConfigure:
 121              	.LFB2:
 135:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** 
 136:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** 
 137:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //*****************************************************************************
 138:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //
 139:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! Configures the timer(s)
 140:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
 141:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \param ui32Base is the base address of the timer module.
 142:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \param ui32Config is the configuration for the timer.
 143:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
 144:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! This function configures the operating mode of the timer(s).  The timer
 145:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! module is disabled before being configured, and is left in the disabled
 146:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! state.
 147:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! The 16/32-bit timer is comprised of two 16-bit timers that can
 148:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! operate independently or be concatenated to form a 32-bit timer.
 149:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
 150:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! The configuration is specified in \e ui32Config as one of the following
 151:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! values:
 152:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
 153:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! - \b GPTIMER_CFG_ONE_SHOT - Full-width one-shot timer
 154:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! - \b GPTIMER_CFG_ONE_SHOT_UP - Full-width one-shot timer that counts up
 155:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!   instead of down (not available on all parts)
 156:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! - \b GPTIMER_CFG_PERIODIC - Full-width periodic timer
 157:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! - \b GPTIMER_CFG_PERIODIC_UP - Full-width periodic timer that counts up
 158:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!   instead of down (not available on all parts)
 159:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! - \b GPTIMER_CFG_SPLIT_PAIR - Two half-width timers
 160:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
 161:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! When configured for a pair of half-width timers, each timer is separately
 162:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! configured.  The first timer is configured by setting \e ui32Config to
 163:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! the result of a logical OR operation between one of the following values
 164:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! and \e ui32Config:
 165:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
 166:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! - \b GPTIMER_CFG_A_ONE_SHOT - Half-width one-shot timer
 167:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! - \b GPTIMER_CFG_A_ONE_SHOT_UP - Half-width one-shot timer that counts up
 168:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!   instead of down (not available on all parts)
 169:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! - \b GPTIMER_CFG_A_PERIODIC - Half-width periodic timer
 170:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! - \b GPTIMER_CFG_A_PERIODIC_UP - Half-width periodic timer that counts up
 171:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!   instead of down (not available on all parts)
 172:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! - \b GPTIMER_CFG_A_CAP_COUNT - Half-width edge count capture
 173:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! - \b GPTIMER_CFG_A_CAP_COUNT_UP - Half-width edge count capture that counts
 174:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!   up instead of down (not available on all parts)
 175:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! - \b GPTIMER_CFG_A_CAP_TIME - Half-width edge time capture
 176:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! - \b GPTIMER_CFG_A_CAP_TIME_UP - Half-width edge time capture that
 177:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!   counts up instead of down (not available on all parts)
 178:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! - \b GPTIMER_CFG_A_PWM - Half-width PWM output
 179:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
 180:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! Similarly, the second timer is configured by setting \e ui32Config to
 181:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! the result of a logical OR operation between one of the corresponding
 182:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \b GPTIMER_CFG_B_* values and \e ui32Config.
 183:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
 184:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \return None
 185:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //
 186:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //*****************************************************************************
 187:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** void
 188:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** TimerConfigure(uint32_t ui32Base, uint32_t ui32Config)
 189:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** {
 122              		.loc 1 189 0
 123              		.cfi_startproc
 124              		@ args = 0, pretend = 0, frame = 8
 125              		@ frame_needed = 1, uses_anonymous_args = 0
 126              		@ link register save eliminated.
 127 005c 80B4     		push	{r7}
 128              		.cfi_def_cfa_offset 4
 129              		.cfi_offset 7, -4
 130 005e 83B0     		sub	sp, sp, #12
 131              		.cfi_def_cfa_offset 16
 132 0060 00AF     		add	r7, sp, #0
 133              		.cfi_def_cfa_register 7
 134 0062 7860     		str	r0, [r7, #4]
 135 0064 3960     		str	r1, [r7]
 190:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 191:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     // Check the arguments.
 192:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 193:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     ASSERT(TimerBaseValid(ui32Base));
 194:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     ASSERT((ui32Config == GPTIMER_CFG_ONE_SHOT) ||
 195:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****            (ui32Config == GPTIMER_CFG_ONE_SHOT_UP) ||
 196:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****            (ui32Config == GPTIMER_CFG_PERIODIC) ||
 197:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****            (ui32Config == GPTIMER_CFG_PERIODIC_UP) ||
 198:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****            ((ui32Config & 0xff000000) == GPTIMER_CFG_SPLIT_PAIR));
 199:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     ASSERT(((ui32Config & 0xff000000) != GPTIMER_CFG_SPLIT_PAIR) ||
 200:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****            ((((ui32Config & 0x000000ff) == GPTIMER_CFG_A_ONE_SHOT) ||
 201:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****              ((ui32Config & 0x000000ff) == GPTIMER_CFG_A_ONE_SHOT_UP) ||
 202:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****              ((ui32Config & 0x000000ff) == GPTIMER_CFG_A_PERIODIC) ||
 203:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****              ((ui32Config & 0x000000ff) == GPTIMER_CFG_A_PERIODIC_UP) ||
 204:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****              ((ui32Config & 0x000000ff) == GPTIMER_CFG_A_CAP_COUNT) ||
 205:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****              ((ui32Config & 0x000000ff) == GPTIMER_CFG_A_CAP_TIME) ||
 206:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****              ((ui32Config & 0x000000ff) == GPTIMER_CFG_A_PWM)) &&
 207:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****             (((ui32Config & 0x0000ff00) == GPTIMER_CFG_B_ONE_SHOT) ||
 208:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****              ((ui32Config & 0x0000ff00) == GPTIMER_CFG_B_ONE_SHOT_UP) ||
 209:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****              ((ui32Config & 0x0000ff00) == GPTIMER_CFG_B_PERIODIC) ||
 210:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****              ((ui32Config & 0x0000ff00) == GPTIMER_CFG_B_PERIODIC_UP) ||
 211:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****              ((ui32Config & 0x0000ff00) == GPTIMER_CFG_B_CAP_COUNT) ||
 212:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****              ((ui32Config & 0x0000ff00) == GPTIMER_CFG_B_CAP_COUNT_UP) ||
 213:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****              ((ui32Config & 0x0000ff00) == GPTIMER_CFG_B_CAP_TIME) ||
 214:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****              ((ui32Config & 0x0000ff00) == GPTIMER_CFG_B_CAP_TIME_UP) ||
 215:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****              ((ui32Config & 0x0000ff00) == GPTIMER_CFG_B_PWM))));
 216:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** 
 217:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 218:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     // Disable the timers.
 219:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 220:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     HWREG(ui32Base + GPTIMER_O_CTL) &= ~(GPTIMER_CTL_TAEN | GPTIMER_CTL_TBEN);
 136              		.loc 1 220 0
 137 0066 7B68     		ldr	r3, [r7, #4]
 138 0068 0C33     		adds	r3, r3, #12
 139 006a 1A46     		mov	r2, r3
 140 006c 7B68     		ldr	r3, [r7, #4]
 141 006e 0C33     		adds	r3, r3, #12
 142 0070 1B68     		ldr	r3, [r3]
 143 0072 23F48073 		bic	r3, r3, #256
 144 0076 23F00103 		bic	r3, r3, #1
 145 007a 1360     		str	r3, [r2]
 221:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** 
 222:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 223:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     // Set the global timer configuration.
 224:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 225:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     HWREG(ui32Base + GPTIMER_O_CFG) = ui32Config >> 24;
 146              		.loc 1 225 0
 147 007c 7B68     		ldr	r3, [r7, #4]
 148 007e 3A68     		ldr	r2, [r7]
 149 0080 120E     		lsrs	r2, r2, #24
 150 0082 1A60     		str	r2, [r3]
 226:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** 
 227:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 228:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     // Set the configuration of the A and B timers.  Note that the B timer
 229:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     // configuration is ignored by the hardware in 32-bit modes.
 230:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 231:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     HWREG(ui32Base + GPTIMER_O_TAMR) = (ui32Config & 255) | GPTIMER_TAMR_TAPWMIE;
 151              		.loc 1 231 0
 152 0084 7B68     		ldr	r3, [r7, #4]
 153 0086 0433     		adds	r3, r3, #4
 154 0088 1A46     		mov	r2, r3
 155 008a 3B68     		ldr	r3, [r7]
 156 008c DBB2     		uxtb	r3, r3
 157 008e 43F40073 		orr	r3, r3, #512
 158 0092 1360     		str	r3, [r2]
 232:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     HWREG(ui32Base + GPTIMER_O_TBMR) =
 159              		.loc 1 232 0
 160 0094 7B68     		ldr	r3, [r7, #4]
 161 0096 0833     		adds	r3, r3, #8
 162 0098 1A46     		mov	r2, r3
 233:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****         ((ui32Config >> 8) & 255) | GPTIMER_TBMR_TBPWMIE;
 163              		.loc 1 233 0
 164 009a 3B68     		ldr	r3, [r7]
 165 009c 1B0A     		lsrs	r3, r3, #8
 166 009e DBB2     		uxtb	r3, r3
 167 00a0 43F40073 		orr	r3, r3, #512
 232:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     HWREG(ui32Base + GPTIMER_O_TBMR) =
 168              		.loc 1 232 0
 169 00a4 1360     		str	r3, [r2]
 234:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** }
 170              		.loc 1 234 0
 171 00a6 00BF     		nop
 172 00a8 0C37     		adds	r7, r7, #12
 173              		.cfi_def_cfa_offset 4
 174 00aa BD46     		mov	sp, r7
 175              		.cfi_def_cfa_register 13
 176              		@ sp needed
 177 00ac 80BC     		pop	{r7}
 178              		.cfi_restore 7
 179              		.cfi_def_cfa_offset 0
 180 00ae 7047     		bx	lr
 181              		.cfi_endproc
 182              	.LFE2:
 184              		.align	2
 185              		.global	TimerControlLevel
 186              		.thumb
 187              		.thumb_func
 189              	TimerControlLevel:
 190              	.LFB3:
 235:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** 
 236:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //*****************************************************************************
 237:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //
 238:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! Controls the output level
 239:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
 240:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \param ui32Base is the base address of the timer module.
 241:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \param ui32Timer specifies the timer(s) to adjust; must be one of \b GPTIMER_A,
 242:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \b GPTIMER_B, or \b GPTIMER_BOTH.
 243:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \param bInvert specifies the output level.
 244:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
 245:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! This function sets the PWM output level for the specified timer.  If the
 246:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \e bInvert parameter is \b true, then the timer's output is made active
 247:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! low; otherwise, it is made active high.
 248:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
 249:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \return None
 250:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //
 251:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //*****************************************************************************
 252:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** void
 253:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** TimerControlLevel(uint32_t ui32Base, uint32_t ui32Timer,
 254:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****                   bool bInvert)
 255:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** {
 191              		.loc 1 255 0
 192              		.cfi_startproc
 193              		@ args = 0, pretend = 0, frame = 16
 194              		@ frame_needed = 1, uses_anonymous_args = 0
 195              		@ link register save eliminated.
 196 00b0 80B4     		push	{r7}
 197              		.cfi_def_cfa_offset 4
 198              		.cfi_offset 7, -4
 199 00b2 85B0     		sub	sp, sp, #20
 200              		.cfi_def_cfa_offset 24
 201 00b4 00AF     		add	r7, sp, #0
 202              		.cfi_def_cfa_register 7
 203 00b6 F860     		str	r0, [r7, #12]
 204 00b8 B960     		str	r1, [r7, #8]
 205 00ba 1346     		mov	r3, r2
 206 00bc FB71     		strb	r3, [r7, #7]
 256:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 257:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     // Check the arguments.
 258:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 259:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     ASSERT(TimerBaseValid(ui32Base));
 260:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     ASSERT((ui32Timer == GPTIMER_A) || (ui32Timer == GPTIMER_B) ||
 261:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****            (ui32Timer == GPTIMER_BOTH));
 262:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** 
 263:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 264:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     // Set the output levels as requested.
 265:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 266:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     ui32Timer &= GPTIMER_CTL_TAPWML | GPTIMER_CTL_TBPWML;
 207              		.loc 1 266 0
 208 00be BA68     		ldr	r2, [r7, #8]
 209 00c0 44F24003 		movw	r3, #16448
 210 00c4 1340     		ands	r3, r3, r2
 211 00c6 BB60     		str	r3, [r7, #8]
 267:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     HWREG(ui32Base + GPTIMER_O_CTL) = (bInvert ?
 212              		.loc 1 267 0
 213 00c8 FB68     		ldr	r3, [r7, #12]
 214 00ca 0C33     		adds	r3, r3, #12
 215 00cc 1946     		mov	r1, r3
 268:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****                                        (HWREG(ui32Base + GPTIMER_O_CTL) | ui32Timer) :
 216              		.loc 1 268 0
 217 00ce FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 218 00d0 002B     		cmp	r3, #0
 219 00d2 05D0     		beq	.L5
 220              		.loc 1 268 0 is_stmt 0 discriminator 1
 221 00d4 FB68     		ldr	r3, [r7, #12]
 222 00d6 0C33     		adds	r3, r3, #12
 223 00d8 1A68     		ldr	r2, [r3]
 224 00da BB68     		ldr	r3, [r7, #8]
 225 00dc 1343     		orrs	r3, r3, r2
 226 00de 05E0     		b	.L6
 227              	.L5:
 269:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****                                        (HWREG(ui32Base + GPTIMER_O_CTL) & ~(ui32Timer)));
 228              		.loc 1 269 0 is_stmt 1 discriminator 2
 229 00e0 FB68     		ldr	r3, [r7, #12]
 230 00e2 0C33     		adds	r3, r3, #12
 231 00e4 1A68     		ldr	r2, [r3]
 232 00e6 BB68     		ldr	r3, [r7, #8]
 233 00e8 DB43     		mvns	r3, r3
 268:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****                                        (HWREG(ui32Base + GPTIMER_O_CTL) | ui32Timer) :
 234              		.loc 1 268 0 discriminator 2
 235 00ea 1340     		ands	r3, r3, r2
 236              	.L6:
 267:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     HWREG(ui32Base + GPTIMER_O_CTL) = (bInvert ?
 237              		.loc 1 267 0
 238 00ec 0B60     		str	r3, [r1]
 270:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** }
 239              		.loc 1 270 0
 240 00ee 00BF     		nop
 241 00f0 1437     		adds	r7, r7, #20
 242              		.cfi_def_cfa_offset 4
 243 00f2 BD46     		mov	sp, r7
 244              		.cfi_def_cfa_register 13
 245              		@ sp needed
 246 00f4 80BC     		pop	{r7}
 247              		.cfi_restore 7
 248              		.cfi_def_cfa_offset 0
 249 00f6 7047     		bx	lr
 250              		.cfi_endproc
 251              	.LFE3:
 253              		.align	2
 254              		.global	TimerControlTrigger
 255              		.thumb
 256              		.thumb_func
 258              	TimerControlTrigger:
 259              	.LFB4:
 271:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** 
 272:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //*****************************************************************************
 273:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //
 274:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! Enables or disables the trigger output
 275:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
 276:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \param ui32Base is the base address of the timer module.
 277:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \param ui32Timer specifies the timer to adjust; must be one of \b GPTIMER_A,
 278:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \b GPTIMER_B, or \b GPTIMER_BOTH.
 279:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \param bEnable specifies the desired trigger state.
 280:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
 281:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! This function controls the trigger output for the specified timer.  If the
 282:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \e bEnable parameter is \b true, then the timer's output trigger is
 283:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! enabled; otherwise it is disabled.
 284:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
 285:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \return None
 286:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //
 287:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //*****************************************************************************
 288:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** void
 289:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** TimerControlTrigger(uint32_t ui32Base, uint32_t ui32Timer,
 290:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****                     bool bEnable)
 291:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** {
 260              		.loc 1 291 0
 261              		.cfi_startproc
 262              		@ args = 0, pretend = 0, frame = 16
 263              		@ frame_needed = 1, uses_anonymous_args = 0
 264              		@ link register save eliminated.
 265 00f8 80B4     		push	{r7}
 266              		.cfi_def_cfa_offset 4
 267              		.cfi_offset 7, -4
 268 00fa 85B0     		sub	sp, sp, #20
 269              		.cfi_def_cfa_offset 24
 270 00fc 00AF     		add	r7, sp, #0
 271              		.cfi_def_cfa_register 7
 272 00fe F860     		str	r0, [r7, #12]
 273 0100 B960     		str	r1, [r7, #8]
 274 0102 1346     		mov	r3, r2
 275 0104 FB71     		strb	r3, [r7, #7]
 292:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 293:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     // Check the arguments.
 294:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 295:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     ASSERT(TimerBaseValid(ui32Base));
 296:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     ASSERT((ui32Timer == GPTIMER_A) || (ui32Timer == GPTIMER_B) ||
 297:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****            (ui32Timer == GPTIMER_BOTH));
 298:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** 
 299:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 300:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     // Set the trigger output as requested.
 301:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 302:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     ui32Timer &= GPTIMER_CTL_TAOTE | GPTIMER_CTL_TBOTE;
 276              		.loc 1 302 0
 277 0106 BA68     		ldr	r2, [r7, #8]
 278 0108 42F22003 		movw	r3, #8224
 279 010c 1340     		ands	r3, r3, r2
 280 010e BB60     		str	r3, [r7, #8]
 303:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     HWREG(ui32Base + GPTIMER_O_CTL) = (bEnable ?
 281              		.loc 1 303 0
 282 0110 FB68     		ldr	r3, [r7, #12]
 283 0112 0C33     		adds	r3, r3, #12
 284 0114 1946     		mov	r1, r3
 304:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****                                        (HWREG(ui32Base + GPTIMER_O_CTL) | ui32Timer) :
 285              		.loc 1 304 0
 286 0116 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 287 0118 002B     		cmp	r3, #0
 288 011a 05D0     		beq	.L8
 289              		.loc 1 304 0 is_stmt 0 discriminator 1
 290 011c FB68     		ldr	r3, [r7, #12]
 291 011e 0C33     		adds	r3, r3, #12
 292 0120 1A68     		ldr	r2, [r3]
 293 0122 BB68     		ldr	r3, [r7, #8]
 294 0124 1343     		orrs	r3, r3, r2
 295 0126 05E0     		b	.L9
 296              	.L8:
 305:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****                                        (HWREG(ui32Base + GPTIMER_O_CTL) & ~(ui32Timer)));
 297              		.loc 1 305 0 is_stmt 1 discriminator 2
 298 0128 FB68     		ldr	r3, [r7, #12]
 299 012a 0C33     		adds	r3, r3, #12
 300 012c 1A68     		ldr	r2, [r3]
 301 012e BB68     		ldr	r3, [r7, #8]
 302 0130 DB43     		mvns	r3, r3
 304:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****                                        (HWREG(ui32Base + GPTIMER_O_CTL) | ui32Timer) :
 303              		.loc 1 304 0 discriminator 2
 304 0132 1340     		ands	r3, r3, r2
 305              	.L9:
 303:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     HWREG(ui32Base + GPTIMER_O_CTL) = (bEnable ?
 306              		.loc 1 303 0
 307 0134 0B60     		str	r3, [r1]
 306:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** }
 308              		.loc 1 306 0
 309 0136 00BF     		nop
 310 0138 1437     		adds	r7, r7, #20
 311              		.cfi_def_cfa_offset 4
 312 013a BD46     		mov	sp, r7
 313              		.cfi_def_cfa_register 13
 314              		@ sp needed
 315 013c 80BC     		pop	{r7}
 316              		.cfi_restore 7
 317              		.cfi_def_cfa_offset 0
 318 013e 7047     		bx	lr
 319              		.cfi_endproc
 320              	.LFE4:
 322              		.align	2
 323              		.global	TimerControlEvent
 324              		.thumb
 325              		.thumb_func
 327              	TimerControlEvent:
 328              	.LFB5:
 307:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** 
 308:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //*****************************************************************************
 309:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //
 310:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! Controls the event type
 311:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
 312:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \param ui32Base is the base address of the timer module.
 313:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \param ui32Timer specifies the timer(s) to be adjusted; must be one of
 314:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \b GPTIMER_A, \b GPTIMER_B, or \b GPTIMER_BOTH.
 315:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \param ui32Event specifies the type of event; must be one of
 316:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \b GPTIMER_EVENT_POS_EDGE, \b GPTIMER_EVENT_NEG_EDGE, or
 317:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \b GPTIMER_EVENT_BOTH_EDGES.
 318:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
 319:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! This function sets the signal edge(s) that triggers the timer when in
 320:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! capture mode.
 321:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
 322:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \return None
 323:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //
 324:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //*****************************************************************************
 325:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** void
 326:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** TimerControlEvent(uint32_t ui32Base, uint32_t ui32Timer,
 327:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****                   uint32_t ui32Event)
 328:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** {
 329              		.loc 1 328 0
 330              		.cfi_startproc
 331              		@ args = 0, pretend = 0, frame = 16
 332              		@ frame_needed = 1, uses_anonymous_args = 0
 333              		@ link register save eliminated.
 334 0140 80B4     		push	{r7}
 335              		.cfi_def_cfa_offset 4
 336              		.cfi_offset 7, -4
 337 0142 85B0     		sub	sp, sp, #20
 338              		.cfi_def_cfa_offset 24
 339 0144 00AF     		add	r7, sp, #0
 340              		.cfi_def_cfa_register 7
 341 0146 F860     		str	r0, [r7, #12]
 342 0148 B960     		str	r1, [r7, #8]
 343 014a 7A60     		str	r2, [r7, #4]
 329:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 330:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     // Check the arguments.
 331:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 332:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     ASSERT(TimerBaseValid(ui32Base));
 333:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     ASSERT((ui32Timer == GPTIMER_A) || (ui32Timer == GPTIMER_B) ||
 334:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****            (ui32Timer == GPTIMER_BOTH));
 335:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** 
 336:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 337:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     // Set the event type.
 338:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 339:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     ui32Timer &= GPTIMER_CTL_TAEVENT_M | GPTIMER_CTL_TBEVENT_M;
 344              		.loc 1 339 0
 345 014c BA68     		ldr	r2, [r7, #8]
 346 014e 40F60C43 		movw	r3, #3084
 347 0152 1340     		ands	r3, r3, r2
 348 0154 BB60     		str	r3, [r7, #8]
 340:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     HWREG(ui32Base + GPTIMER_O_CTL) = ((HWREG(ui32Base + GPTIMER_O_CTL) & ~ui32Timer) |
 349              		.loc 1 340 0
 350 0156 FB68     		ldr	r3, [r7, #12]
 351 0158 0C33     		adds	r3, r3, #12
 352 015a 1846     		mov	r0, r3
 353 015c FB68     		ldr	r3, [r7, #12]
 354 015e 0C33     		adds	r3, r3, #12
 355 0160 1A68     		ldr	r2, [r3]
 356 0162 BB68     		ldr	r3, [r7, #8]
 357 0164 DB43     		mvns	r3, r3
 358 0166 1A40     		ands	r2, r2, r3
 341:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****                                        (ui32Event & ui32Timer));
 359              		.loc 1 341 0
 360 0168 7968     		ldr	r1, [r7, #4]
 361 016a BB68     		ldr	r3, [r7, #8]
 362 016c 0B40     		ands	r3, r3, r1
 340:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     HWREG(ui32Base + GPTIMER_O_CTL) = ((HWREG(ui32Base + GPTIMER_O_CTL) & ~ui32Timer) |
 363              		.loc 1 340 0
 364 016e 1343     		orrs	r3, r3, r2
 365 0170 0360     		str	r3, [r0]
 342:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** }
 366              		.loc 1 342 0
 367 0172 00BF     		nop
 368 0174 1437     		adds	r7, r7, #20
 369              		.cfi_def_cfa_offset 4
 370 0176 BD46     		mov	sp, r7
 371              		.cfi_def_cfa_register 13
 372              		@ sp needed
 373 0178 80BC     		pop	{r7}
 374              		.cfi_restore 7
 375              		.cfi_def_cfa_offset 0
 376 017a 7047     		bx	lr
 377              		.cfi_endproc
 378              	.LFE5:
 380              		.align	2
 381              		.global	TimerControlStall
 382              		.thumb
 383              		.thumb_func
 385              	TimerControlStall:
 386              	.LFB6:
 343:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** 
 344:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //*****************************************************************************
 345:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //
 346:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! Controls the stall handling
 347:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
 348:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \param ui32Base is the base address of the timer module.
 349:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \param ui32Timer specifies the timer(s) to be adjusted; must be one of
 350:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \b GPTIMER_A, \b GPTIMER_B, or \b GPTIMER_BOTH.
 351:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \param bStall specifies the response to a stall signal.
 352:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
 353:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! This function controls the stall response for the specified timer.  If the
 354:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \e bStall parameter is \b true, then the timer stops counting if the
 355:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! processor enters debug mode; otherwise the timer keeps running while in
 356:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! debug mode.
 357:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
 358:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \return None
 359:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //
 360:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //*****************************************************************************
 361:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** void
 362:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** TimerControlStall(uint32_t ui32Base, uint32_t ui32Timer,
 363:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****                   bool bStall)
 364:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** {
 387              		.loc 1 364 0
 388              		.cfi_startproc
 389              		@ args = 0, pretend = 0, frame = 16
 390              		@ frame_needed = 1, uses_anonymous_args = 0
 391              		@ link register save eliminated.
 392 017c 80B4     		push	{r7}
 393              		.cfi_def_cfa_offset 4
 394              		.cfi_offset 7, -4
 395 017e 85B0     		sub	sp, sp, #20
 396              		.cfi_def_cfa_offset 24
 397 0180 00AF     		add	r7, sp, #0
 398              		.cfi_def_cfa_register 7
 399 0182 F860     		str	r0, [r7, #12]
 400 0184 B960     		str	r1, [r7, #8]
 401 0186 1346     		mov	r3, r2
 402 0188 FB71     		strb	r3, [r7, #7]
 365:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 366:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     // Check the arguments.
 367:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 368:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     ASSERT(TimerBaseValid(ui32Base));
 369:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     ASSERT((ui32Timer == GPTIMER_A) || (ui32Timer == GPTIMER_B) ||
 370:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****            (ui32Timer == GPTIMER_BOTH));
 371:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** 
 372:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 373:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     // Set the stall mode.
 374:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 375:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     ui32Timer &= GPTIMER_CTL_TASTALL | GPTIMER_CTL_TBSTALL;
 403              		.loc 1 375 0
 404 018a BA68     		ldr	r2, [r7, #8]
 405 018c 40F20223 		movw	r3, #514
 406 0190 1340     		ands	r3, r3, r2
 407 0192 BB60     		str	r3, [r7, #8]
 376:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     HWREG(ui32Base + GPTIMER_O_CTL) = (bStall ?
 408              		.loc 1 376 0
 409 0194 FB68     		ldr	r3, [r7, #12]
 410 0196 0C33     		adds	r3, r3, #12
 411 0198 1946     		mov	r1, r3
 377:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****                                        (HWREG(ui32Base + GPTIMER_O_CTL) | ui32Timer) :
 412              		.loc 1 377 0
 413 019a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 414 019c 002B     		cmp	r3, #0
 415 019e 05D0     		beq	.L12
 416              		.loc 1 377 0 is_stmt 0 discriminator 1
 417 01a0 FB68     		ldr	r3, [r7, #12]
 418 01a2 0C33     		adds	r3, r3, #12
 419 01a4 1A68     		ldr	r2, [r3]
 420 01a6 BB68     		ldr	r3, [r7, #8]
 421 01a8 1343     		orrs	r3, r3, r2
 422 01aa 05E0     		b	.L13
 423              	.L12:
 378:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****                                        (HWREG(ui32Base + GPTIMER_O_CTL) & ~(ui32Timer)));
 424              		.loc 1 378 0 is_stmt 1 discriminator 2
 425 01ac FB68     		ldr	r3, [r7, #12]
 426 01ae 0C33     		adds	r3, r3, #12
 427 01b0 1A68     		ldr	r2, [r3]
 428 01b2 BB68     		ldr	r3, [r7, #8]
 429 01b4 DB43     		mvns	r3, r3
 377:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****                                        (HWREG(ui32Base + GPTIMER_O_CTL) | ui32Timer) :
 430              		.loc 1 377 0 discriminator 2
 431 01b6 1340     		ands	r3, r3, r2
 432              	.L13:
 376:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     HWREG(ui32Base + GPTIMER_O_CTL) = (bStall ?
 433              		.loc 1 376 0
 434 01b8 0B60     		str	r3, [r1]
 379:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** }
 435              		.loc 1 379 0
 436 01ba 00BF     		nop
 437 01bc 1437     		adds	r7, r7, #20
 438              		.cfi_def_cfa_offset 4
 439 01be BD46     		mov	sp, r7
 440              		.cfi_def_cfa_register 13
 441              		@ sp needed
 442 01c0 80BC     		pop	{r7}
 443              		.cfi_restore 7
 444              		.cfi_def_cfa_offset 0
 445 01c2 7047     		bx	lr
 446              		.cfi_endproc
 447              	.LFE6:
 449              		.align	2
 450              		.global	TimerControlWaitOnTrigger
 451              		.thumb
 452              		.thumb_func
 454              	TimerControlWaitOnTrigger:
 455              	.LFB7:
 380:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** 
 381:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //*****************************************************************************
 382:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //
 383:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! Controls the wait on trigger handling
 384:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
 385:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \param ui32Base is the base address of the timer module.
 386:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \param ui32Timer specifies the timer(s) to be adjusted; must be one of
 387:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \b GPTIMER_A, \b GPTIMER_B, or \b GPTIMER_BOTH.
 388:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \param bWait specifies if the timer should wait for a trigger input.
 389:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
 390:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! This function controls whether or not a timer waits for a trigger input to
 391:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! start counting.  When enabled, the previous timer in the trigger chain must
 392:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! count to its timeout in order for this timer to start counting.  Refer to
 393:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! the part's data sheet for a description of the trigger chain.
 394:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
 395:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \note This functionality is not available on all parts.
 396:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
 397:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \return None
 398:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //
 399:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //*****************************************************************************
 400:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** void
 401:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** TimerControlWaitOnTrigger(uint32_t ui32Base, uint32_t ui32Timer,
 402:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****                           bool bWait)
 403:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** {
 456              		.loc 1 403 0
 457              		.cfi_startproc
 458              		@ args = 0, pretend = 0, frame = 16
 459              		@ frame_needed = 1, uses_anonymous_args = 0
 460              		@ link register save eliminated.
 461 01c4 80B4     		push	{r7}
 462              		.cfi_def_cfa_offset 4
 463              		.cfi_offset 7, -4
 464 01c6 85B0     		sub	sp, sp, #20
 465              		.cfi_def_cfa_offset 24
 466 01c8 00AF     		add	r7, sp, #0
 467              		.cfi_def_cfa_register 7
 468 01ca F860     		str	r0, [r7, #12]
 469 01cc B960     		str	r1, [r7, #8]
 470 01ce 1346     		mov	r3, r2
 471 01d0 FB71     		strb	r3, [r7, #7]
 404:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 405:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     // Check the arguments.
 406:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 407:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     ASSERT(TimerBaseValid(ui32Base));
 408:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     ASSERT((ui32Timer == GPTIMER_A) || (ui32Timer == GPTIMER_B) ||
 409:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****            (ui32Timer == GPTIMER_BOTH));
 410:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** 
 411:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 412:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     // Set the wait on trigger mode for timer A.
 413:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 414:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     if((ui32Timer & GPTIMER_A) != 0)
 472              		.loc 1 414 0
 473 01d2 BB68     		ldr	r3, [r7, #8]
 474 01d4 DBB2     		uxtb	r3, r3
 475 01d6 002B     		cmp	r3, #0
 476 01d8 15D0     		beq	.L15
 415:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     {
 416:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****         if(bWait)
 477              		.loc 1 416 0
 478 01da FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 479 01dc 002B     		cmp	r3, #0
 480 01de 09D0     		beq	.L16
 417:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****         {
 418:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****             HWREG(ui32Base + GPTIMER_O_TAMR) |= GPTIMER_TAMR_TAWOT;
 481              		.loc 1 418 0
 482 01e0 FB68     		ldr	r3, [r7, #12]
 483 01e2 0433     		adds	r3, r3, #4
 484 01e4 1A46     		mov	r2, r3
 485 01e6 FB68     		ldr	r3, [r7, #12]
 486 01e8 0433     		adds	r3, r3, #4
 487 01ea 1B68     		ldr	r3, [r3]
 488 01ec 43F04003 		orr	r3, r3, #64
 489 01f0 1360     		str	r3, [r2]
 490 01f2 08E0     		b	.L15
 491              	.L16:
 419:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****         }
 420:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****         else
 421:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****         {
 422:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****             HWREG(ui32Base + GPTIMER_O_TAMR) &= ~(GPTIMER_TAMR_TAWOT);
 492              		.loc 1 422 0
 493 01f4 FB68     		ldr	r3, [r7, #12]
 494 01f6 0433     		adds	r3, r3, #4
 495 01f8 1A46     		mov	r2, r3
 496 01fa FB68     		ldr	r3, [r7, #12]
 497 01fc 0433     		adds	r3, r3, #4
 498 01fe 1B68     		ldr	r3, [r3]
 499 0200 23F04003 		bic	r3, r3, #64
 500 0204 1360     		str	r3, [r2]
 501              	.L15:
 423:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****         }
 424:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     }
 425:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** 
 426:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 427:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     // Set the wait on trigger mode for timer B.
 428:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 429:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     if((ui32Timer & GPTIMER_B) != 0)
 502              		.loc 1 429 0
 503 0206 BB68     		ldr	r3, [r7, #8]
 504 0208 03F47F43 		and	r3, r3, #65280
 505 020c 002B     		cmp	r3, #0
 506 020e 15D0     		beq	.L19
 430:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     {
 431:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****         if(bWait)
 507              		.loc 1 431 0
 508 0210 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 509 0212 002B     		cmp	r3, #0
 510 0214 09D0     		beq	.L18
 432:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****         {
 433:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****             HWREG(ui32Base + GPTIMER_O_TBMR) |= GPTIMER_TBMR_TBWOT;
 511              		.loc 1 433 0
 512 0216 FB68     		ldr	r3, [r7, #12]
 513 0218 0833     		adds	r3, r3, #8
 514 021a 1A46     		mov	r2, r3
 515 021c FB68     		ldr	r3, [r7, #12]
 516 021e 0833     		adds	r3, r3, #8
 517 0220 1B68     		ldr	r3, [r3]
 518 0222 43F04003 		orr	r3, r3, #64
 519 0226 1360     		str	r3, [r2]
 434:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****         }
 435:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****         else
 436:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****         {
 437:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****             HWREG(ui32Base + GPTIMER_O_TBMR) &= ~(GPTIMER_TBMR_TBWOT);
 438:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****         }
 439:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     }
 440:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** }
 520              		.loc 1 440 0
 521 0228 08E0     		b	.L19
 522              	.L18:
 437:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****         }
 523              		.loc 1 437 0
 524 022a FB68     		ldr	r3, [r7, #12]
 525 022c 0833     		adds	r3, r3, #8
 526 022e 1A46     		mov	r2, r3
 527 0230 FB68     		ldr	r3, [r7, #12]
 528 0232 0833     		adds	r3, r3, #8
 529 0234 1B68     		ldr	r3, [r3]
 530 0236 23F04003 		bic	r3, r3, #64
 531 023a 1360     		str	r3, [r2]
 532              	.L19:
 533              		.loc 1 440 0
 534 023c 00BF     		nop
 535 023e 1437     		adds	r7, r7, #20
 536              		.cfi_def_cfa_offset 4
 537 0240 BD46     		mov	sp, r7
 538              		.cfi_def_cfa_register 13
 539              		@ sp needed
 540 0242 80BC     		pop	{r7}
 541              		.cfi_restore 7
 542              		.cfi_def_cfa_offset 0
 543 0244 7047     		bx	lr
 544              		.cfi_endproc
 545              	.LFE7:
 547 0246 00BF     		.align	2
 548              		.global	TimerPrescaleSet
 549              		.thumb
 550              		.thumb_func
 552              	TimerPrescaleSet:
 553              	.LFB8:
 441:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** 
 442:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //*****************************************************************************
 443:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //
 444:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! Set the timer prescale value
 445:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
 446:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \param ui32Base is the base address of the timer module.
 447:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \param ui32Timer specifies the timer(s) to adjust; must be one of \b GPTIMER_A,
 448:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \b GPTIMER_B, or \b GPTIMER_BOTH.
 449:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \param ui32Value is the timer prescale value; must be between 0 and 255,
 450:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! inclusive.
 451:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
 452:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! This function sets the value of the input clock prescaler.  The prescaler
 453:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! is only operational when in 16-bit mode and is used to extend the range of
 454:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! the 16-bit timer modes.
 455:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
 456:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \note The availability of the prescaler varies with the timer mode in use.
 457:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! Please consult the datasheet for the part you are using
 458:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! to determine whether this support is available.
 459:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
 460:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \return None
 461:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //
 462:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //*****************************************************************************
 463:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** void
 464:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** TimerPrescaleSet(uint32_t ui32Base, uint32_t ui32Timer,
 465:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****                  uint32_t ui32Value)
 466:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** {
 554              		.loc 1 466 0
 555              		.cfi_startproc
 556              		@ args = 0, pretend = 0, frame = 16
 557              		@ frame_needed = 1, uses_anonymous_args = 0
 558              		@ link register save eliminated.
 559 0248 80B4     		push	{r7}
 560              		.cfi_def_cfa_offset 4
 561              		.cfi_offset 7, -4
 562 024a 85B0     		sub	sp, sp, #20
 563              		.cfi_def_cfa_offset 24
 564 024c 00AF     		add	r7, sp, #0
 565              		.cfi_def_cfa_register 7
 566 024e F860     		str	r0, [r7, #12]
 567 0250 B960     		str	r1, [r7, #8]
 568 0252 7A60     		str	r2, [r7, #4]
 467:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 468:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     // Check the arguments.
 469:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 470:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     ASSERT(TimerBaseValid(ui32Base));
 471:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     ASSERT((ui32Timer == GPTIMER_A) || (ui32Timer == GPTIMER_B) ||
 472:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****            (ui32Timer == GPTIMER_BOTH));
 473:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     ASSERT(ui32Value < 256);
 474:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** 
 475:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 476:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     // Set the timer A prescaler if requested.
 477:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 478:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     if(ui32Timer & GPTIMER_A)
 569              		.loc 1 478 0
 570 0254 BB68     		ldr	r3, [r7, #8]
 571 0256 DBB2     		uxtb	r3, r3
 572 0258 002B     		cmp	r3, #0
 573 025a 04D0     		beq	.L21
 479:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     {
 480:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****         HWREG(ui32Base + GPTIMER_O_TAPR) = ui32Value;
 574              		.loc 1 480 0
 575 025c FB68     		ldr	r3, [r7, #12]
 576 025e 3833     		adds	r3, r3, #56
 577 0260 1A46     		mov	r2, r3
 578 0262 7B68     		ldr	r3, [r7, #4]
 579 0264 1360     		str	r3, [r2]
 580              	.L21:
 481:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     }
 482:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** 
 483:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 484:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     // Set the timer B prescaler if requested.
 485:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 486:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     if(ui32Timer & GPTIMER_B)
 581              		.loc 1 486 0
 582 0266 BB68     		ldr	r3, [r7, #8]
 583 0268 03F47F43 		and	r3, r3, #65280
 584 026c 002B     		cmp	r3, #0
 585 026e 04D0     		beq	.L23
 487:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     {
 488:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****         HWREG(ui32Base + GPTIMER_O_TBPR) = ui32Value;
 586              		.loc 1 488 0
 587 0270 FB68     		ldr	r3, [r7, #12]
 588 0272 3C33     		adds	r3, r3, #60
 589 0274 1A46     		mov	r2, r3
 590 0276 7B68     		ldr	r3, [r7, #4]
 591 0278 1360     		str	r3, [r2]
 592              	.L23:
 489:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     }
 490:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** }
 593              		.loc 1 490 0
 594 027a 00BF     		nop
 595 027c 1437     		adds	r7, r7, #20
 596              		.cfi_def_cfa_offset 4
 597 027e BD46     		mov	sp, r7
 598              		.cfi_def_cfa_register 13
 599              		@ sp needed
 600 0280 80BC     		pop	{r7}
 601              		.cfi_restore 7
 602              		.cfi_def_cfa_offset 0
 603 0282 7047     		bx	lr
 604              		.cfi_endproc
 605              	.LFE8:
 607              		.align	2
 608              		.global	TimerPrescaleGet
 609              		.thumb
 610              		.thumb_func
 612              	TimerPrescaleGet:
 613              	.LFB9:
 491:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** 
 492:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //*****************************************************************************
 493:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //
 494:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! Get the timer prescale value
 495:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
 496:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \param ui32Base is the base address of the timer module.
 497:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \param ui32Timer specifies the timer; must be one of \b GPTIMER_A or
 498:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \b GPTIMER_B.
 499:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
 500:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! This function gets the value of the input clock prescaler.  The prescaler
 501:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! is only operational when in 16-bit mode and is used to extend the range of
 502:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! the 16-bit timer modes.
 503:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
 504:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \note The availability of the prescaler varies with the timer mode in use.
 505:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! Please consult the datasheet for the part you are using
 506:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! to determine whether this support is available.
 507:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
 508:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \return The value of the timer prescaler
 509:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //
 510:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //*****************************************************************************
 511:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** uint32_t
 512:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** TimerPrescaleGet(uint32_t ui32Base, uint32_t ui32Timer)
 513:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** {
 614              		.loc 1 513 0
 615              		.cfi_startproc
 616              		@ args = 0, pretend = 0, frame = 8
 617              		@ frame_needed = 1, uses_anonymous_args = 0
 618              		@ link register save eliminated.
 619 0284 80B4     		push	{r7}
 620              		.cfi_def_cfa_offset 4
 621              		.cfi_offset 7, -4
 622 0286 83B0     		sub	sp, sp, #12
 623              		.cfi_def_cfa_offset 16
 624 0288 00AF     		add	r7, sp, #0
 625              		.cfi_def_cfa_register 7
 626 028a 7860     		str	r0, [r7, #4]
 627 028c 3960     		str	r1, [r7]
 514:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 515:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     // Check the arguments.
 516:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 517:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     ASSERT(TimerBaseValid(ui32Base));
 518:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     ASSERT((ui32Timer == GPTIMER_A) || (ui32Timer == GPTIMER_B) ||
 519:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****            (ui32Timer == GPTIMER_BOTH));
 520:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** 
 521:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 522:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     // Return the appropriate prescale value.
 523:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 524:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     return((ui32Timer == GPTIMER_A) ? HWREG(ui32Base + GPTIMER_O_TAPR) :
 628              		.loc 1 524 0
 629 028e 3B68     		ldr	r3, [r7]
 630 0290 FF2B     		cmp	r3, #255
 631 0292 03D1     		bne	.L25
 632              		.loc 1 524 0 is_stmt 0 discriminator 1
 633 0294 7B68     		ldr	r3, [r7, #4]
 634 0296 3833     		adds	r3, r3, #56
 635 0298 1B68     		ldr	r3, [r3]
 636 029a 02E0     		b	.L27
 637              	.L25:
 525:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****            HWREG(ui32Base + GPTIMER_O_TBPR));
 638              		.loc 1 525 0 is_stmt 1 discriminator 2
 639 029c 7B68     		ldr	r3, [r7, #4]
 640 029e 3C33     		adds	r3, r3, #60
 524:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****            HWREG(ui32Base + GPTIMER_O_TBPR));
 641              		.loc 1 524 0 discriminator 2
 642 02a0 1B68     		ldr	r3, [r3]
 643              	.L27:
 526:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** }
 644              		.loc 1 526 0 discriminator 5
 645 02a2 1846     		mov	r0, r3
 646 02a4 0C37     		adds	r7, r7, #12
 647              		.cfi_def_cfa_offset 4
 648 02a6 BD46     		mov	sp, r7
 649              		.cfi_def_cfa_register 13
 650              		@ sp needed
 651 02a8 80BC     		pop	{r7}
 652              		.cfi_restore 7
 653              		.cfi_def_cfa_offset 0
 654 02aa 7047     		bx	lr
 655              		.cfi_endproc
 656              	.LFE9:
 658              		.align	2
 659              		.global	TimerPrescaleMatchSet
 660              		.thumb
 661              		.thumb_func
 663              	TimerPrescaleMatchSet:
 664              	.LFB10:
 527:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** 
 528:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //*****************************************************************************
 529:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //
 530:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! Set the timer prescale match value
 531:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
 532:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \param ui32Base is the base address of the timer module.
 533:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \param ui32Timer specifies the timer(s) to adjust; must be one of
 534:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \b GPTIMER_A, \b GPTIMER_B, or \b GPTIMER_BOTH.
 535:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \param ui32Value is the timer prescale match value; must be between 0 and
 536:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! 255, inclusive.
 537:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
 538:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! This function sets the value of the input clock prescaler match value.
 539:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! When in a 16-bit mode that uses the counter match and the prescaler, the
 540:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! prescale match effectively extends the range of the counter to 24-bits.
 541:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
 542:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \note The availability of the prescaler match varies with the timer mode
 543:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! in use.  Please consult the datasheet for the part you are using to
 544:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! determine whether this support is available.
 545:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
 546:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \return None
 547:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //
 548:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //*****************************************************************************
 549:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** void
 550:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** TimerPrescaleMatchSet(uint32_t ui32Base, uint32_t ui32Timer,
 551:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****                       uint32_t ui32Value)
 552:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** {
 665              		.loc 1 552 0
 666              		.cfi_startproc
 667              		@ args = 0, pretend = 0, frame = 16
 668              		@ frame_needed = 1, uses_anonymous_args = 0
 669              		@ link register save eliminated.
 670 02ac 80B4     		push	{r7}
 671              		.cfi_def_cfa_offset 4
 672              		.cfi_offset 7, -4
 673 02ae 85B0     		sub	sp, sp, #20
 674              		.cfi_def_cfa_offset 24
 675 02b0 00AF     		add	r7, sp, #0
 676              		.cfi_def_cfa_register 7
 677 02b2 F860     		str	r0, [r7, #12]
 678 02b4 B960     		str	r1, [r7, #8]
 679 02b6 7A60     		str	r2, [r7, #4]
 553:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 554:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     // Check the arguments.
 555:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 556:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     ASSERT(TimerBaseValid(ui32Base));
 557:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     ASSERT((ui32Timer == GPTIMER_A) || (ui32Timer == GPTIMER_B) ||
 558:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****            (ui32Timer == GPTIMER_BOTH));
 559:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     ASSERT(ui32Value < 256);
 560:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** 
 561:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 562:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     // Set the timer A prescale match if requested.
 563:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 564:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     if(ui32Timer & GPTIMER_A)
 680              		.loc 1 564 0
 681 02b8 BB68     		ldr	r3, [r7, #8]
 682 02ba DBB2     		uxtb	r3, r3
 683 02bc 002B     		cmp	r3, #0
 684 02be 04D0     		beq	.L29
 565:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     {
 566:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****         HWREG(ui32Base + GPTIMER_O_TAPMR) = ui32Value;
 685              		.loc 1 566 0
 686 02c0 FB68     		ldr	r3, [r7, #12]
 687 02c2 4033     		adds	r3, r3, #64
 688 02c4 1A46     		mov	r2, r3
 689 02c6 7B68     		ldr	r3, [r7, #4]
 690 02c8 1360     		str	r3, [r2]
 691              	.L29:
 567:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     }
 568:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** 
 569:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 570:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     // Set the timer B prescale match if requested.
 571:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 572:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     if(ui32Timer & GPTIMER_B)
 692              		.loc 1 572 0
 693 02ca BB68     		ldr	r3, [r7, #8]
 694 02cc 03F47F43 		and	r3, r3, #65280
 695 02d0 002B     		cmp	r3, #0
 696 02d2 04D0     		beq	.L31
 573:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     {
 574:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****         HWREG(ui32Base + GPTIMER_O_TBPMR) = ui32Value;
 697              		.loc 1 574 0
 698 02d4 FB68     		ldr	r3, [r7, #12]
 699 02d6 4433     		adds	r3, r3, #68
 700 02d8 1A46     		mov	r2, r3
 701 02da 7B68     		ldr	r3, [r7, #4]
 702 02dc 1360     		str	r3, [r2]
 703              	.L31:
 575:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     }
 576:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** }
 704              		.loc 1 576 0
 705 02de 00BF     		nop
 706 02e0 1437     		adds	r7, r7, #20
 707              		.cfi_def_cfa_offset 4
 708 02e2 BD46     		mov	sp, r7
 709              		.cfi_def_cfa_register 13
 710              		@ sp needed
 711 02e4 80BC     		pop	{r7}
 712              		.cfi_restore 7
 713              		.cfi_def_cfa_offset 0
 714 02e6 7047     		bx	lr
 715              		.cfi_endproc
 716              	.LFE10:
 718              		.align	2
 719              		.global	TimerPrescaleMatchGet
 720              		.thumb
 721              		.thumb_func
 723              	TimerPrescaleMatchGet:
 724              	.LFB11:
 577:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** 
 578:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //*****************************************************************************
 579:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //
 580:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! Get the timer prescale match value
 581:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
 582:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \param ui32Base is the base address of the timer module.
 583:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \param ui32Timer specifies the timer; must be one of \b GPTIMER_A or
 584:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \b GPTIMER_B.
 585:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
 586:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! This function gets the value of the input clock prescaler match value.
 587:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! When in a 16-bit mode that uses the counter match and prescaler, the
 588:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! prescale match effectively extends the range of the counter to 24-bits.
 589:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
 590:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \note The availability of the prescaler match varies with the timer mode
 591:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! in use.  Please consult the datasheet for the part you are using to
 592:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! determine whether this support is available.
 593:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
 594:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \return The value of the timer prescale match.
 595:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //
 596:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //*****************************************************************************
 597:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** uint32_t
 598:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** TimerPrescaleMatchGet(uint32_t ui32Base, uint32_t ui32Timer)
 599:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** {
 725              		.loc 1 599 0
 726              		.cfi_startproc
 727              		@ args = 0, pretend = 0, frame = 8
 728              		@ frame_needed = 1, uses_anonymous_args = 0
 729              		@ link register save eliminated.
 730 02e8 80B4     		push	{r7}
 731              		.cfi_def_cfa_offset 4
 732              		.cfi_offset 7, -4
 733 02ea 83B0     		sub	sp, sp, #12
 734              		.cfi_def_cfa_offset 16
 735 02ec 00AF     		add	r7, sp, #0
 736              		.cfi_def_cfa_register 7
 737 02ee 7860     		str	r0, [r7, #4]
 738 02f0 3960     		str	r1, [r7]
 600:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 601:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     // Check the arguments.
 602:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 603:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     ASSERT(TimerBaseValid(ui32Base));
 604:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     ASSERT((ui32Timer == GPTIMER_A) || (ui32Timer == GPTIMER_B) ||
 605:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****            (ui32Timer == GPTIMER_BOTH));
 606:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** 
 607:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 608:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     // Return the appropriate prescale match value.
 609:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 610:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     return((ui32Timer == GPTIMER_A) ? HWREG(ui32Base + GPTIMER_O_TAPMR) :
 739              		.loc 1 610 0
 740 02f2 3B68     		ldr	r3, [r7]
 741 02f4 FF2B     		cmp	r3, #255
 742 02f6 03D1     		bne	.L33
 743              		.loc 1 610 0 is_stmt 0 discriminator 1
 744 02f8 7B68     		ldr	r3, [r7, #4]
 745 02fa 4033     		adds	r3, r3, #64
 746 02fc 1B68     		ldr	r3, [r3]
 747 02fe 02E0     		b	.L35
 748              	.L33:
 611:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****            HWREG(ui32Base + GPTIMER_O_TBPMR));
 749              		.loc 1 611 0 is_stmt 1 discriminator 2
 750 0300 7B68     		ldr	r3, [r7, #4]
 751 0302 4433     		adds	r3, r3, #68
 610:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****            HWREG(ui32Base + GPTIMER_O_TBPMR));
 752              		.loc 1 610 0 discriminator 2
 753 0304 1B68     		ldr	r3, [r3]
 754              	.L35:
 612:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** }
 755              		.loc 1 612 0 discriminator 5
 756 0306 1846     		mov	r0, r3
 757 0308 0C37     		adds	r7, r7, #12
 758              		.cfi_def_cfa_offset 4
 759 030a BD46     		mov	sp, r7
 760              		.cfi_def_cfa_register 13
 761              		@ sp needed
 762 030c 80BC     		pop	{r7}
 763              		.cfi_restore 7
 764              		.cfi_def_cfa_offset 0
 765 030e 7047     		bx	lr
 766              		.cfi_endproc
 767              	.LFE11:
 769              		.align	2
 770              		.global	TimerLoadSet
 771              		.thumb
 772              		.thumb_func
 774              	TimerLoadSet:
 775              	.LFB12:
 613:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** 
 614:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //*****************************************************************************
 615:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //
 616:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! Sets the timer load value
 617:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
 618:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \param ui32Base is the base address of the timer module.
 619:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \param ui32Timer specifies the timer(s) to adjust; must be one of:
 620:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \b GPTIMER_A, \b GPTIMER_B, or \b GPTIMER_BOTH. Only \b GPTIMER_A should
 621:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! be used when the timer is configured for 32-bit operation.
 622:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \param ui32Value is the load value.
 623:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
 624:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! This function sets the timer load value; if the timer is running then the
 625:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! value will be immediately loaded into the timer.
 626:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
 627:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \return None
 628:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //
 629:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //*****************************************************************************
 630:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** void
 631:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** TimerLoadSet(uint32_t ui32Base, uint32_t ui32Timer,
 632:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****              uint32_t ui32Value)
 633:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** {
 776              		.loc 1 633 0
 777              		.cfi_startproc
 778              		@ args = 0, pretend = 0, frame = 16
 779              		@ frame_needed = 1, uses_anonymous_args = 0
 780              		@ link register save eliminated.
 781 0310 80B4     		push	{r7}
 782              		.cfi_def_cfa_offset 4
 783              		.cfi_offset 7, -4
 784 0312 85B0     		sub	sp, sp, #20
 785              		.cfi_def_cfa_offset 24
 786 0314 00AF     		add	r7, sp, #0
 787              		.cfi_def_cfa_register 7
 788 0316 F860     		str	r0, [r7, #12]
 789 0318 B960     		str	r1, [r7, #8]
 790 031a 7A60     		str	r2, [r7, #4]
 634:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 635:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     // Check the arguments.
 636:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 637:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     ASSERT(TimerBaseValid(ui32Base));
 638:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     ASSERT((ui32Timer == GPTIMER_A) || (ui32Timer == GPTIMER_B) ||
 639:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****            (ui32Timer == GPTIMER_BOTH));
 640:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** 
 641:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 642:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     // Set the timer A load value if requested.
 643:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 644:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     if(ui32Timer & GPTIMER_A)
 791              		.loc 1 644 0
 792 031c BB68     		ldr	r3, [r7, #8]
 793 031e DBB2     		uxtb	r3, r3
 794 0320 002B     		cmp	r3, #0
 795 0322 04D0     		beq	.L37
 645:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     {
 646:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****         HWREG(ui32Base + GPTIMER_O_TAILR) = ui32Value;
 796              		.loc 1 646 0
 797 0324 FB68     		ldr	r3, [r7, #12]
 798 0326 2833     		adds	r3, r3, #40
 799 0328 1A46     		mov	r2, r3
 800 032a 7B68     		ldr	r3, [r7, #4]
 801 032c 1360     		str	r3, [r2]
 802              	.L37:
 647:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     }
 648:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** 
 649:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 650:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     // Set the timer B load value if requested.
 651:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 652:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     if(ui32Timer & GPTIMER_B)
 803              		.loc 1 652 0
 804 032e BB68     		ldr	r3, [r7, #8]
 805 0330 03F47F43 		and	r3, r3, #65280
 806 0334 002B     		cmp	r3, #0
 807 0336 04D0     		beq	.L39
 653:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     {
 654:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****         HWREG(ui32Base + GPTIMER_O_TBILR) = ui32Value;
 808              		.loc 1 654 0
 809 0338 FB68     		ldr	r3, [r7, #12]
 810 033a 2C33     		adds	r3, r3, #44
 811 033c 1A46     		mov	r2, r3
 812 033e 7B68     		ldr	r3, [r7, #4]
 813 0340 1360     		str	r3, [r2]
 814              	.L39:
 655:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     }
 656:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** }
 815              		.loc 1 656 0
 816 0342 00BF     		nop
 817 0344 1437     		adds	r7, r7, #20
 818              		.cfi_def_cfa_offset 4
 819 0346 BD46     		mov	sp, r7
 820              		.cfi_def_cfa_register 13
 821              		@ sp needed
 822 0348 80BC     		pop	{r7}
 823              		.cfi_restore 7
 824              		.cfi_def_cfa_offset 0
 825 034a 7047     		bx	lr
 826              		.cfi_endproc
 827              	.LFE12:
 829              		.align	2
 830              		.global	TimerLoadGet
 831              		.thumb
 832              		.thumb_func
 834              	TimerLoadGet:
 835              	.LFB13:
 657:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** 
 658:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //*****************************************************************************
 659:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //
 660:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! Gets the timer load value
 661:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
 662:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \param ui32Base is the base address of the timer module.
 663:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \param ui32Timer specifies the timer; must be one of \b GPTIMER_A or
 664:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \b GPTIMER_B.  Only \b GPTIMER_A should be used when the timer is
 665:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! configured for 32-bit operation.
 666:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
 667:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! This function gets the currently programmed interval load value for the
 668:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! specified timer.
 669:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
 670:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \return Returns the load value for the timer.
 671:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //
 672:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //*****************************************************************************
 673:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** uint32_t
 674:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** TimerLoadGet(uint32_t ui32Base, uint32_t ui32Timer)
 675:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** {
 836              		.loc 1 675 0
 837              		.cfi_startproc
 838              		@ args = 0, pretend = 0, frame = 8
 839              		@ frame_needed = 1, uses_anonymous_args = 0
 840              		@ link register save eliminated.
 841 034c 80B4     		push	{r7}
 842              		.cfi_def_cfa_offset 4
 843              		.cfi_offset 7, -4
 844 034e 83B0     		sub	sp, sp, #12
 845              		.cfi_def_cfa_offset 16
 846 0350 00AF     		add	r7, sp, #0
 847              		.cfi_def_cfa_register 7
 848 0352 7860     		str	r0, [r7, #4]
 849 0354 3960     		str	r1, [r7]
 676:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 677:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     // Check the arguments.
 678:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 679:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     ASSERT(TimerBaseValid(ui32Base));
 680:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     ASSERT((ui32Timer == GPTIMER_A) || (ui32Timer == GPTIMER_B));
 681:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** 
 682:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 683:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     // Return the appropriate load value.
 684:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 685:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     return((ui32Timer == GPTIMER_A) ? HWREG(ui32Base + GPTIMER_O_TAILR) :
 850              		.loc 1 685 0
 851 0356 3B68     		ldr	r3, [r7]
 852 0358 FF2B     		cmp	r3, #255
 853 035a 03D1     		bne	.L41
 854              		.loc 1 685 0 is_stmt 0 discriminator 1
 855 035c 7B68     		ldr	r3, [r7, #4]
 856 035e 2833     		adds	r3, r3, #40
 857 0360 1B68     		ldr	r3, [r3]
 858 0362 02E0     		b	.L43
 859              	.L41:
 686:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****            HWREG(ui32Base + GPTIMER_O_TBILR));
 860              		.loc 1 686 0 is_stmt 1 discriminator 2
 861 0364 7B68     		ldr	r3, [r7, #4]
 862 0366 2C33     		adds	r3, r3, #44
 685:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****            HWREG(ui32Base + GPTIMER_O_TBILR));
 863              		.loc 1 685 0 discriminator 2
 864 0368 1B68     		ldr	r3, [r3]
 865              	.L43:
 687:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** }
 866              		.loc 1 687 0 discriminator 5
 867 036a 1846     		mov	r0, r3
 868 036c 0C37     		adds	r7, r7, #12
 869              		.cfi_def_cfa_offset 4
 870 036e BD46     		mov	sp, r7
 871              		.cfi_def_cfa_register 13
 872              		@ sp needed
 873 0370 80BC     		pop	{r7}
 874              		.cfi_restore 7
 875              		.cfi_def_cfa_offset 0
 876 0372 7047     		bx	lr
 877              		.cfi_endproc
 878              	.LFE13:
 880              		.align	2
 881              		.global	TimerValueGet
 882              		.thumb
 883              		.thumb_func
 885              	TimerValueGet:
 886              	.LFB14:
 688:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** 
 689:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** 
 690:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** 
 691:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //*****************************************************************************
 692:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //
 693:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! Gets the current timer value
 694:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
 695:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \param ui32Base is the base address of the timer module.
 696:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \param ui32Timer specifies the timer; must be one of \b GPTIMER_A or
 697:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \b GPTIMER_B.  Only \b GPTIMER_A should be used when the timer is
 698:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! configured for 32-bit operation.
 699:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
 700:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! This function reads the current value of the specified timer.
 701:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
 702:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \return Returns the current value of the timer.
 703:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //
 704:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //*****************************************************************************
 705:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** uint32_t
 706:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** TimerValueGet(uint32_t ui32Base, uint32_t ui32Timer)
 707:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** {
 887              		.loc 1 707 0
 888              		.cfi_startproc
 889              		@ args = 0, pretend = 0, frame = 8
 890              		@ frame_needed = 1, uses_anonymous_args = 0
 891              		@ link register save eliminated.
 892 0374 80B4     		push	{r7}
 893              		.cfi_def_cfa_offset 4
 894              		.cfi_offset 7, -4
 895 0376 83B0     		sub	sp, sp, #12
 896              		.cfi_def_cfa_offset 16
 897 0378 00AF     		add	r7, sp, #0
 898              		.cfi_def_cfa_register 7
 899 037a 7860     		str	r0, [r7, #4]
 900 037c 3960     		str	r1, [r7]
 708:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 709:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     // Check the arguments.
 710:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 711:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     ASSERT(TimerBaseValid(ui32Base));
 712:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     ASSERT((ui32Timer == GPTIMER_A) || (ui32Timer == GPTIMER_B));
 713:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** 
 714:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 715:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     // Return the appropriate timer value.
 716:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 717:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     return((ui32Timer == GPTIMER_A) ? HWREG(ui32Base + GPTIMER_O_TAR) :
 901              		.loc 1 717 0
 902 037e 3B68     		ldr	r3, [r7]
 903 0380 FF2B     		cmp	r3, #255
 904 0382 03D1     		bne	.L45
 905              		.loc 1 717 0 is_stmt 0 discriminator 1
 906 0384 7B68     		ldr	r3, [r7, #4]
 907 0386 4833     		adds	r3, r3, #72
 908 0388 1B68     		ldr	r3, [r3]
 909 038a 02E0     		b	.L47
 910              	.L45:
 718:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****            HWREG(ui32Base + GPTIMER_O_TBR));
 911              		.loc 1 718 0 is_stmt 1 discriminator 2
 912 038c 7B68     		ldr	r3, [r7, #4]
 913 038e 4C33     		adds	r3, r3, #76
 717:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****            HWREG(ui32Base + GPTIMER_O_TBR));
 914              		.loc 1 717 0 discriminator 2
 915 0390 1B68     		ldr	r3, [r3]
 916              	.L47:
 719:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** }
 917              		.loc 1 719 0 discriminator 5
 918 0392 1846     		mov	r0, r3
 919 0394 0C37     		adds	r7, r7, #12
 920              		.cfi_def_cfa_offset 4
 921 0396 BD46     		mov	sp, r7
 922              		.cfi_def_cfa_register 13
 923              		@ sp needed
 924 0398 80BC     		pop	{r7}
 925              		.cfi_restore 7
 926              		.cfi_def_cfa_offset 0
 927 039a 7047     		bx	lr
 928              		.cfi_endproc
 929              	.LFE14:
 931              		.align	2
 932              		.global	TimerMatchSet
 933              		.thumb
 934              		.thumb_func
 936              	TimerMatchSet:
 937              	.LFB15:
 720:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** 
 721:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //*****************************************************************************
 722:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //
 723:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! Sets the timer match value
 724:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
 725:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \param ui32Base is the base address of the timer module.
 726:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \param ui32Timer specifies the timer(s) to adjust; must be one of
 727:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \b GPTIMER_A, \b GPTIMER_B, or \b GPTIMER_BOTH.  Only \b GPTIMER_A should
 728:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! be used when the timer is configured for 32-bit operation.
 729:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \param ui32Value is the match value.
 730:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
 731:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! This function sets the match value for a timer.  This is used in capture
 732:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! count mode to determine when to interrupt the processor and in PWM mode to
 733:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! determine the duty cycle of the output signal.
 734:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
 735:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \return None
 736:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //
 737:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //*****************************************************************************
 738:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** void
 739:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** TimerMatchSet(uint32_t ui32Base, uint32_t ui32Timer,
 740:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****               uint32_t ui32Value)
 741:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** {
 938              		.loc 1 741 0
 939              		.cfi_startproc
 940              		@ args = 0, pretend = 0, frame = 16
 941              		@ frame_needed = 1, uses_anonymous_args = 0
 942              		@ link register save eliminated.
 943 039c 80B4     		push	{r7}
 944              		.cfi_def_cfa_offset 4
 945              		.cfi_offset 7, -4
 946 039e 85B0     		sub	sp, sp, #20
 947              		.cfi_def_cfa_offset 24
 948 03a0 00AF     		add	r7, sp, #0
 949              		.cfi_def_cfa_register 7
 950 03a2 F860     		str	r0, [r7, #12]
 951 03a4 B960     		str	r1, [r7, #8]
 952 03a6 7A60     		str	r2, [r7, #4]
 742:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 743:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     // Check the arguments.
 744:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 745:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     ASSERT(TimerBaseValid(ui32Base));
 746:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     ASSERT((ui32Timer == GPTIMER_A) || (ui32Timer == GPTIMER_B) ||
 747:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****            (ui32Timer == GPTIMER_BOTH));
 748:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** 
 749:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 750:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     // Set the timer A match value if requested.
 751:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 752:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     if(ui32Timer & GPTIMER_A)
 953              		.loc 1 752 0
 954 03a8 BB68     		ldr	r3, [r7, #8]
 955 03aa DBB2     		uxtb	r3, r3
 956 03ac 002B     		cmp	r3, #0
 957 03ae 04D0     		beq	.L49
 753:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     {
 754:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****         HWREG(ui32Base + GPTIMER_O_TAMATCHR) = ui32Value;
 958              		.loc 1 754 0
 959 03b0 FB68     		ldr	r3, [r7, #12]
 960 03b2 3033     		adds	r3, r3, #48
 961 03b4 1A46     		mov	r2, r3
 962 03b6 7B68     		ldr	r3, [r7, #4]
 963 03b8 1360     		str	r3, [r2]
 964              	.L49:
 755:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     }
 756:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** 
 757:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 758:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     // Set the timer B match value if requested.
 759:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 760:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     if(ui32Timer & GPTIMER_B)
 965              		.loc 1 760 0
 966 03ba BB68     		ldr	r3, [r7, #8]
 967 03bc 03F47F43 		and	r3, r3, #65280
 968 03c0 002B     		cmp	r3, #0
 969 03c2 04D0     		beq	.L51
 761:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     {
 762:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****         HWREG(ui32Base + GPTIMER_O_TBMATCHR) = ui32Value;
 970              		.loc 1 762 0
 971 03c4 FB68     		ldr	r3, [r7, #12]
 972 03c6 3433     		adds	r3, r3, #52
 973 03c8 1A46     		mov	r2, r3
 974 03ca 7B68     		ldr	r3, [r7, #4]
 975 03cc 1360     		str	r3, [r2]
 976              	.L51:
 763:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     }
 764:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** }
 977              		.loc 1 764 0
 978 03ce 00BF     		nop
 979 03d0 1437     		adds	r7, r7, #20
 980              		.cfi_def_cfa_offset 4
 981 03d2 BD46     		mov	sp, r7
 982              		.cfi_def_cfa_register 13
 983              		@ sp needed
 984 03d4 80BC     		pop	{r7}
 985              		.cfi_restore 7
 986              		.cfi_def_cfa_offset 0
 987 03d6 7047     		bx	lr
 988              		.cfi_endproc
 989              	.LFE15:
 991              		.align	2
 992              		.global	TimerMatchGet
 993              		.thumb
 994              		.thumb_func
 996              	TimerMatchGet:
 997              	.LFB16:
 765:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** 
 766:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //*****************************************************************************
 767:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //
 768:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! Gets the timer match value
 769:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
 770:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \param ui32Base is the base address of the timer module.
 771:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \param ui32Timer specifies the timer; must be one of \b GPTIMER_A or
 772:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \b GPTIMER_B.  Only \b GPTIMER_A should be used when the timer is
 773:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! configured for 32-bit operation.
 774:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
 775:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! This function gets the match value for the specified timer.
 776:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
 777:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \return Returns the match value for the timer.
 778:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //
 779:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //*****************************************************************************
 780:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** uint32_t
 781:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** TimerMatchGet(uint32_t ui32Base, uint32_t ui32Timer)
 782:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** {
 998              		.loc 1 782 0
 999              		.cfi_startproc
 1000              		@ args = 0, pretend = 0, frame = 8
 1001              		@ frame_needed = 1, uses_anonymous_args = 0
 1002              		@ link register save eliminated.
 1003 03d8 80B4     		push	{r7}
 1004              		.cfi_def_cfa_offset 4
 1005              		.cfi_offset 7, -4
 1006 03da 83B0     		sub	sp, sp, #12
 1007              		.cfi_def_cfa_offset 16
 1008 03dc 00AF     		add	r7, sp, #0
 1009              		.cfi_def_cfa_register 7
 1010 03de 7860     		str	r0, [r7, #4]
 1011 03e0 3960     		str	r1, [r7]
 783:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 784:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     // Check the arguments.
 785:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 786:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     ASSERT(TimerBaseValid(ui32Base));
 787:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     ASSERT((ui32Timer == GPTIMER_A) || (ui32Timer == GPTIMER_B));
 788:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** 
 789:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 790:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     // Return the appropriate match value.
 791:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 792:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     return((ui32Timer == GPTIMER_A) ? HWREG(ui32Base + GPTIMER_O_TAMATCHR) :
 1012              		.loc 1 792 0
 1013 03e2 3B68     		ldr	r3, [r7]
 1014 03e4 FF2B     		cmp	r3, #255
 1015 03e6 03D1     		bne	.L53
 1016              		.loc 1 792 0 is_stmt 0 discriminator 1
 1017 03e8 7B68     		ldr	r3, [r7, #4]
 1018 03ea 3033     		adds	r3, r3, #48
 1019 03ec 1B68     		ldr	r3, [r3]
 1020 03ee 02E0     		b	.L55
 1021              	.L53:
 793:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****            HWREG(ui32Base + GPTIMER_O_TBMATCHR));
 1022              		.loc 1 793 0 is_stmt 1 discriminator 2
 1023 03f0 7B68     		ldr	r3, [r7, #4]
 1024 03f2 3433     		adds	r3, r3, #52
 792:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****            HWREG(ui32Base + GPTIMER_O_TBMATCHR));
 1025              		.loc 1 792 0 discriminator 2
 1026 03f4 1B68     		ldr	r3, [r3]
 1027              	.L55:
 794:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** }
 1028              		.loc 1 794 0 discriminator 5
 1029 03f6 1846     		mov	r0, r3
 1030 03f8 0C37     		adds	r7, r7, #12
 1031              		.cfi_def_cfa_offset 4
 1032 03fa BD46     		mov	sp, r7
 1033              		.cfi_def_cfa_register 13
 1034              		@ sp needed
 1035 03fc 80BC     		pop	{r7}
 1036              		.cfi_restore 7
 1037              		.cfi_def_cfa_offset 0
 1038 03fe 7047     		bx	lr
 1039              		.cfi_endproc
 1040              	.LFE16:
 1042              		.align	2
 1043              		.global	TimerIntRegister
 1044              		.thumb
 1045              		.thumb_func
 1047              	TimerIntRegister:
 1048              	.LFB17:
 795:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** 
 796:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //*****************************************************************************
 797:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //
 798:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! Registers an interrupt handler for the timer interrupt
 799:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
 800:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \param ui32Base is the base address of the timer module.
 801:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \param ui32Timer specifies the timer(s); must be one of \b GPTIMER_A,
 802:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \b GPTIMER_B, or \b GPTIMER_BOTH.
 803:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \param pfnHandler is a pointer to the function to be called when the timer
 804:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! interrupt occurs.
 805:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
 806:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! This function sets the handler to be called when a timer interrupt occurs.
 807:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! In addition, this function enables the global interrupt in the interrupt
 808:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! controller; specific timer interrupts must be enabled via TimerIntEnable().
 809:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! It is the interrupt handler's responsibility to clear the interrupt source
 810:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! via TimerIntClear().
 811:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
 812:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \sa See IntRegister() for important information about registering interrupt
 813:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! handlers.
 814:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
 815:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \return None
 816:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //
 817:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //*****************************************************************************
 818:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** void
 819:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** TimerIntRegister(uint32_t ui32Base, uint32_t ui32Timer,
 820:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****                  void (*pfnHandler)(void))
 821:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** {
 1049              		.loc 1 821 0
 1050              		.cfi_startproc
 1051              		@ args = 0, pretend = 0, frame = 16
 1052              		@ frame_needed = 1, uses_anonymous_args = 0
 1053 0400 80B5     		push	{r7, lr}
 1054              		.cfi_def_cfa_offset 8
 1055              		.cfi_offset 7, -8
 1056              		.cfi_offset 14, -4
 1057 0402 84B0     		sub	sp, sp, #16
 1058              		.cfi_def_cfa_offset 24
 1059 0404 00AF     		add	r7, sp, #0
 1060              		.cfi_def_cfa_register 7
 1061 0406 F860     		str	r0, [r7, #12]
 1062 0408 B960     		str	r1, [r7, #8]
 1063 040a 7A60     		str	r2, [r7, #4]
 822:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 823:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     // Check the arguments.
 824:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 825:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     ASSERT(TimerBaseValid(ui32Base));
 826:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     ASSERT((ui32Timer == GPTIMER_A) || (ui32Timer == GPTIMER_B) ||
 827:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****            (ui32Timer == GPTIMER_BOTH));
 828:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** 
 829:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 830:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     // Get the interrupt number for this timer module.
 831:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 832:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     ui32Base = ((ui32Base == GPTIMER0_BASE) ? INT_TIMER0A :
 1064              		.loc 1 832 0
 1065 040c FB68     		ldr	r3, [r7, #12]
 1066 040e 194A     		ldr	r2, .L66
 1067 0410 9342     		cmp	r3, r2
 1068 0412 0DD0     		beq	.L57
 1069              		.loc 1 832 0 is_stmt 0 discriminator 1
 1070 0414 FB68     		ldr	r3, [r7, #12]
 1071 0416 184A     		ldr	r2, .L66+4
 1072 0418 9342     		cmp	r3, r2
 1073 041a 07D0     		beq	.L58
 1074              		.loc 1 832 0 discriminator 3
 1075 041c FB68     		ldr	r3, [r7, #12]
 1076 041e 174A     		ldr	r2, .L66+8
 1077 0420 9342     		cmp	r3, r2
 1078 0422 01D1     		bne	.L59
 1079              		.loc 1 832 0 discriminator 5
 1080 0424 2723     		movs	r3, #39
 1081 0426 04E0     		b	.L62
 1082              	.L59:
 1083              		.loc 1 832 0 discriminator 6
 1084 0428 3323     		movs	r3, #51
 1085 042a 02E0     		b	.L62
 1086              	.L58:
 1087              		.loc 1 832 0 discriminator 4
 1088 042c 2523     		movs	r3, #37
 1089 042e 00E0     		b	.L62
 1090              	.L57:
 1091              		.loc 1 832 0 discriminator 2
 1092 0430 2323     		movs	r3, #35
 1093              	.L62:
 1094              		.loc 1 832 0 discriminator 12
 1095 0432 FB60     		str	r3, [r7, #12]
 833:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****                 ((ui32Base == GPTIMER1_BASE) ? INT_TIMER1A :
 834:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****                  ((ui32Base == GPTIMER2_BASE) ? INT_TIMER2A : INT_TIMER3A)));
 835:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** 
 836:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 837:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     // Register an interrupt handler for timer A if requested.
 838:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 839:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     if(ui32Timer & GPTIMER_A)
 1096              		.loc 1 839 0 is_stmt 1 discriminator 12
 1097 0434 BB68     		ldr	r3, [r7, #8]
 1098 0436 DBB2     		uxtb	r3, r3
 1099 0438 002B     		cmp	r3, #0
 1100 043a 06D0     		beq	.L63
 840:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     {
 841:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****         //
 842:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****         // Register the interrupt handler.
 843:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****         //
 844:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****         IntRegister(ui32Base, pfnHandler);
 1101              		.loc 1 844 0
 1102 043c 7968     		ldr	r1, [r7, #4]
 1103 043e F868     		ldr	r0, [r7, #12]
 1104 0440 FFF7FEFF 		bl	IntRegister
 845:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** 
 846:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****         //
 847:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****         // Enable the interrupt.
 848:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****         //
 849:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****         IntEnable(ui32Base);
 1105              		.loc 1 849 0
 1106 0444 F868     		ldr	r0, [r7, #12]
 1107 0446 FFF7FEFF 		bl	IntEnable
 1108              	.L63:
 850:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     }
 851:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** 
 852:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 853:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     // Register an interrupt handler for timer B if requested.
 854:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 855:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     if(ui32Timer & GPTIMER_B)
 1109              		.loc 1 855 0
 1110 044a BB68     		ldr	r3, [r7, #8]
 1111 044c 03F47F43 		and	r3, r3, #65280
 1112 0450 002B     		cmp	r3, #0
 1113 0452 0AD0     		beq	.L65
 856:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     {
 857:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****         //
 858:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****         // Register the interrupt handler.
 859:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****         //
 860:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****         IntRegister(ui32Base + 1, pfnHandler);
 1114              		.loc 1 860 0
 1115 0454 FB68     		ldr	r3, [r7, #12]
 1116 0456 0133     		adds	r3, r3, #1
 1117 0458 7968     		ldr	r1, [r7, #4]
 1118 045a 1846     		mov	r0, r3
 1119 045c FFF7FEFF 		bl	IntRegister
 861:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** 
 862:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****         //
 863:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****         // Enable the interrupt.
 864:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****         //
 865:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****         IntEnable(ui32Base + 1);
 1120              		.loc 1 865 0
 1121 0460 FB68     		ldr	r3, [r7, #12]
 1122 0462 0133     		adds	r3, r3, #1
 1123 0464 1846     		mov	r0, r3
 1124 0466 FFF7FEFF 		bl	IntEnable
 1125              	.L65:
 866:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     }
 867:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** }
 1126              		.loc 1 867 0
 1127 046a 00BF     		nop
 1128 046c 1037     		adds	r7, r7, #16
 1129              		.cfi_def_cfa_offset 8
 1130 046e BD46     		mov	sp, r7
 1131              		.cfi_def_cfa_register 13
 1132              		@ sp needed
 1133 0470 80BD     		pop	{r7, pc}
 1134              	.L67:
 1135 0472 00BF     		.align	2
 1136              	.L66:
 1137 0474 00000340 		.word	1073938432
 1138 0478 00100340 		.word	1073942528
 1139 047c 00200340 		.word	1073946624
 1140              		.cfi_endproc
 1141              	.LFE17:
 1143              		.align	2
 1144              		.global	TimerIntUnregister
 1145              		.thumb
 1146              		.thumb_func
 1148              	TimerIntUnregister:
 1149              	.LFB18:
 868:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** 
 869:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //*****************************************************************************
 870:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //
 871:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! Unregisters an interrupt handler for the timer interrupt
 872:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
 873:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \param ui32Base is the base address of the timer module.
 874:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \param ui32Timer specifies the timer(s); must be one of \b GPTIMER_A,
 875:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \b GPTIMER_B, or \b GPTIMER_BOTH.
 876:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
 877:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! This function clears the handler to be called when a timer interrupt
 878:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! occurs.  This function also masks off the interrupt in the interrupt
 879:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! controller so that the interrupt handler no longer is called.
 880:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
 881:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \sa See IntRegister() for important information about registering interrupt
 882:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! handlers.
 883:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
 884:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \return None
 885:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //
 886:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //*****************************************************************************
 887:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** void
 888:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** TimerIntUnregister(uint32_t ui32Base, uint32_t ui32Timer)
 889:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** {
 1150              		.loc 1 889 0
 1151              		.cfi_startproc
 1152              		@ args = 0, pretend = 0, frame = 8
 1153              		@ frame_needed = 1, uses_anonymous_args = 0
 1154 0480 80B5     		push	{r7, lr}
 1155              		.cfi_def_cfa_offset 8
 1156              		.cfi_offset 7, -8
 1157              		.cfi_offset 14, -4
 1158 0482 82B0     		sub	sp, sp, #8
 1159              		.cfi_def_cfa_offset 16
 1160 0484 00AF     		add	r7, sp, #0
 1161              		.cfi_def_cfa_register 7
 1162 0486 7860     		str	r0, [r7, #4]
 1163 0488 3960     		str	r1, [r7]
 890:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 891:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     // Check the arguments.
 892:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 893:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     ASSERT(TimerBaseValid(ui32Base));
 894:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     ASSERT((ui32Timer == GPTIMER_A) || (ui32Timer == GPTIMER_B) ||
 895:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****            (ui32Timer == GPTIMER_BOTH));
 896:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** 
 897:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 898:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     // Get the interrupt number for this timer module.
 899:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 900:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     ui32Base = ((ui32Base == GPTIMER0_BASE) ? INT_TIMER0A :
 1164              		.loc 1 900 0
 1165 048a 7B68     		ldr	r3, [r7, #4]
 1166 048c 174A     		ldr	r2, .L78
 1167 048e 9342     		cmp	r3, r2
 1168 0490 0DD0     		beq	.L69
 1169              		.loc 1 900 0 is_stmt 0 discriminator 1
 1170 0492 7B68     		ldr	r3, [r7, #4]
 1171 0494 164A     		ldr	r2, .L78+4
 1172 0496 9342     		cmp	r3, r2
 1173 0498 07D0     		beq	.L70
 1174              		.loc 1 900 0 discriminator 3
 1175 049a 7B68     		ldr	r3, [r7, #4]
 1176 049c 154A     		ldr	r2, .L78+8
 1177 049e 9342     		cmp	r3, r2
 1178 04a0 01D1     		bne	.L71
 1179              		.loc 1 900 0 discriminator 5
 1180 04a2 2723     		movs	r3, #39
 1181 04a4 04E0     		b	.L74
 1182              	.L71:
 1183              		.loc 1 900 0 discriminator 6
 1184 04a6 3323     		movs	r3, #51
 1185 04a8 02E0     		b	.L74
 1186              	.L70:
 1187              		.loc 1 900 0 discriminator 4
 1188 04aa 2523     		movs	r3, #37
 1189 04ac 00E0     		b	.L74
 1190              	.L69:
 1191              		.loc 1 900 0 discriminator 2
 1192 04ae 2323     		movs	r3, #35
 1193              	.L74:
 1194              		.loc 1 900 0 discriminator 12
 1195 04b0 7B60     		str	r3, [r7, #4]
 901:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****                 ((ui32Base == GPTIMER1_BASE) ? INT_TIMER1A :
 902:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****                  ((ui32Base == GPTIMER2_BASE) ? INT_TIMER2A : INT_TIMER3A)));
 903:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** 
 904:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 905:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     // Unregister the interrupt handler for timer A if requested.
 906:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 907:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     if(ui32Timer & GPTIMER_A)
 1196              		.loc 1 907 0 is_stmt 1 discriminator 12
 1197 04b2 3B68     		ldr	r3, [r7]
 1198 04b4 DBB2     		uxtb	r3, r3
 1199 04b6 002B     		cmp	r3, #0
 1200 04b8 05D0     		beq	.L75
 908:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     {
 909:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****         //
 910:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****         // Disable the interrupt.
 911:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****         //
 912:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****         IntDisable(ui32Base);
 1201              		.loc 1 912 0
 1202 04ba 7868     		ldr	r0, [r7, #4]
 1203 04bc FFF7FEFF 		bl	IntDisable
 913:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** 
 914:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****         //
 915:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****         // Unregister the interrupt handler.
 916:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****         //
 917:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****         IntUnregister(ui32Base);
 1204              		.loc 1 917 0
 1205 04c0 7868     		ldr	r0, [r7, #4]
 1206 04c2 FFF7FEFF 		bl	IntUnregister
 1207              	.L75:
 918:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     }
 919:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** 
 920:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 921:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     // Unregister the interrupt handler for timer B if requested.
 922:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 923:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     if(ui32Timer & GPTIMER_B)
 1208              		.loc 1 923 0
 1209 04c6 3B68     		ldr	r3, [r7]
 1210 04c8 03F47F43 		and	r3, r3, #65280
 1211 04cc 002B     		cmp	r3, #0
 1212 04ce 09D0     		beq	.L77
 924:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     {
 925:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****         //
 926:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****         // Disable the interrupt.
 927:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****         //
 928:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****         IntDisable(ui32Base + 1);
 1213              		.loc 1 928 0
 1214 04d0 7B68     		ldr	r3, [r7, #4]
 1215 04d2 0133     		adds	r3, r3, #1
 1216 04d4 1846     		mov	r0, r3
 1217 04d6 FFF7FEFF 		bl	IntDisable
 929:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** 
 930:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****         //
 931:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****         // Unregister the interrupt handler.
 932:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****         //
 933:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****         IntUnregister(ui32Base + 1);
 1218              		.loc 1 933 0
 1219 04da 7B68     		ldr	r3, [r7, #4]
 1220 04dc 0133     		adds	r3, r3, #1
 1221 04de 1846     		mov	r0, r3
 1222 04e0 FFF7FEFF 		bl	IntUnregister
 1223              	.L77:
 934:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     }
 935:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** }
 1224              		.loc 1 935 0
 1225 04e4 00BF     		nop
 1226 04e6 0837     		adds	r7, r7, #8
 1227              		.cfi_def_cfa_offset 8
 1228 04e8 BD46     		mov	sp, r7
 1229              		.cfi_def_cfa_register 13
 1230              		@ sp needed
 1231 04ea 80BD     		pop	{r7, pc}
 1232              	.L79:
 1233              		.align	2
 1234              	.L78:
 1235 04ec 00000340 		.word	1073938432
 1236 04f0 00100340 		.word	1073942528
 1237 04f4 00200340 		.word	1073946624
 1238              		.cfi_endproc
 1239              	.LFE18:
 1241              		.align	2
 1242              		.global	TimerIntEnable
 1243              		.thumb
 1244              		.thumb_func
 1246              	TimerIntEnable:
 1247              	.LFB19:
 936:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** 
 937:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //*****************************************************************************
 938:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //
 939:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! Enables individual timer interrupt sources
 940:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
 941:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \param ui32Base is the base address of the timer module.
 942:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \param ui32IntFlags is the bit mask of the interrupt sources to be enabled.
 943:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
 944:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! Enables the indicated timer interrupt sources.  Only the sources that are
 945:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! enabled can be reflected to the processor interrupt; disabled sources have
 946:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! no effect on the processor.
 947:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
 948:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! The \e ui32IntFlags parameter must be the logical OR of any combination of
 949:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! the following:
 950:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
 951:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! - \b GPTIMER_CAPB_EVENT  - Capture B event interrupt
 952:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! - \b GPTIMER_CAPB_MATCH  - Capture B match interrupt
 953:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! - \b GPTIMER_TIMB_TIMEOUT  - Timer B timeout interrupt
 954:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! - \b GPTIMER_CAPA_EVENT  - Capture A event interrupt
 955:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! - \b GPTIMER_CAPA_MATCH  - Capture A match interrupt
 956:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! - \b GPTIMER_TIMA_TIMEOUT  - Timer A timeout interrupt
 957:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
 958:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \return None
 959:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //
 960:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //*****************************************************************************
 961:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** void
 962:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** TimerIntEnable(uint32_t ui32Base, uint32_t ui32IntFlags)
 963:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** {
 1248              		.loc 1 963 0
 1249              		.cfi_startproc
 1250              		@ args = 0, pretend = 0, frame = 8
 1251              		@ frame_needed = 1, uses_anonymous_args = 0
 1252              		@ link register save eliminated.
 1253 04f8 80B4     		push	{r7}
 1254              		.cfi_def_cfa_offset 4
 1255              		.cfi_offset 7, -4
 1256 04fa 83B0     		sub	sp, sp, #12
 1257              		.cfi_def_cfa_offset 16
 1258 04fc 00AF     		add	r7, sp, #0
 1259              		.cfi_def_cfa_register 7
 1260 04fe 7860     		str	r0, [r7, #4]
 1261 0500 3960     		str	r1, [r7]
 964:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 965:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     // Check the arguments.
 966:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 967:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     ASSERT(TimerBaseValid(ui32Base));
 968:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** 
 969:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 970:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     // Enable the specified interrupts.
 971:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 972:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     HWREG(ui32Base + GPTIMER_O_IMR) |= ui32IntFlags;
 1262              		.loc 1 972 0
 1263 0502 7B68     		ldr	r3, [r7, #4]
 1264 0504 1833     		adds	r3, r3, #24
 1265 0506 1946     		mov	r1, r3
 1266 0508 7B68     		ldr	r3, [r7, #4]
 1267 050a 1833     		adds	r3, r3, #24
 1268 050c 1A68     		ldr	r2, [r3]
 1269 050e 3B68     		ldr	r3, [r7]
 1270 0510 1343     		orrs	r3, r3, r2
 1271 0512 0B60     		str	r3, [r1]
 973:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** }
 1272              		.loc 1 973 0
 1273 0514 00BF     		nop
 1274 0516 0C37     		adds	r7, r7, #12
 1275              		.cfi_def_cfa_offset 4
 1276 0518 BD46     		mov	sp, r7
 1277              		.cfi_def_cfa_register 13
 1278              		@ sp needed
 1279 051a 80BC     		pop	{r7}
 1280              		.cfi_restore 7
 1281              		.cfi_def_cfa_offset 0
 1282 051c 7047     		bx	lr
 1283              		.cfi_endproc
 1284              	.LFE19:
 1286 051e 00BF     		.align	2
 1287              		.global	TimerIntDisable
 1288              		.thumb
 1289              		.thumb_func
 1291              	TimerIntDisable:
 1292              	.LFB20:
 974:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** 
 975:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //*****************************************************************************
 976:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //
 977:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! Disables individual timer interrupt sources
 978:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
 979:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \param ui32Base is the base address of the timer module.
 980:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \param ui32IntFlags is the bit mask of the interrupt sources to be disabled.
 981:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
 982:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! Disables the indicated timer interrupt sources.  Only the sources that are
 983:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! enabled can be reflected to the processor interrupt; disabled sources have
 984:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! no effect on the processor.
 985:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
 986:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! The \e ui32IntFlags parameter has the same definition as the \e ui32IntFlags
 987:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! parameter to TimerIntEnable().
 988:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
 989:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \return None
 990:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //
 991:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //*****************************************************************************
 992:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** void
 993:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** TimerIntDisable(uint32_t ui32Base, uint32_t ui32IntFlags)
 994:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** {
 1293              		.loc 1 994 0
 1294              		.cfi_startproc
 1295              		@ args = 0, pretend = 0, frame = 8
 1296              		@ frame_needed = 1, uses_anonymous_args = 0
 1297              		@ link register save eliminated.
 1298 0520 80B4     		push	{r7}
 1299              		.cfi_def_cfa_offset 4
 1300              		.cfi_offset 7, -4
 1301 0522 83B0     		sub	sp, sp, #12
 1302              		.cfi_def_cfa_offset 16
 1303 0524 00AF     		add	r7, sp, #0
 1304              		.cfi_def_cfa_register 7
 1305 0526 7860     		str	r0, [r7, #4]
 1306 0528 3960     		str	r1, [r7]
 995:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 996:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     // Check the arguments.
 997:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
 998:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     ASSERT(TimerBaseValid(ui32Base));
 999:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** 
1000:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
1001:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     // Disable the specified interrupts.
1002:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
1003:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     HWREG(ui32Base + GPTIMER_O_IMR) &= ~(ui32IntFlags);
 1307              		.loc 1 1003 0
 1308 052a 7B68     		ldr	r3, [r7, #4]
 1309 052c 1833     		adds	r3, r3, #24
 1310 052e 1946     		mov	r1, r3
 1311 0530 7B68     		ldr	r3, [r7, #4]
 1312 0532 1833     		adds	r3, r3, #24
 1313 0534 1A68     		ldr	r2, [r3]
 1314 0536 3B68     		ldr	r3, [r7]
 1315 0538 DB43     		mvns	r3, r3
 1316 053a 1340     		ands	r3, r3, r2
 1317 053c 0B60     		str	r3, [r1]
1004:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** }
 1318              		.loc 1 1004 0
 1319 053e 00BF     		nop
 1320 0540 0C37     		adds	r7, r7, #12
 1321              		.cfi_def_cfa_offset 4
 1322 0542 BD46     		mov	sp, r7
 1323              		.cfi_def_cfa_register 13
 1324              		@ sp needed
 1325 0544 80BC     		pop	{r7}
 1326              		.cfi_restore 7
 1327              		.cfi_def_cfa_offset 0
 1328 0546 7047     		bx	lr
 1329              		.cfi_endproc
 1330              	.LFE20:
 1332              		.align	2
 1333              		.global	TimerIntStatus
 1334              		.thumb
 1335              		.thumb_func
 1337              	TimerIntStatus:
 1338              	.LFB21:
1005:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** 
1006:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //*****************************************************************************
1007:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //
1008:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! Gets the current interrupt status
1009:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
1010:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \param ui32Base is the base address of the timer module.
1011:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \param bMasked is false if the raw interrupt status is required and true if
1012:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! the masked interrupt status is required.
1013:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
1014:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! This function returns the interrupt status for the timer module.  Either
1015:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! the raw interrupt status or the status of interrupts that are allowed to
1016:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! reflect to the processor can be returned.
1017:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
1018:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \return The current interrupt status, enumerated as a bit field of
1019:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! values described in TimerIntEnable().
1020:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //
1021:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //*****************************************************************************
1022:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** uint32_t
1023:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** TimerIntStatus(uint32_t ui32Base, bool bMasked)
1024:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** {
 1339              		.loc 1 1024 0
 1340              		.cfi_startproc
 1341              		@ args = 0, pretend = 0, frame = 8
 1342              		@ frame_needed = 1, uses_anonymous_args = 0
 1343              		@ link register save eliminated.
 1344 0548 80B4     		push	{r7}
 1345              		.cfi_def_cfa_offset 4
 1346              		.cfi_offset 7, -4
 1347 054a 83B0     		sub	sp, sp, #12
 1348              		.cfi_def_cfa_offset 16
 1349 054c 00AF     		add	r7, sp, #0
 1350              		.cfi_def_cfa_register 7
 1351 054e 7860     		str	r0, [r7, #4]
 1352 0550 0B46     		mov	r3, r1
 1353 0552 FB70     		strb	r3, [r7, #3]
1025:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
1026:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     // Check the arguments.
1027:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
1028:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     ASSERT(TimerBaseValid(ui32Base));
1029:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** 
1030:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
1031:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     // Return either the interrupt status or the raw interrupt status as
1032:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     // requested.
1033:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
1034:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     return(bMasked ? HWREG(ui32Base + GPTIMER_O_MIS) :
 1354              		.loc 1 1034 0
 1355 0554 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1356 0556 002B     		cmp	r3, #0
 1357 0558 03D0     		beq	.L83
 1358              		.loc 1 1034 0 is_stmt 0 discriminator 1
 1359 055a 7B68     		ldr	r3, [r7, #4]
 1360 055c 2033     		adds	r3, r3, #32
 1361 055e 1B68     		ldr	r3, [r3]
 1362 0560 02E0     		b	.L85
 1363              	.L83:
1035:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****            HWREG(ui32Base + GPTIMER_O_RIS));
 1364              		.loc 1 1035 0 is_stmt 1 discriminator 2
 1365 0562 7B68     		ldr	r3, [r7, #4]
 1366 0564 1C33     		adds	r3, r3, #28
1034:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****            HWREG(ui32Base + GPTIMER_O_RIS));
 1367              		.loc 1 1034 0 discriminator 2
 1368 0566 1B68     		ldr	r3, [r3]
 1369              	.L85:
1036:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** }
 1370              		.loc 1 1036 0 discriminator 5
 1371 0568 1846     		mov	r0, r3
 1372 056a 0C37     		adds	r7, r7, #12
 1373              		.cfi_def_cfa_offset 4
 1374 056c BD46     		mov	sp, r7
 1375              		.cfi_def_cfa_register 13
 1376              		@ sp needed
 1377 056e 80BC     		pop	{r7}
 1378              		.cfi_restore 7
 1379              		.cfi_def_cfa_offset 0
 1380 0570 7047     		bx	lr
 1381              		.cfi_endproc
 1382              	.LFE21:
 1384 0572 00BF     		.align	2
 1385              		.global	TimerIntClear
 1386              		.thumb
 1387              		.thumb_func
 1389              	TimerIntClear:
 1390              	.LFB22:
1037:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** 
1038:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //*****************************************************************************
1039:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //
1040:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! Clears timer interrupt sources
1041:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
1042:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \param ui32Base is the base address of the timer module.
1043:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \param ui32IntFlags is a bit mask of the interrupt sources to be cleared.
1044:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
1045:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! The specified timer interrupt sources are cleared, so that they no longer
1046:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! assert.  This function must be called in the interrupt handler to keep the
1047:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! interrupt from being triggered again immediately upon exit.
1048:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
1049:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! The \e ui32IntFlags parameter has the same definition as the \e ui32IntFlags
1050:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! parameter to TimerIntEnable().
1051:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
1052:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \note Because there is a write buffer in the Cortex-M3 processor, it may
1053:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! take several clock cycles before the interrupt source is actually cleared.
1054:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! Therefore, it is recommended that the interrupt source be cleared early in
1055:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! the interrupt handler (as opposed to the very last action) to avoid
1056:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! returning from the interrupt handler before the interrupt source is
1057:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! actually cleared.  Failure to do so may result in the interrupt handler
1058:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! being immediately reentered (because the interrupt controller still sees
1059:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! the interrupt source asserted).
1060:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
1061:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \return None
1062:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //
1063:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //*****************************************************************************
1064:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** void
1065:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** TimerIntClear(uint32_t ui32Base, uint32_t ui32IntFlags)
1066:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** {
 1391              		.loc 1 1066 0
 1392              		.cfi_startproc
 1393              		@ args = 0, pretend = 0, frame = 8
 1394              		@ frame_needed = 1, uses_anonymous_args = 0
 1395              		@ link register save eliminated.
 1396 0574 80B4     		push	{r7}
 1397              		.cfi_def_cfa_offset 4
 1398              		.cfi_offset 7, -4
 1399 0576 83B0     		sub	sp, sp, #12
 1400              		.cfi_def_cfa_offset 16
 1401 0578 00AF     		add	r7, sp, #0
 1402              		.cfi_def_cfa_register 7
 1403 057a 7860     		str	r0, [r7, #4]
 1404 057c 3960     		str	r1, [r7]
1067:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
1068:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     // Check the arguments.
1069:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
1070:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     ASSERT(TimerBaseValid(ui32Base));
1071:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** 
1072:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
1073:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     // Clear the requested interrupt sources.
1074:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
1075:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     HWREG(ui32Base + GPTIMER_O_ICR) = ui32IntFlags;
 1405              		.loc 1 1075 0
 1406 057e 7B68     		ldr	r3, [r7, #4]
 1407 0580 2433     		adds	r3, r3, #36
 1408 0582 1A46     		mov	r2, r3
 1409 0584 3B68     		ldr	r3, [r7]
 1410 0586 1360     		str	r3, [r2]
1076:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** }
 1411              		.loc 1 1076 0
 1412 0588 00BF     		nop
 1413 058a 0C37     		adds	r7, r7, #12
 1414              		.cfi_def_cfa_offset 4
 1415 058c BD46     		mov	sp, r7
 1416              		.cfi_def_cfa_register 13
 1417              		@ sp needed
 1418 058e 80BC     		pop	{r7}
 1419              		.cfi_restore 7
 1420              		.cfi_def_cfa_offset 0
 1421 0590 7047     		bx	lr
 1422              		.cfi_endproc
 1423              	.LFE22:
 1425 0592 00BF     		.align	2
 1426              		.global	TimerSynchronize
 1427              		.thumb
 1428              		.thumb_func
 1430              	TimerSynchronize:
 1431              	.LFB23:
1077:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** 
1078:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //*****************************************************************************
1079:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //
1080:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! Synchronizes the counters in a set of timers
1081:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
1082:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \param ui32Base is the base address of the timer module.  This must be the
1083:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! base address of Timer0 (in other words, \b GPTIMER0_BASE).
1084:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \param ui32Timers is the set of timers to synchronize.
1085:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
1086:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! This function will synchronize the counters in a specified set of timers.
1087:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! When a timer is running in half-width mode, each half can be included or
1088:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! excluded in the synchronization event.  When a timer is running in
1089:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! full-width mode, only the A timer can be synchronized (specifying the B
1090:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! timer has no effect).
1091:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
1092:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! The \e ui32Timers parameter is the logical OR of any of the following
1093:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! defines:
1094:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
1095:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! - \b GPTIMER_0A_SYNC
1096:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! - \b GPTIMER_0B_SYNC
1097:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! - \b GPTIMER_1A_SYNC
1098:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! - \b GPTIMER_1B_SYNC
1099:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! - \b GPTIMER_2A_SYNC
1100:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! - \b GPTIMER_2B_SYNC
1101:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! - \b GPTIMER_3A_SYNC
1102:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! - \b GPTIMER_3B_SYNC
1103:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
1104:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \note This functionality is not available on all parts.
1105:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //!
1106:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //! \return None
1107:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //
1108:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** //*****************************************************************************
1109:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** void
1110:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** TimerSynchronize(uint32_t ui32Base, uint32_t ui32Timers)
1111:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** {
 1432              		.loc 1 1111 0
 1433              		.cfi_startproc
 1434              		@ args = 0, pretend = 0, frame = 8
 1435              		@ frame_needed = 1, uses_anonymous_args = 0
 1436              		@ link register save eliminated.
 1437 0594 80B4     		push	{r7}
 1438              		.cfi_def_cfa_offset 4
 1439              		.cfi_offset 7, -4
 1440 0596 83B0     		sub	sp, sp, #12
 1441              		.cfi_def_cfa_offset 16
 1442 0598 00AF     		add	r7, sp, #0
 1443              		.cfi_def_cfa_register 7
 1444 059a 7860     		str	r0, [r7, #4]
 1445 059c 3960     		str	r1, [r7]
1112:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
1113:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     // Check the arguments.
1114:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
1115:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     ASSERT(ui32Base == GPTIMER0_BASE);
1116:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** 
1117:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
1118:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     // Synchronize the specified timers.
1119:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     //
1120:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c ****     HWREG(ui32Base + GPTIMER_O_SYNC) = ui32Timers;
 1446              		.loc 1 1120 0
 1447 059e 7B68     		ldr	r3, [r7, #4]
 1448 05a0 1033     		adds	r3, r3, #16
 1449 05a2 1A46     		mov	r2, r3
 1450 05a4 3B68     		ldr	r3, [r7]
 1451 05a6 1360     		str	r3, [r2]
1121:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gptimer.c **** }
 1452              		.loc 1 1121 0
 1453 05a8 00BF     		nop
 1454 05aa 0C37     		adds	r7, r7, #12
 1455              		.cfi_def_cfa_offset 4
 1456 05ac BD46     		mov	sp, r7
 1457              		.cfi_def_cfa_register 13
 1458              		@ sp needed
 1459 05ae 80BC     		pop	{r7}
 1460              		.cfi_restore 7
 1461              		.cfi_def_cfa_offset 0
 1462 05b0 7047     		bx	lr
 1463              		.cfi_endproc
 1464              	.LFE23:
 1466              	.Letext0:
 1467              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 1468              		.file 3 "/usr/include/newlib/sys/_stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 gptimer.c
     /tmp/ccc43j8X.s:19     .text:0000000000000000 $t
     /tmp/ccc43j8X.s:24     .text:0000000000000000 TimerEnable
     /tmp/ccc43j8X.s:72     .text:000000000000002c TimerDisable
     /tmp/ccc43j8X.s:120    .text:000000000000005c TimerConfigure
     /tmp/ccc43j8X.s:189    .text:00000000000000b0 TimerControlLevel
     /tmp/ccc43j8X.s:258    .text:00000000000000f8 TimerControlTrigger
     /tmp/ccc43j8X.s:327    .text:0000000000000140 TimerControlEvent
     /tmp/ccc43j8X.s:385    .text:000000000000017c TimerControlStall
     /tmp/ccc43j8X.s:454    .text:00000000000001c4 TimerControlWaitOnTrigger
     /tmp/ccc43j8X.s:552    .text:0000000000000248 TimerPrescaleSet
     /tmp/ccc43j8X.s:612    .text:0000000000000284 TimerPrescaleGet
     /tmp/ccc43j8X.s:663    .text:00000000000002ac TimerPrescaleMatchSet
     /tmp/ccc43j8X.s:723    .text:00000000000002e8 TimerPrescaleMatchGet
     /tmp/ccc43j8X.s:774    .text:0000000000000310 TimerLoadSet
     /tmp/ccc43j8X.s:834    .text:000000000000034c TimerLoadGet
     /tmp/ccc43j8X.s:885    .text:0000000000000374 TimerValueGet
     /tmp/ccc43j8X.s:936    .text:000000000000039c TimerMatchSet
     /tmp/ccc43j8X.s:996    .text:00000000000003d8 TimerMatchGet
     /tmp/ccc43j8X.s:1047   .text:0000000000000400 TimerIntRegister
     /tmp/ccc43j8X.s:1137   .text:0000000000000474 $d
     /tmp/ccc43j8X.s:1143   .text:0000000000000480 $t
     /tmp/ccc43j8X.s:1148   .text:0000000000000480 TimerIntUnregister
     /tmp/ccc43j8X.s:1235   .text:00000000000004ec $d
     /tmp/ccc43j8X.s:1241   .text:00000000000004f8 $t
     /tmp/ccc43j8X.s:1246   .text:00000000000004f8 TimerIntEnable
     /tmp/ccc43j8X.s:1291   .text:0000000000000520 TimerIntDisable
     /tmp/ccc43j8X.s:1337   .text:0000000000000548 TimerIntStatus
     /tmp/ccc43j8X.s:1389   .text:0000000000000574 TimerIntClear
     /tmp/ccc43j8X.s:1430   .text:0000000000000594 TimerSynchronize
                     .debug_frame:0000000000000010 $d
                           .group:0000000000000000 wm4.0.8e445c0106ab795ab4704214cba6f089
                           .group:0000000000000000 wm4.hw_gptimer.h.39.dea6f5e4e2bd4b37e815027f7cf18b04
                           .group:0000000000000000 wm4.hw_ints.h.42.85b9479f2be35b086f1bb7cbb15bc097
                           .group:0000000000000000 wm4.hw_memmap.h.39.19283c377d449c9bca5fdd8ccb62628c
                           .group:0000000000000000 wm4._newlib_version.h.4.ad342815780c8db09778091a421b5b5b
                           .group:0000000000000000 wm4.features.h.33.d97f2d646536517df901beeb5b9993f5
                           .group:0000000000000000 wm4._default_types.h.15.933e8edd27a65e0b69af4a865eb623d2
                           .group:0000000000000000 wm4._intsup.h.10.b82bf99f69d6a5c085fc866de0d3eb9b
                           .group:0000000000000000 wm4._stdint.h.10.7a5f60e6741af4a5594a3867d347e1f9
                           .group:0000000000000000 wm4.stdint.h.23.373a9d32a9e4c2e88fd347156532d281
                           .group:0000000000000000 wm4.stdbool.h.29.07dce69c3b78884144b7f7bd19483461
                           .group:0000000000000000 wm4.hw_types.h.67.b10589a0806dcc2d274d6fab6b736519
                           .group:0000000000000000 wm4.interrupt.h.41.272fc4ec0e276feb439e7974d0f77eaf
                           .group:0000000000000000 wm4.gptimer.h.41.51b4a65e82289454ba49ea8dab75309e

UNDEFINED SYMBOLS
IntRegister
IntEnable
IntDisable
IntUnregister
