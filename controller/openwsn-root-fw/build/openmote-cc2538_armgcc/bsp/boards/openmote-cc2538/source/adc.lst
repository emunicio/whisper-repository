   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"adc.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.align	2
  20              		.global	SOCADCIntRegister
  21              		.thumb
  22              		.thumb_func
  24              	SOCADCIntRegister:
  25              	.LFB0:
  26              		.file 1 "build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c"
   1:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** /******************************************************************************
   2:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** *  Filename:       adc.c
   3:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** *  Revised:        $Date: 2013-03-24 11:41:19 +0100 (Sun, 24 Mar 2013) $
   4:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** *  Revision:       $Revision: 9521 $
   5:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** *
   6:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** *  Description:    Driver for the SOC ADC Module.
   7:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** *
   8:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** *  Copyright (C) 2012 Texas Instruments Incorporated - http://www.ti.com/
   9:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** *
  10:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** *
  11:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** *  Redistribution and use in source and binary forms, with or without
  12:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** *  modification, are permitted provided that the following conditions
  13:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** *  are met:
  14:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** *
  15:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** *    Redistributions of source code must retain the above copyright
  16:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** *    notice, this list of conditions and the following disclaimer.
  17:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** *
  18:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** *    Redistributions in binary form must reproduce the above copyright
  19:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** *    notice, this list of conditions and the following disclaimer in the
  20:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** *    documentation and/or other materials provided with the distribution.
  21:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** *
  22:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** *    Neither the name of Texas Instruments Incorporated nor the names of
  23:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** *    its contributors may be used to endorse or promote products derived
  24:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** *    from this software without specific prior written permission.
  25:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** *
  26:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  27:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  28:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
  29:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
  30:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  31:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  32:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  33:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  34:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  35:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  36:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** *  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  37:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** *
  38:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** ******************************************************************************/
  39:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** 
  40:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //*****************************************************************************
  41:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //
  42:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //! \addtogroup adc_api
  43:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //! @{
  44:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //
  45:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //*****************************************************************************
  46:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** 
  47:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** #include <headers/hw_ints.h>
  48:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** #include <headers/hw_memmap.h>
  49:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** #include <headers/hw_soc_adc.h>
  50:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** #include "debug.h"
  51:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** #include "interrupt.h"
  52:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** #include "adc.h"
  53:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** 
  54:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //*****************************************************************************
  55:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //
  56:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //! Registers an interrupt handler for ADC interrupt
  57:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //!
  58:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //! \param pfnHandler is a pointer to the function called when the
  59:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //! SOC ADC interrupt occurs.
  60:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //!
  61:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //! This function does the actual registering of the interrupt handler, which
  62:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //! enables the global interrupt in the interrupt controller.
  63:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //!
  64:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //! \sa IntRegister() for important information about registering interrupt
  65:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //! handlers.
  66:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //!
  67:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //! \return None
  68:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //
  69:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //*****************************************************************************
  70:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** void
  71:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** SOCADCIntRegister(void (*pfnHandler)(void))
  72:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** {
  27              		.loc 1 72 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 8
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31 0000 80B5     		push	{r7, lr}
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 7, -8
  34              		.cfi_offset 14, -4
  35 0002 82B0     		sub	sp, sp, #8
  36              		.cfi_def_cfa_offset 16
  37 0004 00AF     		add	r7, sp, #0
  38              		.cfi_def_cfa_register 7
  39 0006 7860     		str	r0, [r7, #4]
  73:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c ****     //
  74:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c ****     // Register the interrupt handler.
  75:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c ****     //
  76:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c ****     IntRegister(INT_ADC0, pfnHandler);
  40              		.loc 1 76 0
  41 0008 7968     		ldr	r1, [r7, #4]
  42 000a 1E20     		movs	r0, #30
  43 000c FFF7FEFF 		bl	IntRegister
  77:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** 
  78:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c ****     //
  79:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c ****     // Enable the ADC interrupt.
  80:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c ****     //
  81:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c ****     IntEnable(INT_ADC0);
  44              		.loc 1 81 0
  45 0010 1E20     		movs	r0, #30
  46 0012 FFF7FEFF 		bl	IntEnable
  82:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** }
  47              		.loc 1 82 0
  48 0016 00BF     		nop
  49 0018 0837     		adds	r7, r7, #8
  50              		.cfi_def_cfa_offset 8
  51 001a BD46     		mov	sp, r7
  52              		.cfi_def_cfa_register 13
  53              		@ sp needed
  54 001c 80BD     		pop	{r7, pc}
  55              		.cfi_endproc
  56              	.LFE0:
  58 001e 00BF     		.align	2
  59              		.global	SOCADCIntUnregister
  60              		.thumb
  61              		.thumb_func
  63              	SOCADCIntUnregister:
  64              	.LFB1:
  83:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** 
  84:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //*****************************************************************************
  85:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //
  86:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //! Unregisters an interrupt handler for the ADC interrupt
  87:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //!
  88:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //! This function does the actual unregistering of the interrupt handler. This
  89:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //! function clears the handler to be called when an ADC interrupt occurs
  90:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //! and masks off the interrupt in the interrupt controller so that the
  91:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //! interrupt handler no longer is called.
  92:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //!
  93:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //! \sa IntRegister() for important information about registering interrupt
  94:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //! handlers.
  95:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //!
  96:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //! \return None
  97:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //
  98:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //*****************************************************************************
  99:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** void
 100:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** SOCADCIntUnregister(void)
 101:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** {
  65              		.loc 1 101 0
  66              		.cfi_startproc
  67              		@ args = 0, pretend = 0, frame = 0
  68              		@ frame_needed = 1, uses_anonymous_args = 0
  69 0020 80B5     		push	{r7, lr}
  70              		.cfi_def_cfa_offset 8
  71              		.cfi_offset 7, -8
  72              		.cfi_offset 14, -4
  73 0022 00AF     		add	r7, sp, #0
  74              		.cfi_def_cfa_register 7
 102:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c ****     //
 103:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c ****     // Disable the interrupt.
 104:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c ****     //
 105:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c ****     IntDisable(INT_ADC0);
  75              		.loc 1 105 0
  76 0024 1E20     		movs	r0, #30
  77 0026 FFF7FEFF 		bl	IntDisable
 106:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** 
 107:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c ****     //
 108:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c ****     // Unregister the interrupt handler.
 109:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c ****     //
 110:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c ****     IntUnregister(INT_ADC0);
  78              		.loc 1 110 0
  79 002a 1E20     		movs	r0, #30
  80 002c FFF7FEFF 		bl	IntUnregister
 111:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** }
  81              		.loc 1 111 0
  82 0030 00BF     		nop
  83 0032 80BD     		pop	{r7, pc}
  84              		.cfi_endproc
  85              	.LFE1:
  87              		.align	2
  88              		.global	SOCADCSingleConfigure
  89              		.thumb
  90              		.thumb_func
  92              	SOCADCSingleConfigure:
  93              	.LFB2:
 112:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** 
 113:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //*****************************************************************************
 114:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //
 115:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //! Configure ADC conversion for a single channel
 116:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //!
 117:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //! \param ui32Resolution is the resolution of the conversion.
 118:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //! \param ui32Reference is the reference voltage to be used for the conversion.
 119:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //!
 120:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //! This function configures the ADC for a single channel conversion.
 121:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //! The \e ui32Resolution parameter must be one of:
 122:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //! \b SOCADC_7_BIT, \b SOCADC_9_BIT, \b SOCADC_10_BIT or \b SOCADC_12_BIT.
 123:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //! The reference voltage is set using the \e ui32Reference parameter, which
 124:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //! must be configured as one of the following:
 125:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //! \b SOCADC_REF_INTERNAL  for internal reference,
 126:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //! \b SOCADC_REF_EXT_AIN7  for external reference on pin AIN7 (pad PA7),
 127:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //! \b SOCADC_REF_AVDD5     for external AVDD5 pin,
 128:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //! \b SOCADC_REF_EXT_AIN67 for external reference on differential input pins
 129:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //!  AIN6-AIN7 (Pads PA6-PA7).
 130:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //!
 131:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //! \note A single conversion triggers an interrupt if this has been registered
 132:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //! using SOCADCIntRegister().
 133:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //!
 134:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //! \sa SOCADCSingleStart() and SOCADCIntRegister().
 135:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //!
 136:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //! \return None
 137:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //
 138:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //*****************************************************************************
 139:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** void
 140:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** SOCADCSingleConfigure(uint32_t ui32Resolution, uint32_t ui32Reference)
 141:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** {
  94              		.loc 1 141 0
  95              		.cfi_startproc
  96              		@ args = 0, pretend = 0, frame = 16
  97              		@ frame_needed = 1, uses_anonymous_args = 0
  98              		@ link register save eliminated.
  99 0034 80B4     		push	{r7}
 100              		.cfi_def_cfa_offset 4
 101              		.cfi_offset 7, -4
 102 0036 85B0     		sub	sp, sp, #20
 103              		.cfi_def_cfa_offset 24
 104 0038 00AF     		add	r7, sp, #0
 105              		.cfi_def_cfa_register 7
 106 003a 7860     		str	r0, [r7, #4]
 107 003c 3960     		str	r1, [r7]
 142:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c ****     uint32_t ui32Reg;
 143:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** 
 144:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c ****     //
 145:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c ****     // Check the arguments.
 146:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c ****     //
 147:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c ****     ASSERT((ui32Resolution == SOCADC_7_BIT)  ||
 148:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c ****            (ui32Resolution == SOCADC_9_BIT)  ||
 149:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c ****            (ui32Resolution == SOCADC_10_BIT) ||
 150:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c ****            (ui32Resolution == SOCADC_12_BIT));
 151:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c ****     ASSERT((ui32Reference == SOCADC_REF_INTERNAL) ||
 152:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c ****            (ui32Reference == SOCADC_REF_EXT_AIN7) ||
 153:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c ****            (ui32Reference == SOCADC_REF_AVDD5)    ||
 154:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c ****            (ui32Reference == SOCADC_REF_EXT_AIN67));
 155:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** 
 156:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c ****     //
 157:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c ****     // Stop random generator
 158:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c ****     //
 159:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c ****     HWREG(SOC_ADC_ADCCON1) = 0x3c;
 108              		.loc 1 159 0
 109 003e 0A4B     		ldr	r3, .L4
 110 0040 3C22     		movs	r2, #60
 111 0042 1A60     		str	r2, [r3]
 160:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** 
 161:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c ****     ui32Reg = HWREG(SOC_ADC_ADCCON3) & ~(SOC_ADC_ADCCON3_EREF_M |
 112              		.loc 1 161 0
 113 0044 094B     		ldr	r3, .L4+4
 114 0046 1B68     		ldr	r3, [r3]
 115 0048 23F0F003 		bic	r3, r3, #240
 116 004c FB60     		str	r3, [r7, #12]
 162:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c ****                                          SOC_ADC_ADCCON3_EDIV_M);
 163:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c ****     HWREG(SOC_ADC_ADCCON3) = ui32Reg | ui32Resolution | ui32Reference;
 117              		.loc 1 163 0
 118 004e 0749     		ldr	r1, .L4+4
 119 0050 FA68     		ldr	r2, [r7, #12]
 120 0052 7B68     		ldr	r3, [r7, #4]
 121 0054 1A43     		orrs	r2, r2, r3
 122 0056 3B68     		ldr	r3, [r7]
 123 0058 1343     		orrs	r3, r3, r2
 124 005a 0B60     		str	r3, [r1]
 164:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** }
 125              		.loc 1 164 0
 126 005c 00BF     		nop
 127 005e 1437     		adds	r7, r7, #20
 128              		.cfi_def_cfa_offset 4
 129 0060 BD46     		mov	sp, r7
 130              		.cfi_def_cfa_register 13
 131              		@ sp needed
 132 0062 80BC     		pop	{r7}
 133              		.cfi_restore 7
 134              		.cfi_def_cfa_offset 0
 135 0064 7047     		bx	lr
 136              	.L5:
 137 0066 00BF     		.align	2
 138              	.L4:
 139 0068 00700D40 		.word	1074622464
 140 006c 08700D40 		.word	1074622472
 141              		.cfi_endproc
 142              	.LFE2:
 144              		.align	2
 145              		.global	SOCADCSingleStart
 146              		.thumb
 147              		.thumb_func
 149              	SOCADCSingleStart:
 150              	.LFB3:
 165:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** 
 166:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //*****************************************************************************
 167:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //
 168:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //! Start a configured single conversion
 169:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //!
 170:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //! \param ui32Channel is the input channel to use for the conversion.
 171:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //!
 172:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //! This function initiates a configured single channel conversion.
 173:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //! The input channel is set using the \e ui32Channel parameter.
 174:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //! This parameter must be configured as one of the following values:
 175:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //! \b SOCADC_AIN0       for single ended input Pad PA0
 176:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //! \b SOCADC_AIN1       for single ended input Pad PA1
 177:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //! \b SOCADC_AIN2       for single ended input Pad PA2
 178:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //! \b SOCADC_AIN3       for single ended input Pad PA3
 179:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //! \b SOCADC_AIN4       for single ended input Pad PA4
 180:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //! \b SOCADC_AIN5       for single ended input Pad PA5
 181:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //! \b SOCADC_AIN6       for single ended input Pad PA6
 182:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //! \b SOCADC_AIN7       for single ended input Pad PA7
 183:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //! \b SOCADC_AIN01      for differential Pads PA0-PA1
 184:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //! \b SOCADC_AIN23      for differential Pads PA2-PA3
 185:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //! \b SOCADC_AIN45      for differential Pads PA4-PA5
 186:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //! \b SOCADC_AIN67      for differential Pads PA6-PA7
 187:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //! \b SOCADC_GND        for Ground as input
 188:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //! \b SOCADC_TEMP_SENS  for on-chip temperature sensor
 189:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //! \b SOCADC_VDD        for Vdd/3
 190:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //!
 191:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //! \note A single conversion triggers an interrupt if this has been registered
 192:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //! using SOCADCIntRegister().
 193:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //!
 194:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //! \sa SOCADCSingleConfigure() and SOCADCIntRegister().
 195:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //!
 196:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //! \return None
 197:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //
 198:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //*****************************************************************************
 199:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** void
 200:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** SOCADCSingleStart(uint32_t ui32Channel)
 201:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** {
 151              		.loc 1 201 0
 152              		.cfi_startproc
 153              		@ args = 0, pretend = 0, frame = 16
 154              		@ frame_needed = 1, uses_anonymous_args = 0
 155              		@ link register save eliminated.
 156 0070 80B4     		push	{r7}
 157              		.cfi_def_cfa_offset 4
 158              		.cfi_offset 7, -4
 159 0072 85B0     		sub	sp, sp, #20
 160              		.cfi_def_cfa_offset 24
 161 0074 00AF     		add	r7, sp, #0
 162              		.cfi_def_cfa_register 7
 163 0076 7860     		str	r0, [r7, #4]
 202:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c ****     uint32_t ui32Reg;
 203:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** 
 204:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c ****     //
 205:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c ****     // Check the arguments.
 206:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c ****     //
 207:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c ****     ASSERT((ui32Channel == SOCADC_AIN0)     ||
 208:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c ****            (ui32Channel == SOCADC_AIN1)      ||
 209:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c ****            (ui32Channel == SOCADC_AIN2)      ||
 210:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c ****            (ui32Channel == SOCADC_AIN3)      ||
 211:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c ****            (ui32Channel == SOCADC_AIN4)      ||
 212:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c ****            (ui32Channel == SOCADC_AIN5)      ||
 213:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c ****            (ui32Channel == SOCADC_AIN6)      ||
 214:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c ****            (ui32Channel == SOCADC_AIN7)      ||
 215:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c ****            (ui32Channel == SOCADC_AIN01)     ||
 216:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c ****            (ui32Channel == SOCADC_AIN23)     ||
 217:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c ****            (ui32Channel == SOCADC_AIN45)     ||
 218:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c ****            (ui32Channel == SOCADC_AIN67)     ||
 219:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c ****            (ui32Channel == SOCADC_GND)       ||
 220:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c ****            (ui32Channel == SOCADC_TEMP_SENS) ||
 221:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c ****            (ui32Channel == SOCADC_VDD));
 222:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** 
 223:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c ****     //
 224:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c ****     // Program selected channel, this indirectly starts the conversion
 225:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c ****     //
 226:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c ****     ui32Reg = HWREG(SOC_ADC_ADCCON3) & ~(SOC_ADC_ADCCON3_ECH_M);
 164              		.loc 1 226 0
 165 0078 074B     		ldr	r3, .L7
 166 007a 1B68     		ldr	r3, [r3]
 167 007c 23F00F03 		bic	r3, r3, #15
 168 0080 FB60     		str	r3, [r7, #12]
 227:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c ****     HWREG(SOC_ADC_ADCCON3) = ui32Reg | ui32Channel;
 169              		.loc 1 227 0
 170 0082 0549     		ldr	r1, .L7
 171 0084 FA68     		ldr	r2, [r7, #12]
 172 0086 7B68     		ldr	r3, [r7, #4]
 173 0088 1343     		orrs	r3, r3, r2
 174 008a 0B60     		str	r3, [r1]
 228:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** }
 175              		.loc 1 228 0
 176 008c 00BF     		nop
 177 008e 1437     		adds	r7, r7, #20
 178              		.cfi_def_cfa_offset 4
 179 0090 BD46     		mov	sp, r7
 180              		.cfi_def_cfa_register 13
 181              		@ sp needed
 182 0092 80BC     		pop	{r7}
 183              		.cfi_restore 7
 184              		.cfi_def_cfa_offset 0
 185 0094 7047     		bx	lr
 186              	.L8:
 187 0096 00BF     		.align	2
 188              	.L7:
 189 0098 08700D40 		.word	1074622472
 190              		.cfi_endproc
 191              	.LFE3:
 193              		.align	2
 194              		.global	SOCADCDataGet
 195              		.thumb
 196              		.thumb_func
 198              	SOCADCDataGet:
 199              	.LFB4:
 229:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** 
 230:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //*****************************************************************************
 231:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //
 232:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //! Get data value from conversion
 233:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //!
 234:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //! This function gets the latest conversion data result of the programmed
 235:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //! conversion. The function returns 16 bits of data, but depending on the
 236:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //! programmed precision, only part of the data is significant.
 237:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //! The following defined bit masks can be used to extract the significant data
 238:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //! depending on the decimation rate:
 239:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //!   \b SOCADC_7_BIT_MASK, \b SOCADC_9_BIT_MASK,
 240:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //!   \b SOCADC_10_BIT_MASK and \b SOCADC_12_BIT_MASK
 241:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //!
 242:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //! \sa SOCADCEndOfCOnversionGet().
 243:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //!
 244:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //! \return Data conversion value
 245:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //
 246:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //*****************************************************************************
 247:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** uint16_t
 248:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** SOCADCDataGet(void)
 249:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** {
 200              		.loc 1 249 0
 201              		.cfi_startproc
 202              		@ args = 0, pretend = 0, frame = 8
 203              		@ frame_needed = 1, uses_anonymous_args = 0
 204              		@ link register save eliminated.
 205 009c 80B4     		push	{r7}
 206              		.cfi_def_cfa_offset 4
 207              		.cfi_offset 7, -4
 208 009e 83B0     		sub	sp, sp, #12
 209              		.cfi_def_cfa_offset 16
 210 00a0 00AF     		add	r7, sp, #0
 211              		.cfi_def_cfa_register 7
 250:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c ****     uint32_t ui32Reg;
 251:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** 
 252:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c ****     ui32Reg = HWREG(SOC_ADC_ADCL) & SOC_ADC_ADCL_ADC_M;
 212              		.loc 1 252 0
 213 00a2 094B     		ldr	r3, .L11
 214 00a4 1B68     		ldr	r3, [r3]
 215 00a6 03F0FC03 		and	r3, r3, #252
 216 00aa 7B60     		str	r3, [r7, #4]
 253:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c ****     ui32Reg |= ((HWREG(SOC_ADC_ADCH) & SOC_ADC_ADCH_ADC_M) << 8);
 217              		.loc 1 253 0
 218 00ac 074B     		ldr	r3, .L11+4
 219 00ae 1B68     		ldr	r3, [r3]
 220 00b0 DBB2     		uxtb	r3, r3
 221 00b2 1B02     		lsls	r3, r3, #8
 222 00b4 7A68     		ldr	r2, [r7, #4]
 223 00b6 1343     		orrs	r3, r3, r2
 224 00b8 7B60     		str	r3, [r7, #4]
 254:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** 
 255:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c ****     return ((uint16_t) ui32Reg);
 225              		.loc 1 255 0
 226 00ba 7B68     		ldr	r3, [r7, #4]
 227 00bc 9BB2     		uxth	r3, r3
 256:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** }
 228              		.loc 1 256 0
 229 00be 1846     		mov	r0, r3
 230 00c0 0C37     		adds	r7, r7, #12
 231              		.cfi_def_cfa_offset 4
 232 00c2 BD46     		mov	sp, r7
 233              		.cfi_def_cfa_register 13
 234              		@ sp needed
 235 00c4 80BC     		pop	{r7}
 236              		.cfi_restore 7
 237              		.cfi_def_cfa_offset 0
 238 00c6 7047     		bx	lr
 239              	.L12:
 240              		.align	2
 241              	.L11:
 242 00c8 0C700D40 		.word	1074622476
 243 00cc 10700D40 		.word	1074622480
 244              		.cfi_endproc
 245              	.LFE4:
 247              		.align	2
 248              		.global	SOCADCEndOfCOnversionGet
 249              		.thumb
 250              		.thumb_func
 252              	SOCADCEndOfCOnversionGet:
 253              	.LFB5:
 257:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** 
 258:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //*****************************************************************************
 259:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //
 260:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //! Check if conversion is done
 261:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //!
 262:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //! This function can be used to query the status of the conversion.
 263:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //!
 264:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //! \return true if conversion is done, otherwise false.
 265:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //
 266:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** //*****************************************************************************
 267:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** bool
 268:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** SOCADCEndOfCOnversionGet(void)
 269:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** {
 254              		.loc 1 269 0
 255              		.cfi_startproc
 256              		@ args = 0, pretend = 0, frame = 0
 257              		@ frame_needed = 1, uses_anonymous_args = 0
 258              		@ link register save eliminated.
 259 00d0 80B4     		push	{r7}
 260              		.cfi_def_cfa_offset 4
 261              		.cfi_offset 7, -4
 262 00d2 00AF     		add	r7, sp, #0
 263              		.cfi_def_cfa_register 7
 270:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c ****     return((HWREG(SOC_ADC_ADCCON1) & SOC_ADC_ADCCON1_EOC) ? true : false);
 264              		.loc 1 270 0
 265 00d4 064B     		ldr	r3, .L15
 266 00d6 1B68     		ldr	r3, [r3]
 267 00d8 03F08003 		and	r3, r3, #128
 268 00dc 002B     		cmp	r3, #0
 269 00de 14BF     		ite	ne
 270 00e0 0123     		movne	r3, #1
 271 00e2 0023     		moveq	r3, #0
 272 00e4 DBB2     		uxtb	r3, r3
 271:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/adc.c **** }
 273              		.loc 1 271 0
 274 00e6 1846     		mov	r0, r3
 275 00e8 BD46     		mov	sp, r7
 276              		.cfi_def_cfa_register 13
 277              		@ sp needed
 278 00ea 80BC     		pop	{r7}
 279              		.cfi_restore 7
 280              		.cfi_def_cfa_offset 0
 281 00ec 7047     		bx	lr
 282              	.L16:
 283 00ee 00BF     		.align	2
 284              	.L15:
 285 00f0 00700D40 		.word	1074622464
 286              		.cfi_endproc
 287              	.LFE5:
 289              	.Letext0:
 290              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 291              		.file 3 "/usr/include/newlib/sys/_stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 adc.c
     /tmp/cc5n5N1M.s:19     .text:0000000000000000 $t
     /tmp/cc5n5N1M.s:24     .text:0000000000000000 SOCADCIntRegister
     /tmp/cc5n5N1M.s:63     .text:0000000000000020 SOCADCIntUnregister
     /tmp/cc5n5N1M.s:92     .text:0000000000000034 SOCADCSingleConfigure
     /tmp/cc5n5N1M.s:139    .text:0000000000000068 $d
     /tmp/cc5n5N1M.s:144    .text:0000000000000070 $t
     /tmp/cc5n5N1M.s:149    .text:0000000000000070 SOCADCSingleStart
     /tmp/cc5n5N1M.s:189    .text:0000000000000098 $d
     /tmp/cc5n5N1M.s:193    .text:000000000000009c $t
     /tmp/cc5n5N1M.s:198    .text:000000000000009c SOCADCDataGet
     /tmp/cc5n5N1M.s:242    .text:00000000000000c8 $d
     /tmp/cc5n5N1M.s:247    .text:00000000000000d0 $t
     /tmp/cc5n5N1M.s:252    .text:00000000000000d0 SOCADCEndOfCOnversionGet
     /tmp/cc5n5N1M.s:285    .text:00000000000000f0 $d
                     .debug_frame:0000000000000010 $d
                           .group:0000000000000000 wm4.0.8e445c0106ab795ab4704214cba6f089
                           .group:0000000000000000 wm4.hw_ints.h.42.85b9479f2be35b086f1bb7cbb15bc097
                           .group:0000000000000000 wm4.hw_memmap.h.39.19283c377d449c9bca5fdd8ccb62628c
                           .group:0000000000000000 wm4.hw_soc_adc.h.39.49d9b13af378603af2f404bc5269b2c2
                           .group:0000000000000000 wm4._newlib_version.h.4.ad342815780c8db09778091a421b5b5b
                           .group:0000000000000000 wm4.features.h.33.d97f2d646536517df901beeb5b9993f5
                           .group:0000000000000000 wm4._default_types.h.15.933e8edd27a65e0b69af4a865eb623d2
                           .group:0000000000000000 wm4._intsup.h.10.b82bf99f69d6a5c085fc866de0d3eb9b
                           .group:0000000000000000 wm4._stdint.h.10.7a5f60e6741af4a5594a3867d347e1f9
                           .group:0000000000000000 wm4.stdint.h.23.373a9d32a9e4c2e88fd347156532d281
                           .group:0000000000000000 wm4.stdbool.h.29.07dce69c3b78884144b7f7bd19483461
                           .group:0000000000000000 wm4.hw_types.h.67.b10589a0806dcc2d274d6fab6b736519
                           .group:0000000000000000 wm4.interrupt.h.41.272fc4ec0e276feb439e7974d0f77eaf
                           .group:0000000000000000 wm4.adc.h.41.a9050d8b156af9fced6aa679c9da9963

UNDEFINED SYMBOLS
IntRegister
IntEnable
IntDisable
IntUnregister
