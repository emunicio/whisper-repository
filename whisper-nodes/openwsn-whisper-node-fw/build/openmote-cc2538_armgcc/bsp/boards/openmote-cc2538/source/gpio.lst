   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"gpio.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.align	2
  20              		.global	GPIOGetIntNumber
  21              		.thumb
  22              		.thumb_func
  24              	GPIOGetIntNumber:
  25              	.LFB0:
  26              		.file 1 "build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c"
   1:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** /******************************************************************************
   2:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** *  Filename:       gpio.c
   3:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** *  Revised:        $Date: 2013-04-29 09:36:44 +0200 (Mon, 29 Apr 2013) $
   4:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** *  Revision:       $Revision: 9922 $
   5:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** *
   6:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** *  Description:    Driver for the GPIO controller.
   7:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** *
   8:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** *  Copyright (C) 2012 Texas Instruments Incorporated - http://www.ti.com/
   9:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** *
  10:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** *
  11:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** *  Redistribution and use in source and binary forms, with or without
  12:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** *  modification, are permitted provided that the following conditions
  13:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** *  are met:
  14:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** *
  15:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** *    Redistributions of source code must retain the above copyright
  16:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** *    notice, this list of conditions and the following disclaimer.
  17:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** *
  18:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** *    Redistributions in binary form must reproduce the above copyright
  19:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** *    notice, this list of conditions and the following disclaimer in the
  20:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** *    documentation and/or other materials provided with the distribution.
  21:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** *
  22:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** *    Neither the name of Texas Instruments Incorporated nor the names of
  23:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** *    its contributors may be used to endorse or promote products derived
  24:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** *    from this software without specific prior written permission.
  25:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** *
  26:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  27:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  28:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
  29:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
  30:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  31:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  32:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  33:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  34:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  35:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  36:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** *  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  37:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** *
  38:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** ******************************************************************************/
  39:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
  40:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
  41:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
  42:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \addtogroup gpio_api
  43:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! @{
  44:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
  45:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
  46:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
  47:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** #include <headers/hw_gpio.h>
  48:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** #include <headers/hw_ints.h>
  49:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** #include <headers/hw_memmap.h>
  50:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** #include <headers/hw_sys_ctrl.h>
  51:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** #include "debug.h"
  52:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** #include "gpio.h"
  53:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** #include "interrupt.h"
  54:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** #include "ioc.h"
  55:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
  56:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
  57:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
  58:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \internal
  59:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! Checks a GPIO base address
  60:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
  61:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
  62:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
  63:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! This function determines if a GPIO port base address is valid.
  64:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
  65:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \return Returns \b true if the base address is valid and \b false
  66:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! otherwise.
  67:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
  68:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
  69:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** #ifdef ENABLE_ASSERT
  70:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** static bool
  71:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** GPIOBaseValid(uint32_t ui32Port)
  72:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** {
  73:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     return((ui32Port == GPIO_A_BASE) || (ui32Port == GPIO_B_BASE) ||
  74:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****            (ui32Port == GPIO_C_BASE) || (ui32Port == GPIO_D_BASE));
  75:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** }
  76:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** #endif
  77:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
  78:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
  79:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
  80:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \internal
  81:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! Gets the GPIO interrupt number
  82:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
  83:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
  84:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
  85:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! Given a GPIO base address, returns the corresponding interrupt number.
  86:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
  87:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \return Returns a GPIO interrupt number, or 0 if \e ui32Port is invalid.
  88:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
  89:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
  90:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** uint32_t
  91:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** GPIOGetIntNumber(uint32_t ui32Port)
  92:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** {
  27              		.loc 1 92 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 16
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32 0000 80B4     		push	{r7}
  33              		.cfi_def_cfa_offset 4
  34              		.cfi_offset 7, -4
  35 0002 85B0     		sub	sp, sp, #20
  36              		.cfi_def_cfa_offset 24
  37 0004 00AF     		add	r7, sp, #0
  38              		.cfi_def_cfa_register 7
  39 0006 7860     		str	r0, [r7, #4]
  93:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     uint32_t ui32Int;
  94:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
  95:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
  96:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Check the arguments.
  97:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
  98:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
  99:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 100:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 101:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Determine the GPIO interrupt number for the given module.
 102:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 103:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     switch(ui32Port)
  40              		.loc 1 103 0
  41 0008 7B68     		ldr	r3, [r7, #4]
  42 000a 124A     		ldr	r2, .L10
  43 000c 9342     		cmp	r3, r2
  44 000e 10D0     		beq	.L3
  45 0010 104A     		ldr	r2, .L10
  46 0012 9342     		cmp	r3, r2
  47 0014 03D8     		bhi	.L4
  48 0016 104A     		ldr	r2, .L10+4
  49 0018 9342     		cmp	r3, r2
  50 001a 07D0     		beq	.L5
  51 001c 12E0     		b	.L2
  52              	.L4:
  53 001e 0F4A     		ldr	r2, .L10+8
  54 0020 9342     		cmp	r3, r2
  55 0022 09D0     		beq	.L6
  56 0024 0E4A     		ldr	r2, .L10+12
  57 0026 9342     		cmp	r3, r2
  58 0028 09D0     		beq	.L7
  59 002a 0BE0     		b	.L2
  60              	.L5:
 104:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     {
 105:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     case GPIO_A_BASE:
 106:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     {
 107:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****         ui32Int = INT_GPIOA;
  61              		.loc 1 107 0
  62 002c 1023     		movs	r3, #16
  63 002e FB60     		str	r3, [r7, #12]
 108:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****         break;
  64              		.loc 1 108 0
  65 0030 0AE0     		b	.L8
  66              	.L3:
 109:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     }
 110:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 111:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     case GPIO_B_BASE:
 112:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     {
 113:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****         ui32Int = INT_GPIOB;
  67              		.loc 1 113 0
  68 0032 1123     		movs	r3, #17
  69 0034 FB60     		str	r3, [r7, #12]
 114:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****         break;
  70              		.loc 1 114 0
  71 0036 07E0     		b	.L8
  72              	.L6:
 115:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     }
 116:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 117:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     case GPIO_C_BASE:
 118:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     {
 119:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****         ui32Int = INT_GPIOC;
  73              		.loc 1 119 0
  74 0038 1223     		movs	r3, #18
  75 003a FB60     		str	r3, [r7, #12]
 120:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****         break;
  76              		.loc 1 120 0
  77 003c 04E0     		b	.L8
  78              	.L7:
 121:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     }
 122:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 123:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     case GPIO_D_BASE:
 124:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     {
 125:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****         ui32Int = INT_GPIOD;
  79              		.loc 1 125 0
  80 003e 1323     		movs	r3, #19
  81 0040 FB60     		str	r3, [r7, #12]
 126:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****         break;
  82              		.loc 1 126 0
  83 0042 01E0     		b	.L8
  84              	.L2:
 127:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     }
 128:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 129:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     default:
 130:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     {
 131:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****         return(0);
  85              		.loc 1 131 0
  86 0044 0023     		movs	r3, #0
  87 0046 00E0     		b	.L9
  88              	.L8:
 132:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     }
 133:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     }
 134:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 135:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 136:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Return GPIO interrupt number.
 137:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 138:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     return(ui32Int);
  89              		.loc 1 138 0
  90 0048 FB68     		ldr	r3, [r7, #12]
  91              	.L9:
 139:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** }
  92              		.loc 1 139 0
  93 004a 1846     		mov	r0, r3
  94 004c 1437     		adds	r7, r7, #20
  95              		.cfi_def_cfa_offset 4
  96 004e BD46     		mov	sp, r7
  97              		.cfi_def_cfa_register 13
  98              		@ sp needed
  99 0050 80BC     		pop	{r7}
 100              		.cfi_restore 7
 101              		.cfi_def_cfa_offset 0
 102 0052 7047     		bx	lr
 103              	.L11:
 104              		.align	2
 105              	.L10:
 106 0054 00A00D40 		.word	1074634752
 107 0058 00900D40 		.word	1074630656
 108 005c 00B00D40 		.word	1074638848
 109 0060 00C00D40 		.word	1074642944
 110              		.cfi_endproc
 111              	.LFE0:
 113              		.align	2
 114              		.global	GPIODirModeSet
 115              		.thumb
 116              		.thumb_func
 118              	GPIODirModeSet:
 119              	.LFB1:
 140:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 141:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
 142:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
 143:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! Sets the direction and mode of the specified pin(s)
 144:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 145:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
 146:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui8Pins is the bit-packed representation of the pin(s).
 147:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui32PinIO is the pin direction and/or mode.
 148:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 149:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! This function sets the specified pin(s) on the selected GPIO port
 150:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! as either an input or output under software control or sets the
 151:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! pin to be under hardware control.
 152:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 153:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! The parameter \e ui32PinIO is an enumerated data type that can be one of
 154:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! the following values:
 155:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 156:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! - \b GPIO_DIR_MODE_IN
 157:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! - \b GPIO_DIR_MODE_OUT
 158:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! - \b GPIO_DIR_MODE_HW
 159:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 160:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! where \b GPIO_DIR_MODE_IN specifies that the pin will be programmed as
 161:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! a software controlled input, \b GPIO_DIR_MODE_OUT specifies that the pin
 162:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! will be programmed as a software controlled output, and
 163:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \b GPIO_DIR_MODE_HW specifies that the pin will be placed under
 164:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! hardware control.
 165:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 166:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! The pin(s) are specified using a bit-packed byte, where each bit that is
 167:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! set identifies the pin to be accessed, and where bit 0 of the byte
 168:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! represents GPIO port pin 0, bit 1 represents GPIO port pin 1, and so on.
 169:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 170:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \return None
 171:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
 172:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
 173:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** void
 174:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** GPIODirModeSet(uint32_t ui32Port, uint8_t ui8Pins,
 175:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****                uint32_t ui32PinIO)
 176:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** {
 120              		.loc 1 176 0
 121              		.cfi_startproc
 122              		@ args = 0, pretend = 0, frame = 16
 123              		@ frame_needed = 1, uses_anonymous_args = 0
 124              		@ link register save eliminated.
 125 0064 80B4     		push	{r7}
 126              		.cfi_def_cfa_offset 4
 127              		.cfi_offset 7, -4
 128 0066 85B0     		sub	sp, sp, #20
 129              		.cfi_def_cfa_offset 24
 130 0068 00AF     		add	r7, sp, #0
 131              		.cfi_def_cfa_register 7
 132 006a F860     		str	r0, [r7, #12]
 133 006c 0B46     		mov	r3, r1
 134 006e 7A60     		str	r2, [r7, #4]
 135 0070 FB72     		strb	r3, [r7, #11]
 177:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 178:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 179:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Check the arguments.
 180:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 181:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
 182:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ASSERT((ui32PinIO == GPIO_DIR_MODE_IN) || (ui32PinIO == GPIO_DIR_MODE_OUT) ||
 183:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****            (ui32PinIO == GPIO_DIR_MODE_HW));
 184:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 185:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 186:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Set the pin direction and mode.
 187:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 188:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     HWREG(ui32Port + GPIO_O_DIR)   = ((ui32PinIO & GPIO_DIR_MODE_OUT) ?
 136              		.loc 1 188 0
 137 0072 FB68     		ldr	r3, [r7, #12]
 138 0074 03F58063 		add	r3, r3, #1024
 139 0078 1946     		mov	r1, r3
 140 007a 7B68     		ldr	r3, [r7, #4]
 141 007c 03F00103 		and	r3, r3, #1
 189:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****                                       (HWREG(ui32Port + GPIO_O_DIR) | ui8Pins) :
 142              		.loc 1 189 0
 143 0080 002B     		cmp	r3, #0
 144 0082 06D0     		beq	.L13
 145              		.loc 1 189 0 is_stmt 0 discriminator 1
 146 0084 FB68     		ldr	r3, [r7, #12]
 147 0086 03F58063 		add	r3, r3, #1024
 148 008a 1A68     		ldr	r2, [r3]
 149 008c FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 150 008e 1343     		orrs	r3, r3, r2
 151 0090 06E0     		b	.L14
 152              	.L13:
 190:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****                                       (HWREG(ui32Port + GPIO_O_DIR) & ~(ui8Pins)));
 153              		.loc 1 190 0 is_stmt 1 discriminator 2
 154 0092 FB68     		ldr	r3, [r7, #12]
 155 0094 03F58063 		add	r3, r3, #1024
 156 0098 1B68     		ldr	r3, [r3]
 157 009a FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 158 009c D243     		mvns	r2, r2
 189:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****                                       (HWREG(ui32Port + GPIO_O_DIR) | ui8Pins) :
 159              		.loc 1 189 0 discriminator 2
 160 009e 1340     		ands	r3, r3, r2
 161              	.L14:
 188:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****                                       (HWREG(ui32Port + GPIO_O_DIR) | ui8Pins) :
 162              		.loc 1 188 0
 163 00a0 0B60     		str	r3, [r1]
 191:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     HWREG(ui32Port + GPIO_O_AFSEL) = ((ui32PinIO & GPIO_DIR_MODE_HW) ?
 164              		.loc 1 191 0
 165 00a2 FB68     		ldr	r3, [r7, #12]
 166 00a4 03F58463 		add	r3, r3, #1056
 167 00a8 1946     		mov	r1, r3
 168 00aa 7B68     		ldr	r3, [r7, #4]
 169 00ac 03F00203 		and	r3, r3, #2
 192:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****                                       (HWREG(ui32Port + GPIO_O_AFSEL) | ui8Pins) :
 170              		.loc 1 192 0
 171 00b0 002B     		cmp	r3, #0
 172 00b2 06D0     		beq	.L15
 173              		.loc 1 192 0 is_stmt 0 discriminator 1
 174 00b4 FB68     		ldr	r3, [r7, #12]
 175 00b6 03F58463 		add	r3, r3, #1056
 176 00ba 1A68     		ldr	r2, [r3]
 177 00bc FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 178 00be 1343     		orrs	r3, r3, r2
 179 00c0 06E0     		b	.L16
 180              	.L15:
 193:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****                                       (HWREG(ui32Port + GPIO_O_AFSEL) & ~(ui8Pins)));
 181              		.loc 1 193 0 is_stmt 1 discriminator 2
 182 00c2 FB68     		ldr	r3, [r7, #12]
 183 00c4 03F58463 		add	r3, r3, #1056
 184 00c8 1B68     		ldr	r3, [r3]
 185 00ca FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 186 00cc D243     		mvns	r2, r2
 192:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****                                       (HWREG(ui32Port + GPIO_O_AFSEL) | ui8Pins) :
 187              		.loc 1 192 0 discriminator 2
 188 00ce 1340     		ands	r3, r3, r2
 189              	.L16:
 191:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     HWREG(ui32Port + GPIO_O_AFSEL) = ((ui32PinIO & GPIO_DIR_MODE_HW) ?
 190              		.loc 1 191 0
 191 00d0 0B60     		str	r3, [r1]
 194:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** }
 192              		.loc 1 194 0
 193 00d2 00BF     		nop
 194 00d4 1437     		adds	r7, r7, #20
 195              		.cfi_def_cfa_offset 4
 196 00d6 BD46     		mov	sp, r7
 197              		.cfi_def_cfa_register 13
 198              		@ sp needed
 199 00d8 80BC     		pop	{r7}
 200              		.cfi_restore 7
 201              		.cfi_def_cfa_offset 0
 202 00da 7047     		bx	lr
 203              		.cfi_endproc
 204              	.LFE1:
 206              		.align	2
 207              		.global	GPIODirModeGet
 208              		.thumb
 209              		.thumb_func
 211              	GPIODirModeGet:
 212              	.LFB2:
 195:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 196:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
 197:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
 198:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! Gets the direction and mode of a pin
 199:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 200:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
 201:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui8Pin is the pin number.
 202:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 203:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! This function gets the direction and control mode for a specified pin on
 204:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! the selected GPIO port.  The pin can be configured as either an input or
 205:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! output under software control, or it can be under hardware control.  The
 206:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! type of control and direction are returned as an enumerated data type.
 207:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 208:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \return Returns one of the enumerated data types described for
 209:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! GPIODirModeSet().
 210:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
 211:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
 212:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** uint32_t
 213:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** GPIODirModeGet(uint32_t ui32Port, uint8_t ui8Pin)
 214:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** {
 213              		.loc 1 214 0
 214              		.cfi_startproc
 215              		@ args = 0, pretend = 0, frame = 16
 216              		@ frame_needed = 1, uses_anonymous_args = 0
 217              		@ link register save eliminated.
 218 00dc 80B4     		push	{r7}
 219              		.cfi_def_cfa_offset 4
 220              		.cfi_offset 7, -4
 221 00de 85B0     		sub	sp, sp, #20
 222              		.cfi_def_cfa_offset 24
 223 00e0 00AF     		add	r7, sp, #0
 224              		.cfi_def_cfa_register 7
 225 00e2 7860     		str	r0, [r7, #4]
 226 00e4 0B46     		mov	r3, r1
 227 00e6 FB70     		strb	r3, [r7, #3]
 215:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     uint32_t ui32Dir;
 216:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     uint32_t ui32AFSEL;
 217:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 218:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 219:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Check the arguments.
 220:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 221:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
 222:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ASSERT(ui8Pin < 8);
 223:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 224:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 225:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Convert from a pin number to a bit position.
 226:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 227:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ui8Pin = 1 << ui8Pin;
 228              		.loc 1 227 0
 229 00e8 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 230 00ea 0122     		movs	r2, #1
 231 00ec 02FA03F3 		lsl	r3, r2, r3
 232 00f0 FB70     		strb	r3, [r7, #3]
 228:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 229:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 230:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Return the pin direction and mode.
 231:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 232:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ui32Dir   = HWREG(ui32Port + GPIO_O_DIR);
 233              		.loc 1 232 0
 234 00f2 7B68     		ldr	r3, [r7, #4]
 235 00f4 03F58063 		add	r3, r3, #1024
 236 00f8 1B68     		ldr	r3, [r3]
 237 00fa FB60     		str	r3, [r7, #12]
 233:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ui32AFSEL = HWREG(ui32Port + GPIO_O_AFSEL);
 238              		.loc 1 233 0
 239 00fc 7B68     		ldr	r3, [r7, #4]
 240 00fe 03F58463 		add	r3, r3, #1056
 241 0102 1B68     		ldr	r3, [r3]
 242 0104 BB60     		str	r3, [r7, #8]
 234:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     return(((ui32Dir & ui8Pin) ? GPIO_DIR_MODE_OUT : GPIO_DIR_MODE_IN) |
 243              		.loc 1 234 0
 244 0106 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 245 0108 FB68     		ldr	r3, [r7, #12]
 246 010a 1340     		ands	r3, r3, r2
 247 010c 002B     		cmp	r3, #0
 248 010e 14BF     		ite	ne
 249 0110 0123     		movne	r3, #1
 250 0112 0023     		moveq	r3, #0
 251 0114 DBB2     		uxtb	r3, r3
 252 0116 1946     		mov	r1, r3
 235:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****            ((ui32AFSEL & ui8Pin) ? GPIO_DIR_MODE_HW : GPIO_DIR_MODE_IN));
 253              		.loc 1 235 0
 254 0118 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 255 011a BB68     		ldr	r3, [r7, #8]
 256 011c 1340     		ands	r3, r3, r2
 257 011e 002B     		cmp	r3, #0
 258 0120 01D0     		beq	.L18
 259              		.loc 1 235 0 is_stmt 0 discriminator 1
 260 0122 0223     		movs	r3, #2
 261 0124 00E0     		b	.L19
 262              	.L18:
 263              		.loc 1 235 0 discriminator 2
 264 0126 0023     		movs	r3, #0
 265              	.L19:
 234:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     return(((ui32Dir & ui8Pin) ? GPIO_DIR_MODE_OUT : GPIO_DIR_MODE_IN) |
 266              		.loc 1 234 0 is_stmt 1
 267 0128 0B43     		orrs	r3, r3, r1
 236:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** }
 268              		.loc 1 236 0
 269 012a 1846     		mov	r0, r3
 270 012c 1437     		adds	r7, r7, #20
 271              		.cfi_def_cfa_offset 4
 272 012e BD46     		mov	sp, r7
 273              		.cfi_def_cfa_register 13
 274              		@ sp needed
 275 0130 80BC     		pop	{r7}
 276              		.cfi_restore 7
 277              		.cfi_def_cfa_offset 0
 278 0132 7047     		bx	lr
 279              		.cfi_endproc
 280              	.LFE2:
 282              		.align	2
 283              		.global	GPIOIntTypeSet
 284              		.thumb
 285              		.thumb_func
 287              	GPIOIntTypeSet:
 288              	.LFB3:
 237:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 238:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
 239:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
 240:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! Sets the interrupt type for the specified pin(s)
 241:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 242:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
 243:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui8Pins is the bit-packed representation of the pin(s).
 244:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui32IntType specifies the type of interrupt trigger mechanism.
 245:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 246:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! This function sets up the various interrupt trigger mechanisms for the
 247:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! specified pin(s) on the selected GPIO port.
 248:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 249:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! The parameter \e ui32IntType is an enumerated data type that can be one of
 250:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! the following values:
 251:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 252:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! - \b GPIO_FALLING_EDGE
 253:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! - \b GPIO_RISING_EDGE
 254:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! - \b GPIO_BOTH_EDGES
 255:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! - \b GPIO_LOW_LEVEL
 256:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! - \b GPIO_HIGH_LEVEL
 257:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 258:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! where the different values describe the interrupt detection mechanism
 259:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! (edge or level) and the particular triggering event (falling, rising,
 260:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! or both edges for edge detect, low or high for level detect).
 261:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 262:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! The pin(s) are specified using a bit-packed byte, where each bit that is
 263:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! set identifies the pin to be accessed, and where bit 0 of the byte
 264:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! represents GPIO port pin 0, bit 1 represents GPIO port pin 1, and so on.
 265:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 266:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \note To avoid any spurious interrupts, the user must
 267:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! ensure that the GPIO inputs remain stable for the duration of
 268:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! this function.
 269:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 270:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \return None
 271:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
 272:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
 273:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** void
 274:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** GPIOIntTypeSet(uint32_t ui32Port, uint8_t ui8Pins,
 275:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****                uint32_t ui32IntType)
 276:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** {
 289              		.loc 1 276 0
 290              		.cfi_startproc
 291              		@ args = 0, pretend = 0, frame = 16
 292              		@ frame_needed = 1, uses_anonymous_args = 0
 293              		@ link register save eliminated.
 294 0134 80B4     		push	{r7}
 295              		.cfi_def_cfa_offset 4
 296              		.cfi_offset 7, -4
 297 0136 85B0     		sub	sp, sp, #20
 298              		.cfi_def_cfa_offset 24
 299 0138 00AF     		add	r7, sp, #0
 300              		.cfi_def_cfa_register 7
 301 013a F860     		str	r0, [r7, #12]
 302 013c 0B46     		mov	r3, r1
 303 013e 7A60     		str	r2, [r7, #4]
 304 0140 FB72     		strb	r3, [r7, #11]
 277:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 278:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 279:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Check the arguments.
 280:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 281:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
 282:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ASSERT((ui32IntType == GPIO_FALLING_EDGE) ||
 283:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****            (ui32IntType == GPIO_RISING_EDGE) || (ui32IntType == GPIO_BOTH_EDGES) ||
 284:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****            (ui32IntType == GPIO_LOW_LEVEL)  || (ui32IntType == GPIO_HIGH_LEVEL));
 285:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 286:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 287:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Set the pin interrupt type.
 288:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 289:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     HWREG(ui32Port + GPIO_O_IBE) = ((ui32IntType & 1) ?
 305              		.loc 1 289 0
 306 0142 FB68     		ldr	r3, [r7, #12]
 307 0144 03F58163 		add	r3, r3, #1032
 308 0148 1946     		mov	r1, r3
 309 014a 7B68     		ldr	r3, [r7, #4]
 310 014c 03F00103 		and	r3, r3, #1
 290:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****                                     (HWREG(ui32Port + GPIO_O_IBE) | ui8Pins) :
 311              		.loc 1 290 0
 312 0150 002B     		cmp	r3, #0
 313 0152 06D0     		beq	.L22
 314              		.loc 1 290 0 is_stmt 0 discriminator 1
 315 0154 FB68     		ldr	r3, [r7, #12]
 316 0156 03F58163 		add	r3, r3, #1032
 317 015a 1A68     		ldr	r2, [r3]
 318 015c FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 319 015e 1343     		orrs	r3, r3, r2
 320 0160 06E0     		b	.L23
 321              	.L22:
 291:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****                                     (HWREG(ui32Port + GPIO_O_IBE) & ~(ui8Pins)));
 322              		.loc 1 291 0 is_stmt 1 discriminator 2
 323 0162 FB68     		ldr	r3, [r7, #12]
 324 0164 03F58163 		add	r3, r3, #1032
 325 0168 1B68     		ldr	r3, [r3]
 326 016a FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 327 016c D243     		mvns	r2, r2
 290:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****                                     (HWREG(ui32Port + GPIO_O_IBE) | ui8Pins) :
 328              		.loc 1 290 0 discriminator 2
 329 016e 1340     		ands	r3, r3, r2
 330              	.L23:
 289:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****                                     (HWREG(ui32Port + GPIO_O_IBE) | ui8Pins) :
 331              		.loc 1 289 0
 332 0170 0B60     		str	r3, [r1]
 292:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     HWREG(ui32Port + GPIO_O_IS) = ((ui32IntType & 2) ?
 333              		.loc 1 292 0
 334 0172 FB68     		ldr	r3, [r7, #12]
 335 0174 03F20443 		addw	r3, r3, #1028
 336 0178 1946     		mov	r1, r3
 337 017a 7B68     		ldr	r3, [r7, #4]
 338 017c 03F00203 		and	r3, r3, #2
 293:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****                                    (HWREG(ui32Port + GPIO_O_IS) | ui8Pins) :
 339              		.loc 1 293 0
 340 0180 002B     		cmp	r3, #0
 341 0182 06D0     		beq	.L24
 342              		.loc 1 293 0 is_stmt 0 discriminator 1
 343 0184 FB68     		ldr	r3, [r7, #12]
 344 0186 03F20443 		addw	r3, r3, #1028
 345 018a 1A68     		ldr	r2, [r3]
 346 018c FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 347 018e 1343     		orrs	r3, r3, r2
 348 0190 06E0     		b	.L25
 349              	.L24:
 294:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****                                    (HWREG(ui32Port + GPIO_O_IS) & ~(ui8Pins)));
 350              		.loc 1 294 0 is_stmt 1 discriminator 2
 351 0192 FB68     		ldr	r3, [r7, #12]
 352 0194 03F20443 		addw	r3, r3, #1028
 353 0198 1B68     		ldr	r3, [r3]
 354 019a FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 355 019c D243     		mvns	r2, r2
 293:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****                                    (HWREG(ui32Port + GPIO_O_IS) | ui8Pins) :
 356              		.loc 1 293 0 discriminator 2
 357 019e 1340     		ands	r3, r3, r2
 358              	.L25:
 292:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     HWREG(ui32Port + GPIO_O_IS) = ((ui32IntType & 2) ?
 359              		.loc 1 292 0
 360 01a0 0B60     		str	r3, [r1]
 295:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     HWREG(ui32Port + GPIO_O_IEV) = ((ui32IntType & 4) ?
 361              		.loc 1 295 0
 362 01a2 FB68     		ldr	r3, [r7, #12]
 363 01a4 03F20C43 		addw	r3, r3, #1036
 364 01a8 1946     		mov	r1, r3
 365 01aa 7B68     		ldr	r3, [r7, #4]
 366 01ac 03F00403 		and	r3, r3, #4
 296:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****                                     (HWREG(ui32Port + GPIO_O_IEV) | ui8Pins) :
 367              		.loc 1 296 0
 368 01b0 002B     		cmp	r3, #0
 369 01b2 06D0     		beq	.L26
 370              		.loc 1 296 0 is_stmt 0 discriminator 1
 371 01b4 FB68     		ldr	r3, [r7, #12]
 372 01b6 03F20C43 		addw	r3, r3, #1036
 373 01ba 1A68     		ldr	r2, [r3]
 374 01bc FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 375 01be 1343     		orrs	r3, r3, r2
 376 01c0 06E0     		b	.L27
 377              	.L26:
 297:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****                                     (HWREG(ui32Port + GPIO_O_IEV) & ~(ui8Pins)));
 378              		.loc 1 297 0 is_stmt 1 discriminator 2
 379 01c2 FB68     		ldr	r3, [r7, #12]
 380 01c4 03F20C43 		addw	r3, r3, #1036
 381 01c8 1B68     		ldr	r3, [r3]
 382 01ca FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 383 01cc D243     		mvns	r2, r2
 296:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****                                     (HWREG(ui32Port + GPIO_O_IEV) | ui8Pins) :
 384              		.loc 1 296 0 discriminator 2
 385 01ce 1340     		ands	r3, r3, r2
 386              	.L27:
 295:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     HWREG(ui32Port + GPIO_O_IEV) = ((ui32IntType & 4) ?
 387              		.loc 1 295 0
 388 01d0 0B60     		str	r3, [r1]
 298:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** }
 389              		.loc 1 298 0
 390 01d2 00BF     		nop
 391 01d4 1437     		adds	r7, r7, #20
 392              		.cfi_def_cfa_offset 4
 393 01d6 BD46     		mov	sp, r7
 394              		.cfi_def_cfa_register 13
 395              		@ sp needed
 396 01d8 80BC     		pop	{r7}
 397              		.cfi_restore 7
 398              		.cfi_def_cfa_offset 0
 399 01da 7047     		bx	lr
 400              		.cfi_endproc
 401              	.LFE3:
 403              		.align	2
 404              		.global	GPIOIntTypeGet
 405              		.thumb
 406              		.thumb_func
 408              	GPIOIntTypeGet:
 409              	.LFB4:
 299:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 300:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
 301:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
 302:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! Gets the interrupt type for a pin
 303:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 304:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
 305:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui8Pin is the pin number.
 306:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 307:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! This function gets the interrupt type for a specified pin on the selected
 308:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! GPIO port.  The pin can be configured as a falling edge, rising edge, or
 309:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! both edge detected interrupt, or can be configured as a low level or
 310:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! high level detected interrupt.  The type of interrupt detection mechanism
 311:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! is returned as an enumerated data type.
 312:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 313:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \return Returns one of the enumerated data types described for
 314:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! GPIOIntTypeSet().
 315:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
 316:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
 317:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** uint32_t
 318:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** GPIOIntTypeGet(uint32_t ui32Port, uint8_t ui8Pin)
 319:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** {
 410              		.loc 1 319 0
 411              		.cfi_startproc
 412              		@ args = 0, pretend = 0, frame = 24
 413              		@ frame_needed = 1, uses_anonymous_args = 0
 414              		@ link register save eliminated.
 415 01dc 80B4     		push	{r7}
 416              		.cfi_def_cfa_offset 4
 417              		.cfi_offset 7, -4
 418 01de 87B0     		sub	sp, sp, #28
 419              		.cfi_def_cfa_offset 32
 420 01e0 00AF     		add	r7, sp, #0
 421              		.cfi_def_cfa_register 7
 422 01e2 7860     		str	r0, [r7, #4]
 423 01e4 0B46     		mov	r3, r1
 424 01e6 FB70     		strb	r3, [r7, #3]
 320:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     uint32_t ui32IBE, ui32IS, ui32IEV;
 321:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 322:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 323:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Check the arguments.
 324:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 325:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
 326:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ASSERT(ui8Pin < 8);
 327:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 328:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 329:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Convert from a pin number to a bit position.
 330:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 331:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ui8Pin = 1 << ui8Pin;
 425              		.loc 1 331 0
 426 01e8 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 427 01ea 0122     		movs	r2, #1
 428 01ec 02FA03F3 		lsl	r3, r2, r3
 429 01f0 FB70     		strb	r3, [r7, #3]
 332:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 333:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 334:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Return the pin interrupt type.
 335:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 336:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ui32IBE = HWREG(ui32Port + GPIO_O_IBE);
 430              		.loc 1 336 0
 431 01f2 7B68     		ldr	r3, [r7, #4]
 432 01f4 03F58163 		add	r3, r3, #1032
 433 01f8 1B68     		ldr	r3, [r3]
 434 01fa 7B61     		str	r3, [r7, #20]
 337:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ui32IS  = HWREG(ui32Port + GPIO_O_IS);
 435              		.loc 1 337 0
 436 01fc 7B68     		ldr	r3, [r7, #4]
 437 01fe 03F20443 		addw	r3, r3, #1028
 438 0202 1B68     		ldr	r3, [r3]
 439 0204 3B61     		str	r3, [r7, #16]
 338:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ui32IEV = HWREG(ui32Port + GPIO_O_IEV);
 440              		.loc 1 338 0
 441 0206 7B68     		ldr	r3, [r7, #4]
 442 0208 03F20C43 		addw	r3, r3, #1036
 443 020c 1B68     		ldr	r3, [r3]
 444 020e FB60     		str	r3, [r7, #12]
 339:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     return(((ui32IBE & ui8Pin) ? 1 : 0) | ((ui32IS & ui8Pin) ? 2 : 0) |
 445              		.loc 1 339 0
 446 0210 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 447 0212 7B69     		ldr	r3, [r7, #20]
 448 0214 1340     		ands	r3, r3, r2
 449 0216 002B     		cmp	r3, #0
 450 0218 14BF     		ite	ne
 451 021a 0123     		movne	r3, #1
 452 021c 0023     		moveq	r3, #0
 453 021e DBB2     		uxtb	r3, r3
 454 0220 1946     		mov	r1, r3
 455 0222 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 456 0224 3B69     		ldr	r3, [r7, #16]
 457 0226 1340     		ands	r3, r3, r2
 458 0228 002B     		cmp	r3, #0
 459 022a 01D0     		beq	.L29
 460              		.loc 1 339 0 is_stmt 0 discriminator 1
 461 022c 0223     		movs	r3, #2
 462 022e 00E0     		b	.L30
 463              	.L29:
 464              		.loc 1 339 0 discriminator 2
 465 0230 0023     		movs	r3, #0
 466              	.L30:
 467              		.loc 1 339 0 discriminator 4
 468 0232 41EA0302 		orr	r2, r1, r3
 340:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****            ((ui32IEV & ui8Pin) ? 4 : 0));
 469              		.loc 1 340 0 is_stmt 1 discriminator 4
 470 0236 F978     		ldrb	r1, [r7, #3]	@ zero_extendqisi2
 471 0238 FB68     		ldr	r3, [r7, #12]
 472 023a 0B40     		ands	r3, r3, r1
 473 023c 002B     		cmp	r3, #0
 474 023e 01D0     		beq	.L31
 475              		.loc 1 340 0 is_stmt 0 discriminator 1
 476 0240 0423     		movs	r3, #4
 477 0242 00E0     		b	.L32
 478              	.L31:
 479              		.loc 1 340 0 discriminator 2
 480 0244 0023     		movs	r3, #0
 481              	.L32:
 339:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     return(((ui32IBE & ui8Pin) ? 1 : 0) | ((ui32IS & ui8Pin) ? 2 : 0) |
 482              		.loc 1 339 0 is_stmt 1
 483 0246 1343     		orrs	r3, r3, r2
 341:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** }
 484              		.loc 1 341 0
 485 0248 1846     		mov	r0, r3
 486 024a 1C37     		adds	r7, r7, #28
 487              		.cfi_def_cfa_offset 4
 488 024c BD46     		mov	sp, r7
 489              		.cfi_def_cfa_register 13
 490              		@ sp needed
 491 024e 80BC     		pop	{r7}
 492              		.cfi_restore 7
 493              		.cfi_def_cfa_offset 0
 494 0250 7047     		bx	lr
 495              		.cfi_endproc
 496              	.LFE4:
 498 0252 00BF     		.align	2
 499              		.global	GPIOPinIntEnable
 500              		.thumb
 501              		.thumb_func
 503              	GPIOPinIntEnable:
 504              	.LFB5:
 342:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 343:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
 344:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
 345:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! Enables interrupts for the specified pin(s)
 346:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 347:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
 348:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui8Pins is the bit-packed representation of the pin(s).
 349:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 350:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! Unmasks the interrupt for the specified pin(s).
 351:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 352:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! The pin(s) are specified using a bit-packed byte, where each bit that is
 353:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! set identifies the pin to be accessed, and where bit 0 of the byte
 354:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! represents GPIO port pin 0, bit 1 represents GPIO port pin 1, and so on.
 355:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 356:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \return None
 357:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
 358:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
 359:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** void
 360:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** GPIOPinIntEnable(uint32_t ui32Port, uint8_t ui8Pins)
 361:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** {
 505              		.loc 1 361 0
 506              		.cfi_startproc
 507              		@ args = 0, pretend = 0, frame = 8
 508              		@ frame_needed = 1, uses_anonymous_args = 0
 509              		@ link register save eliminated.
 510 0254 80B4     		push	{r7}
 511              		.cfi_def_cfa_offset 4
 512              		.cfi_offset 7, -4
 513 0256 83B0     		sub	sp, sp, #12
 514              		.cfi_def_cfa_offset 16
 515 0258 00AF     		add	r7, sp, #0
 516              		.cfi_def_cfa_register 7
 517 025a 7860     		str	r0, [r7, #4]
 518 025c 0B46     		mov	r3, r1
 519 025e FB70     		strb	r3, [r7, #3]
 362:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 363:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Check the arguments.
 364:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 365:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
 366:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 367:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 368:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Enable the interrupts.
 369:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 370:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     HWREG(ui32Port + GPIO_O_IE) |= ui8Pins;
 520              		.loc 1 370 0
 521 0260 7B68     		ldr	r3, [r7, #4]
 522 0262 03F58263 		add	r3, r3, #1040
 523 0266 1946     		mov	r1, r3
 524 0268 7B68     		ldr	r3, [r7, #4]
 525 026a 03F58263 		add	r3, r3, #1040
 526 026e 1A68     		ldr	r2, [r3]
 527 0270 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 528 0272 1343     		orrs	r3, r3, r2
 529 0274 0B60     		str	r3, [r1]
 371:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** }
 530              		.loc 1 371 0
 531 0276 00BF     		nop
 532 0278 0C37     		adds	r7, r7, #12
 533              		.cfi_def_cfa_offset 4
 534 027a BD46     		mov	sp, r7
 535              		.cfi_def_cfa_register 13
 536              		@ sp needed
 537 027c 80BC     		pop	{r7}
 538              		.cfi_restore 7
 539              		.cfi_def_cfa_offset 0
 540 027e 7047     		bx	lr
 541              		.cfi_endproc
 542              	.LFE5:
 544              		.align	2
 545              		.global	GPIOPinIntDisable
 546              		.thumb
 547              		.thumb_func
 549              	GPIOPinIntDisable:
 550              	.LFB6:
 372:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 373:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
 374:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
 375:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! Disables interrupts for the specified pin(s)
 376:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 377:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
 378:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui8Pins is the bit-packed representation of the pin(s).
 379:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 380:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! Masks the interrupt for the specified pin(s)
 381:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 382:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! The pin(s) are specified using a bit-packed byte, where each bit that is
 383:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! set identifies the pin to be accessed, and where bit 0 of the byte
 384:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! represents GPIO port pin 0, bit 1 represents GPIO port pin 1, and so on.
 385:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 386:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \return None
 387:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
 388:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
 389:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** void
 390:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** GPIOPinIntDisable(uint32_t ui32Port, uint8_t ui8Pins)
 391:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** {
 551              		.loc 1 391 0
 552              		.cfi_startproc
 553              		@ args = 0, pretend = 0, frame = 8
 554              		@ frame_needed = 1, uses_anonymous_args = 0
 555              		@ link register save eliminated.
 556 0280 80B4     		push	{r7}
 557              		.cfi_def_cfa_offset 4
 558              		.cfi_offset 7, -4
 559 0282 83B0     		sub	sp, sp, #12
 560              		.cfi_def_cfa_offset 16
 561 0284 00AF     		add	r7, sp, #0
 562              		.cfi_def_cfa_register 7
 563 0286 7860     		str	r0, [r7, #4]
 564 0288 0B46     		mov	r3, r1
 565 028a FB70     		strb	r3, [r7, #3]
 392:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 393:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Check the arguments.
 394:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 395:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
 396:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 397:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 398:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Disable the interrupts.
 399:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 400:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     HWREG(ui32Port + GPIO_O_IE) &= ~(ui8Pins);
 566              		.loc 1 400 0
 567 028c 7B68     		ldr	r3, [r7, #4]
 568 028e 03F58263 		add	r3, r3, #1040
 569 0292 1946     		mov	r1, r3
 570 0294 7B68     		ldr	r3, [r7, #4]
 571 0296 03F58263 		add	r3, r3, #1040
 572 029a 1B68     		ldr	r3, [r3]
 573 029c FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 574 029e D243     		mvns	r2, r2
 575 02a0 1340     		ands	r3, r3, r2
 576 02a2 0B60     		str	r3, [r1]
 401:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** }
 577              		.loc 1 401 0
 578 02a4 00BF     		nop
 579 02a6 0C37     		adds	r7, r7, #12
 580              		.cfi_def_cfa_offset 4
 581 02a8 BD46     		mov	sp, r7
 582              		.cfi_def_cfa_register 13
 583              		@ sp needed
 584 02aa 80BC     		pop	{r7}
 585              		.cfi_restore 7
 586              		.cfi_def_cfa_offset 0
 587 02ac 7047     		bx	lr
 588              		.cfi_endproc
 589              	.LFE6:
 591 02ae 00BF     		.align	2
 592              		.global	GPIOPinIntStatus
 593              		.thumb
 594              		.thumb_func
 596              	GPIOPinIntStatus:
 597              	.LFB7:
 402:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 403:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
 404:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
 405:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! Gets interrupt status for the specified GPIO port
 406:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 407:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
 408:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param bMasked specifies whether masked or raw interrupt status is
 409:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! returned.
 410:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 411:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! If \e bMasked is set as \b true, then the masked interrupt status is
 412:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! returned; otherwise, the raw interrupt status is returned.
 413:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 414:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \return Returns a bit-packed byte, where each bit that is set identifies
 415:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! an active masked or raw interrupt, and where bit 0 of the byte
 416:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! represents GPIO port pin 0, bit 1 represents GPIO port pin 1, and so on.
 417:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! Bits 31:8 should be ignored.
 418:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
 419:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
 420:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** uint32_t
 421:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** GPIOPinIntStatus(uint32_t ui32Port, bool bMasked)
 422:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** {
 598              		.loc 1 422 0
 599              		.cfi_startproc
 600              		@ args = 0, pretend = 0, frame = 8
 601              		@ frame_needed = 1, uses_anonymous_args = 0
 602              		@ link register save eliminated.
 603 02b0 80B4     		push	{r7}
 604              		.cfi_def_cfa_offset 4
 605              		.cfi_offset 7, -4
 606 02b2 83B0     		sub	sp, sp, #12
 607              		.cfi_def_cfa_offset 16
 608 02b4 00AF     		add	r7, sp, #0
 609              		.cfi_def_cfa_register 7
 610 02b6 7860     		str	r0, [r7, #4]
 611 02b8 0B46     		mov	r3, r1
 612 02ba FB70     		strb	r3, [r7, #3]
 423:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 424:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Check the arguments.
 425:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 426:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
 427:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 428:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 429:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Return the interrupt status.
 430:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 431:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     if(bMasked)
 613              		.loc 1 431 0
 614 02bc FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 615 02be 002B     		cmp	r3, #0
 616 02c0 04D0     		beq	.L37
 432:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     {
 433:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****         return(HWREG(ui32Port + GPIO_O_MIS));
 617              		.loc 1 433 0
 618 02c2 7B68     		ldr	r3, [r7, #4]
 619 02c4 03F58363 		add	r3, r3, #1048
 620 02c8 1B68     		ldr	r3, [r3]
 621 02ca 03E0     		b	.L38
 622              	.L37:
 434:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     }
 435:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     else
 436:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     {
 437:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****         return(HWREG(ui32Port + GPIO_O_RIS));
 623              		.loc 1 437 0
 624 02cc 7B68     		ldr	r3, [r7, #4]
 625 02ce 03F21443 		addw	r3, r3, #1044
 626 02d2 1B68     		ldr	r3, [r3]
 627              	.L38:
 438:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     }
 439:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** }
 628              		.loc 1 439 0
 629 02d4 1846     		mov	r0, r3
 630 02d6 0C37     		adds	r7, r7, #12
 631              		.cfi_def_cfa_offset 4
 632 02d8 BD46     		mov	sp, r7
 633              		.cfi_def_cfa_register 13
 634              		@ sp needed
 635 02da 80BC     		pop	{r7}
 636              		.cfi_restore 7
 637              		.cfi_def_cfa_offset 0
 638 02dc 7047     		bx	lr
 639              		.cfi_endproc
 640              	.LFE7:
 642 02de 00BF     		.align	2
 643              		.global	GPIOPinIntClear
 644              		.thumb
 645              		.thumb_func
 647              	GPIOPinIntClear:
 648              	.LFB8:
 440:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 441:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
 442:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
 443:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! Clears the interrupt for the specified pin(s)
 444:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 445:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
 446:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui8Pins is the bit-packed representation of the pin(s).
 447:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 448:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! Clears the interrupt for the specified pin(s).
 449:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 450:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! The pin(s) are specified using a bit-packed byte, where each bit that is
 451:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! set identifies the pin to be accessed, and where bit 0 of the byte
 452:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! represents GPIO port pin 0, bit 1 represents GPIO port pin 1, and so on.
 453:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 454:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \note The write buffer in the Cortex-M3 processor can cause the interrupt 
 455:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! source to take several clock cycles before clearing.
 456:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! Therefore, TI recommends clearing the interrupt source early in the 
 457:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! interrupt handler (as opposed to the very last action) to avoid
 458:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! returning from the interrupt handler before the interrupt source is
 459:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! actually cleared.  Failure to clear the interrupt source early can result in
 460:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! the interrupt handler being immediately reentered (because NVIC still sees
 461:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! the interrupt source asserted).
 462:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 463:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \return None
 464:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
 465:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
 466:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** void
 467:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** GPIOPinIntClear(uint32_t ui32Port, uint8_t ui8Pins)
 468:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** {
 649              		.loc 1 468 0
 650              		.cfi_startproc
 651              		@ args = 0, pretend = 0, frame = 8
 652              		@ frame_needed = 1, uses_anonymous_args = 0
 653              		@ link register save eliminated.
 654 02e0 80B4     		push	{r7}
 655              		.cfi_def_cfa_offset 4
 656              		.cfi_offset 7, -4
 657 02e2 83B0     		sub	sp, sp, #12
 658              		.cfi_def_cfa_offset 16
 659 02e4 00AF     		add	r7, sp, #0
 660              		.cfi_def_cfa_register 7
 661 02e6 7860     		str	r0, [r7, #4]
 662 02e8 0B46     		mov	r3, r1
 663 02ea FB70     		strb	r3, [r7, #3]
 469:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 470:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Check the arguments.
 471:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 472:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
 473:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 474:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 475:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Clear the interrupts.
 476:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 477:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     HWREG(ui32Port + GPIO_O_IC) = ui8Pins;
 664              		.loc 1 477 0
 665 02ec 7B68     		ldr	r3, [r7, #4]
 666 02ee 03F21C43 		addw	r3, r3, #1052
 667 02f2 1A46     		mov	r2, r3
 668 02f4 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 669 02f6 1360     		str	r3, [r2]
 478:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** }
 670              		.loc 1 478 0
 671 02f8 00BF     		nop
 672 02fa 0C37     		adds	r7, r7, #12
 673              		.cfi_def_cfa_offset 4
 674 02fc BD46     		mov	sp, r7
 675              		.cfi_def_cfa_register 13
 676              		@ sp needed
 677 02fe 80BC     		pop	{r7}
 678              		.cfi_restore 7
 679              		.cfi_def_cfa_offset 0
 680 0300 7047     		bx	lr
 681              		.cfi_endproc
 682              	.LFE8:
 684 0302 00BF     		.align	2
 685              		.global	GPIOPortIntRegister
 686              		.thumb
 687              		.thumb_func
 689              	GPIOPortIntRegister:
 690              	.LFB9:
 479:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 480:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
 481:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
 482:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! Registers an interrupt handler for a GPIO port
 483:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 484:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
 485:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param pfnHandler is a pointer to the GPIO port interrupt handling
 486:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! function.
 487:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 488:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! This function ensures that the interrupt handler specified by
 489:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \e pfnHandler is called when an interrupt is detected from the selected
 490:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! GPIO port.  This function also enables the corresponding GPIO interrupt
 491:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! in the interrupt controller; individual pin interrupts and interrupt
 492:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! sources must be enabled with GPIOPinIntEnable().
 493:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 494:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \sa IntRegister() for important information about registering interrupt
 495:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! handlers.
 496:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 497:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \return None
 498:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
 499:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
 500:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** void
 501:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** GPIOPortIntRegister(uint32_t ui32Port, void (*pfnHandler)(void))
 502:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** {
 691              		.loc 1 502 0
 692              		.cfi_startproc
 693              		@ args = 0, pretend = 0, frame = 8
 694              		@ frame_needed = 1, uses_anonymous_args = 0
 695 0304 80B5     		push	{r7, lr}
 696              		.cfi_def_cfa_offset 8
 697              		.cfi_offset 7, -8
 698              		.cfi_offset 14, -4
 699 0306 82B0     		sub	sp, sp, #8
 700              		.cfi_def_cfa_offset 16
 701 0308 00AF     		add	r7, sp, #0
 702              		.cfi_def_cfa_register 7
 703 030a 7860     		str	r0, [r7, #4]
 704 030c 3960     		str	r1, [r7]
 503:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 504:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Check the arguments.
 505:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 506:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
 507:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 508:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 509:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Get the interrupt number associated with the specified GPIO.
 510:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 511:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ui32Port = GPIOGetIntNumber(ui32Port);
 705              		.loc 1 511 0
 706 030e 7868     		ldr	r0, [r7, #4]
 707 0310 FFF7FEFF 		bl	GPIOGetIntNumber
 708 0314 7860     		str	r0, [r7, #4]
 512:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 513:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 514:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Register the interrupt handler.
 515:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 516:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     IntRegister(ui32Port, pfnHandler);
 709              		.loc 1 516 0
 710 0316 3968     		ldr	r1, [r7]
 711 0318 7868     		ldr	r0, [r7, #4]
 712 031a FFF7FEFF 		bl	IntRegister
 517:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 518:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 519:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Enable the GPIO interrupt.
 520:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 521:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     IntEnable(ui32Port);
 713              		.loc 1 521 0
 714 031e 7868     		ldr	r0, [r7, #4]
 715 0320 FFF7FEFF 		bl	IntEnable
 522:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** }
 716              		.loc 1 522 0
 717 0324 00BF     		nop
 718 0326 0837     		adds	r7, r7, #8
 719              		.cfi_def_cfa_offset 8
 720 0328 BD46     		mov	sp, r7
 721              		.cfi_def_cfa_register 13
 722              		@ sp needed
 723 032a 80BD     		pop	{r7, pc}
 724              		.cfi_endproc
 725              	.LFE9:
 727              		.align	2
 728              		.global	GPIOPortIntUnregister
 729              		.thumb
 730              		.thumb_func
 732              	GPIOPortIntUnregister:
 733              	.LFB10:
 523:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 524:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
 525:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
 526:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! Removes an interrupt handler for a GPIO port
 527:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 528:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
 529:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 530:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! This function unregisters the interrupt handler for the specified
 531:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! GPIO port.  This function also disables the corresponding
 532:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! GPIO port interrupt in the interrupt controller; individual GPIO interrupts
 533:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! and interrupt sources must be disabled with GPIOPinIntDisable().
 534:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 535:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \sa IntRegister() for important information about registering interrupt
 536:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! handlers.
 537:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 538:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \return None
 539:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
 540:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
 541:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** void
 542:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** GPIOPortIntUnregister(uint32_t ui32Port)
 543:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** {
 734              		.loc 1 543 0
 735              		.cfi_startproc
 736              		@ args = 0, pretend = 0, frame = 8
 737              		@ frame_needed = 1, uses_anonymous_args = 0
 738 032c 80B5     		push	{r7, lr}
 739              		.cfi_def_cfa_offset 8
 740              		.cfi_offset 7, -8
 741              		.cfi_offset 14, -4
 742 032e 82B0     		sub	sp, sp, #8
 743              		.cfi_def_cfa_offset 16
 744 0330 00AF     		add	r7, sp, #0
 745              		.cfi_def_cfa_register 7
 746 0332 7860     		str	r0, [r7, #4]
 544:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 545:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Check the arguments.
 546:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 547:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
 548:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 549:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 550:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Get the interrupt number associated with the specified GPIO.
 551:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 552:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ui32Port = GPIOGetIntNumber(ui32Port);
 747              		.loc 1 552 0
 748 0334 7868     		ldr	r0, [r7, #4]
 749 0336 FFF7FEFF 		bl	GPIOGetIntNumber
 750 033a 7860     		str	r0, [r7, #4]
 553:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 554:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 555:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Disable the GPIO interrupt.
 556:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 557:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     IntDisable(ui32Port);
 751              		.loc 1 557 0
 752 033c 7868     		ldr	r0, [r7, #4]
 753 033e FFF7FEFF 		bl	IntDisable
 558:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 559:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 560:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Unregister the interrupt handler.
 561:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 562:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     IntUnregister(ui32Port);
 754              		.loc 1 562 0
 755 0342 7868     		ldr	r0, [r7, #4]
 756 0344 FFF7FEFF 		bl	IntUnregister
 563:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** }
 757              		.loc 1 563 0
 758 0348 00BF     		nop
 759 034a 0837     		adds	r7, r7, #8
 760              		.cfi_def_cfa_offset 8
 761 034c BD46     		mov	sp, r7
 762              		.cfi_def_cfa_register 13
 763              		@ sp needed
 764 034e 80BD     		pop	{r7, pc}
 765              		.cfi_endproc
 766              	.LFE10:
 768              		.align	2
 769              		.global	GPIOPinRead
 770              		.thumb
 771              		.thumb_func
 773              	GPIOPinRead:
 774              	.LFB11:
 564:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 565:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
 566:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
 567:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! Reads the values present of the specified pin(s)
 568:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 569:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
 570:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui8Pins is the bit-packed representation of the pin(s).
 571:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 572:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! The values at the specified pin(s) are read, as specified by \e ui8Pins.
 573:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! Values are returned for both input and output pin(s), and the value
 574:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! for pin(s) that are not specified by \e ui8Pins are set to 0.
 575:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 576:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! The pin(s) are specified using a bit-packed byte, where each bit that is
 577:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! set identifies the pin to be accessed, and where bit 0 of the byte
 578:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! represents GPIO port pin 0, bit 1 represents GPIO port pin 1, and so on.
 579:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 580:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \return Returns a bit-packed byte providing the state of the specified
 581:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! pin, where bit 0 of the byte represents GPIO port pin 0, bit 1 represents
 582:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! GPIO port pin 1, and so on.  Any bit that is not specified by \e ui8Pins
 583:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! is returned as a 0.  Bits 31:8 should be ignored.
 584:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
 585:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
 586:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** uint32_t
 587:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** GPIOPinRead(uint32_t ui32Port, uint8_t ui8Pins)
 588:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** {
 775              		.loc 1 588 0
 776              		.cfi_startproc
 777              		@ args = 0, pretend = 0, frame = 8
 778              		@ frame_needed = 1, uses_anonymous_args = 0
 779              		@ link register save eliminated.
 780 0350 80B4     		push	{r7}
 781              		.cfi_def_cfa_offset 4
 782              		.cfi_offset 7, -4
 783 0352 83B0     		sub	sp, sp, #12
 784              		.cfi_def_cfa_offset 16
 785 0354 00AF     		add	r7, sp, #0
 786              		.cfi_def_cfa_register 7
 787 0356 7860     		str	r0, [r7, #4]
 788 0358 0B46     		mov	r3, r1
 789 035a FB70     		strb	r3, [r7, #3]
 589:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 590:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Check the arguments.
 591:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 592:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
 593:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 594:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 595:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Return the pin value(s).
 596:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 597:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     return(HWREG(ui32Port + (GPIO_O_DATA + (ui8Pins << 2))));
 790              		.loc 1 597 0
 791 035c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 792 035e 9B00     		lsls	r3, r3, #2
 793 0360 1A46     		mov	r2, r3
 794 0362 7B68     		ldr	r3, [r7, #4]
 795 0364 1344     		add	r3, r3, r2
 796 0366 1B68     		ldr	r3, [r3]
 598:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** }
 797              		.loc 1 598 0
 798 0368 1846     		mov	r0, r3
 799 036a 0C37     		adds	r7, r7, #12
 800              		.cfi_def_cfa_offset 4
 801 036c BD46     		mov	sp, r7
 802              		.cfi_def_cfa_register 13
 803              		@ sp needed
 804 036e 80BC     		pop	{r7}
 805              		.cfi_restore 7
 806              		.cfi_def_cfa_offset 0
 807 0370 7047     		bx	lr
 808              		.cfi_endproc
 809              	.LFE11:
 811 0372 00BF     		.align	2
 812              		.global	GPIOPinWrite
 813              		.thumb
 814              		.thumb_func
 816              	GPIOPinWrite:
 817              	.LFB12:
 599:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 600:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
 601:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
 602:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! Writes a value to the specified pin(s)
 603:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 604:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
 605:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui8Pins is the bit-packed representation of the pin(s).
 606:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui8Val is the value to write to the pin(s).
 607:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 608:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! Writes the corresponding bit values to the output pin(s) specified by
 609:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \e ui8Pins.  Writing to a pin configured as an input pin has no effect.
 610:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 611:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! The pin(s) are specified using a bit-packed byte, where each bit that is
 612:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! set identifies the pin to be accessed, and where bit 0 of the byte
 613:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! represents GPIO port pin 0, bit 1 represents GPIO port pin 1, and so on.
 614:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 615:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \return None
 616:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
 617:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
 618:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** void
 619:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** GPIOPinWrite(uint32_t ui32Port, uint8_t ui8Pins, uint8_t ui8Val)
 620:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** {
 818              		.loc 1 620 0
 819              		.cfi_startproc
 820              		@ args = 0, pretend = 0, frame = 8
 821              		@ frame_needed = 1, uses_anonymous_args = 0
 822              		@ link register save eliminated.
 823 0374 80B4     		push	{r7}
 824              		.cfi_def_cfa_offset 4
 825              		.cfi_offset 7, -4
 826 0376 83B0     		sub	sp, sp, #12
 827              		.cfi_def_cfa_offset 16
 828 0378 00AF     		add	r7, sp, #0
 829              		.cfi_def_cfa_register 7
 830 037a 7860     		str	r0, [r7, #4]
 831 037c 0B46     		mov	r3, r1
 832 037e FB70     		strb	r3, [r7, #3]
 833 0380 1346     		mov	r3, r2
 834 0382 BB70     		strb	r3, [r7, #2]
 621:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 622:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Check the arguments.
 623:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 624:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
 625:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 626:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 627:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Write the pins.
 628:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 629:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     HWREG(ui32Port + (GPIO_O_DATA + (ui8Pins << 2))) = ui8Val;
 835              		.loc 1 629 0
 836 0384 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 837 0386 9B00     		lsls	r3, r3, #2
 838 0388 1A46     		mov	r2, r3
 839 038a 7B68     		ldr	r3, [r7, #4]
 840 038c 1344     		add	r3, r3, r2
 841 038e 1A46     		mov	r2, r3
 842 0390 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 843 0392 1360     		str	r3, [r2]
 630:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** }
 844              		.loc 1 630 0
 845 0394 00BF     		nop
 846 0396 0C37     		adds	r7, r7, #12
 847              		.cfi_def_cfa_offset 4
 848 0398 BD46     		mov	sp, r7
 849              		.cfi_def_cfa_register 13
 850              		@ sp needed
 851 039a 80BC     		pop	{r7}
 852              		.cfi_restore 7
 853              		.cfi_def_cfa_offset 0
 854 039c 7047     		bx	lr
 855              		.cfi_endproc
 856              	.LFE12:
 858 039e 00BF     		.align	2
 859              		.global	GPIOPinTypeGPIOInput
 860              		.thumb
 861              		.thumb_func
 863              	GPIOPinTypeGPIOInput:
 864              	.LFB13:
 631:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 632:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
 633:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
 634:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! Configures pin(s) for use as GPIO inputs
 635:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 636:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
 637:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui8Pins is the bit-packed representation of the pin(s).
 638:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 639:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! The GPIO pins must be properly configured in order to function correctly as
 640:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! GPIO inputs.  This function provides the proper configuration for those
 641:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! pin(s).
 642:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 643:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! The pin(s) are specified using a bit-packed byte, where each bit that is
 644:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! set identifies the pin to be accessed, and where bit 0 of the byte
 645:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! represents GPIO port pin 0, bit 1 represents GPIO port pin 1, and so on.
 646:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 647:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \return None
 648:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
 649:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
 650:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** void
 651:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** GPIOPinTypeGPIOInput(uint32_t ui32Port, uint8_t ui8Pins)
 652:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** {
 865              		.loc 1 652 0
 866              		.cfi_startproc
 867              		@ args = 0, pretend = 0, frame = 8
 868              		@ frame_needed = 1, uses_anonymous_args = 0
 869 03a0 80B5     		push	{r7, lr}
 870              		.cfi_def_cfa_offset 8
 871              		.cfi_offset 7, -8
 872              		.cfi_offset 14, -4
 873 03a2 82B0     		sub	sp, sp, #8
 874              		.cfi_def_cfa_offset 16
 875 03a4 00AF     		add	r7, sp, #0
 876              		.cfi_def_cfa_register 7
 877 03a6 7860     		str	r0, [r7, #4]
 878 03a8 0B46     		mov	r3, r1
 879 03aa FB70     		strb	r3, [r7, #3]
 653:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 654:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Check the arguments.
 655:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 656:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
 657:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 658:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 659:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Make the pin(s) be inputs.
 660:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 661:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     GPIODirModeSet(ui32Port, ui8Pins, GPIO_DIR_MODE_IN);
 880              		.loc 1 661 0
 881 03ac FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 882 03ae 0022     		movs	r2, #0
 883 03b0 1946     		mov	r1, r3
 884 03b2 7868     		ldr	r0, [r7, #4]
 885 03b4 FFF7FEFF 		bl	GPIODirModeSet
 662:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 663:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 664:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Set the pad(s) to no override of the drive type.
 665:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 666:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     IOCPadConfigSet(ui32Port, ui8Pins, IOC_OVERRIDE_DIS);
 886              		.loc 1 666 0
 887 03b8 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 888 03ba 0022     		movs	r2, #0
 889 03bc 1946     		mov	r1, r3
 890 03be 7868     		ldr	r0, [r7, #4]
 891 03c0 FFF7FEFF 		bl	IOCPadConfigSet
 667:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** }
 892              		.loc 1 667 0
 893 03c4 00BF     		nop
 894 03c6 0837     		adds	r7, r7, #8
 895              		.cfi_def_cfa_offset 8
 896 03c8 BD46     		mov	sp, r7
 897              		.cfi_def_cfa_register 13
 898              		@ sp needed
 899 03ca 80BD     		pop	{r7, pc}
 900              		.cfi_endproc
 901              	.LFE13:
 903              		.align	2
 904              		.global	GPIOPinTypeGPIOOutput
 905              		.thumb
 906              		.thumb_func
 908              	GPIOPinTypeGPIOOutput:
 909              	.LFB14:
 668:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 669:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
 670:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
 671:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! Configures pin(s) for use as GPIO outputs
 672:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 673:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
 674:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui8Pins is the bit-packed representation of the pin(s).
 675:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 676:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! The GPIO pins must be properly configured to function correctly as
 677:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! GPIO outputs.  This function provides the proper configuration for those
 678:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! pin(s).
 679:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 680:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! The pin(s) are specified using a bit-packed byte, where each bit that is
 681:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! set identifies the pin to be accessed, and where bit 0 of the byte
 682:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! represents GPIO port pin 0, bit 1 represents GPIO port pin 1, and so on.
 683:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 684:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \return None
 685:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
 686:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
 687:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** void
 688:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** GPIOPinTypeGPIOOutput(uint32_t ui32Port, uint8_t ui8Pins)
 689:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** {
 910              		.loc 1 689 0
 911              		.cfi_startproc
 912              		@ args = 0, pretend = 0, frame = 8
 913              		@ frame_needed = 1, uses_anonymous_args = 0
 914 03cc 80B5     		push	{r7, lr}
 915              		.cfi_def_cfa_offset 8
 916              		.cfi_offset 7, -8
 917              		.cfi_offset 14, -4
 918 03ce 82B0     		sub	sp, sp, #8
 919              		.cfi_def_cfa_offset 16
 920 03d0 00AF     		add	r7, sp, #0
 921              		.cfi_def_cfa_register 7
 922 03d2 7860     		str	r0, [r7, #4]
 923 03d4 0B46     		mov	r3, r1
 924 03d6 FB70     		strb	r3, [r7, #3]
 690:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 691:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Check the arguments.
 692:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 693:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
 694:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 695:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 696:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Make the pin(s) be outputs.
 697:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 698:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     GPIODirModeSet(ui32Port, ui8Pins, GPIO_DIR_MODE_OUT);
 925              		.loc 1 698 0
 926 03d8 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 927 03da 0122     		movs	r2, #1
 928 03dc 1946     		mov	r1, r3
 929 03de 7868     		ldr	r0, [r7, #4]
 930 03e0 FFF7FEFF 		bl	GPIODirModeSet
 699:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 700:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 701:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Set the pad(s) no override of the drive type.
 702:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 703:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     IOCPadConfigSet(ui32Port, ui8Pins, IOC_OVERRIDE_DIS);
 931              		.loc 1 703 0
 932 03e4 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 933 03e6 0022     		movs	r2, #0
 934 03e8 1946     		mov	r1, r3
 935 03ea 7868     		ldr	r0, [r7, #4]
 936 03ec FFF7FEFF 		bl	IOCPadConfigSet
 704:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** }
 937              		.loc 1 704 0
 938 03f0 00BF     		nop
 939 03f2 0837     		adds	r7, r7, #8
 940              		.cfi_def_cfa_offset 8
 941 03f4 BD46     		mov	sp, r7
 942              		.cfi_def_cfa_register 13
 943              		@ sp needed
 944 03f6 80BD     		pop	{r7, pc}
 945              		.cfi_endproc
 946              	.LFE14:
 948              		.align	2
 949              		.global	GPIOPinTypeI2C
 950              		.thumb
 951              		.thumb_func
 953              	GPIOPinTypeI2C:
 954              	.LFB15:
 705:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 706:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
 707:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
 708:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! Configures pin(s) for use by the I2C peripheral
 709:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 710:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
 711:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui8Pins is the bit-packed representation of the pin(s).
 712:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 713:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! The I2C pins must be properly configured for the I2C peripheral to function
 714:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! correctly.  This function provides the proper configuration for those
 715:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! pin(s).
 716:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 717:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! The pin(s) are specified using a bit-packed byte, where each bit that is
 718:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! set identifies the pin to be accessed, and where bit 0 of the byte
 719:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! represents GPIO port pin 0, bit 1 represents GPIO port pin 1, and so on.
 720:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 721:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \note This function cannot be used to turn any pin into an I2C pin; it only
 722:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! configures an I2C pin for proper operation.
 723:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 724:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \return None
 725:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
 726:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
 727:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** void
 728:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** GPIOPinTypeI2C(uint32_t ui32Port, uint8_t ui8Pins)
 729:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** {
 955              		.loc 1 729 0
 956              		.cfi_startproc
 957              		@ args = 0, pretend = 0, frame = 8
 958              		@ frame_needed = 1, uses_anonymous_args = 0
 959 03f8 80B5     		push	{r7, lr}
 960              		.cfi_def_cfa_offset 8
 961              		.cfi_offset 7, -8
 962              		.cfi_offset 14, -4
 963 03fa 82B0     		sub	sp, sp, #8
 964              		.cfi_def_cfa_offset 16
 965 03fc 00AF     		add	r7, sp, #0
 966              		.cfi_def_cfa_register 7
 967 03fe 7860     		str	r0, [r7, #4]
 968 0400 0B46     		mov	r3, r1
 969 0402 FB70     		strb	r3, [r7, #3]
 730:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 731:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Check the arguments.
 732:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 733:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
 734:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 735:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 736:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Make the pin(s) be peripheral controlled.
 737:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 738:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     GPIODirModeSet(ui32Port, ui8Pins, GPIO_DIR_MODE_HW);
 970              		.loc 1 738 0
 971 0404 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 972 0406 0222     		movs	r2, #2
 973 0408 1946     		mov	r1, r3
 974 040a 7868     		ldr	r0, [r7, #4]
 975 040c FFF7FEFF 		bl	GPIODirModeSet
 739:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 740:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 741:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Set the pad(s) to no drive type.
 742:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 743:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     IOCPadConfigSet(ui32Port, ui8Pins, IOC_OVERRIDE_DIS);
 976              		.loc 1 743 0
 977 0410 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 978 0412 0022     		movs	r2, #0
 979 0414 1946     		mov	r1, r3
 980 0416 7868     		ldr	r0, [r7, #4]
 981 0418 FFF7FEFF 		bl	IOCPadConfigSet
 744:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** }
 982              		.loc 1 744 0
 983 041c 00BF     		nop
 984 041e 0837     		adds	r7, r7, #8
 985              		.cfi_def_cfa_offset 8
 986 0420 BD46     		mov	sp, r7
 987              		.cfi_def_cfa_register 13
 988              		@ sp needed
 989 0422 80BD     		pop	{r7, pc}
 990              		.cfi_endproc
 991              	.LFE15:
 993              		.align	2
 994              		.global	GPIOPinTypeSSI
 995              		.thumb
 996              		.thumb_func
 998              	GPIOPinTypeSSI:
 999              	.LFB16:
 745:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 746:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
 747:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
 748:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! Configures pin(s) for use by the SSI peripheral
 749:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 750:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
 751:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui8Pins is the bit-packed representation of the pin(s).
 752:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 753:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! The SSI pins must be properly configured for the SSI peripheral to function
 754:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! correctly.  This function provides a typical configuration for those
 755:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! pin(s); other configurations might work as well depending upon the board
 756:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! setup (for example, using the on-chip pull-ups).
 757:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 758:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! The pin(s) are specified using a bit-packed byte, where each bit that is
 759:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! set identifies the pin to be accessed, and where bit 0 of the byte
 760:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! represents GPIO port pin 0, bit 1 represents GPIO port pin 1, and so on.
 761:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 762:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \note This function cannot be used to turn any pin into a SSI pin; but only
 763:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! configures an SSI pin for proper operation.
 764:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 765:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \return None
 766:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
 767:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
 768:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** void
 769:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** GPIOPinTypeSSI(uint32_t ui32Port, uint8_t ui8Pins)
 770:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** {
 1000              		.loc 1 770 0
 1001              		.cfi_startproc
 1002              		@ args = 0, pretend = 0, frame = 8
 1003              		@ frame_needed = 1, uses_anonymous_args = 0
 1004 0424 80B5     		push	{r7, lr}
 1005              		.cfi_def_cfa_offset 8
 1006              		.cfi_offset 7, -8
 1007              		.cfi_offset 14, -4
 1008 0426 82B0     		sub	sp, sp, #8
 1009              		.cfi_def_cfa_offset 16
 1010 0428 00AF     		add	r7, sp, #0
 1011              		.cfi_def_cfa_register 7
 1012 042a 7860     		str	r0, [r7, #4]
 1013 042c 0B46     		mov	r3, r1
 1014 042e FB70     		strb	r3, [r7, #3]
 771:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 772:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Check the arguments.
 773:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 774:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
 775:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 776:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 777:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Make the pin(s) be peripheral controlled.
 778:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 779:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     GPIODirModeSet(ui32Port, ui8Pins, GPIO_DIR_MODE_HW);
 1015              		.loc 1 779 0
 1016 0430 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1017 0432 0222     		movs	r2, #2
 1018 0434 1946     		mov	r1, r3
 1019 0436 7868     		ldr	r0, [r7, #4]
 1020 0438 FFF7FEFF 		bl	GPIODirModeSet
 780:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 781:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 782:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Set the pad(s) to no drive type.
 783:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 784:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     IOCPadConfigSet(ui32Port, ui8Pins, IOC_OVERRIDE_DIS);
 1021              		.loc 1 784 0
 1022 043c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1023 043e 0022     		movs	r2, #0
 1024 0440 1946     		mov	r1, r3
 1025 0442 7868     		ldr	r0, [r7, #4]
 1026 0444 FFF7FEFF 		bl	IOCPadConfigSet
 785:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** }
 1027              		.loc 1 785 0
 1028 0448 00BF     		nop
 1029 044a 0837     		adds	r7, r7, #8
 1030              		.cfi_def_cfa_offset 8
 1031 044c BD46     		mov	sp, r7
 1032              		.cfi_def_cfa_register 13
 1033              		@ sp needed
 1034 044e 80BD     		pop	{r7, pc}
 1035              		.cfi_endproc
 1036              	.LFE16:
 1038              		.align	2
 1039              		.global	GPIOPinTypeTimer
 1040              		.thumb
 1041              		.thumb_func
 1043              	GPIOPinTypeTimer:
 1044              	.LFB17:
 786:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 787:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
 788:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
 789:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! Configures pin(s) for use by the Timer peripheral
 790:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 791:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
 792:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui8Pins is the bit-packed representation of the pin(s).
 793:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 794:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! The CCP pins must be properly configured for the timer peripheral to
 795:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! function correctly.  This function provides a typical configuration for
 796:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! those pin(s); other configurations might work as well depending upon the
 797:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! board setup (for example, using the on-chip pull-ups).
 798:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 799:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! The pin(s) are specified using a bit-packed byte, where each bit that is
 800:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! set identifies the pin to be accessed, and where bit 0 of the byte
 801:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! represents GPIO port pin 0, bit 1 represents GPIO port pin 1, and so on.
 802:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 803:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \note This function cannot be used to turn any pin into a timer pin but only
 804:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! configures a timer pin for proper operation.
 805:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 806:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \return None
 807:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
 808:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
 809:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** void
 810:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** GPIOPinTypeTimer(uint32_t ui32Port, uint8_t ui8Pins)
 811:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** {
 1045              		.loc 1 811 0
 1046              		.cfi_startproc
 1047              		@ args = 0, pretend = 0, frame = 8
 1048              		@ frame_needed = 1, uses_anonymous_args = 0
 1049 0450 80B5     		push	{r7, lr}
 1050              		.cfi_def_cfa_offset 8
 1051              		.cfi_offset 7, -8
 1052              		.cfi_offset 14, -4
 1053 0452 82B0     		sub	sp, sp, #8
 1054              		.cfi_def_cfa_offset 16
 1055 0454 00AF     		add	r7, sp, #0
 1056              		.cfi_def_cfa_register 7
 1057 0456 7860     		str	r0, [r7, #4]
 1058 0458 0B46     		mov	r3, r1
 1059 045a FB70     		strb	r3, [r7, #3]
 812:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 813:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Check the arguments.
 814:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 815:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
 816:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 817:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 818:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Make the pin(s) be peripheral controlled.
 819:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 820:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     GPIODirModeSet(ui32Port, ui8Pins, GPIO_DIR_MODE_HW);
 1060              		.loc 1 820 0
 1061 045c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1062 045e 0222     		movs	r2, #2
 1063 0460 1946     		mov	r1, r3
 1064 0462 7868     		ldr	r0, [r7, #4]
 1065 0464 FFF7FEFF 		bl	GPIODirModeSet
 821:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 822:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 823:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Set the pad(s) to no drive type.
 824:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 825:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     IOCPadConfigSet(ui32Port, ui8Pins, IOC_OVERRIDE_DIS);
 1066              		.loc 1 825 0
 1067 0468 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1068 046a 0022     		movs	r2, #0
 1069 046c 1946     		mov	r1, r3
 1070 046e 7868     		ldr	r0, [r7, #4]
 1071 0470 FFF7FEFF 		bl	IOCPadConfigSet
 826:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** }
 1072              		.loc 1 826 0
 1073 0474 00BF     		nop
 1074 0476 0837     		adds	r7, r7, #8
 1075              		.cfi_def_cfa_offset 8
 1076 0478 BD46     		mov	sp, r7
 1077              		.cfi_def_cfa_register 13
 1078              		@ sp needed
 1079 047a 80BD     		pop	{r7, pc}
 1080              		.cfi_endproc
 1081              	.LFE17:
 1083              		.align	2
 1084              		.global	GPIOPinTypeUARTInput
 1085              		.thumb
 1086              		.thumb_func
 1088              	GPIOPinTypeUARTInput:
 1089              	.LFB18:
 827:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 828:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
 829:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
 830:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! Configures input pin(s) for use by the UART peripheral
 831:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 832:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
 833:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui8Pins is the bit-packed representation of the pin(s).
 834:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 835:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! The UART input pins must be properly configured for the UART peripheral to
 836:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! function correctly.  This function provides a typical configuration for
 837:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! those pin(s); other configurations might work as well depending upon the
 838:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! board setup (for example, using the on-chip pull-ups).
 839:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 840:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \note For PC0 through PC3 the function GPIOPinTypeUARTHiDrive() should
 841:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! be used to configure these high drive pins.
 842:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 843:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! The pin(s) are specified using a bit-packed byte, where each bit that is
 844:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! set identifies the pin to be accessed, and where bit 0 of the byte
 845:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! represents GPIO port pin 0, bit 1 represents GPIO port pin 1, and so on.
 846:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 847:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \note This function cannot be used to turn any pin into a UART pin; but only
 848:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! configures a UART pin for proper operation.
 849:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 850:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \return None
 851:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
 852:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
 853:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** void
 854:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** GPIOPinTypeUARTInput(uint32_t ui32Port, uint8_t ui8Pins)
 855:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** {
 1090              		.loc 1 855 0
 1091              		.cfi_startproc
 1092              		@ args = 0, pretend = 0, frame = 8
 1093              		@ frame_needed = 1, uses_anonymous_args = 0
 1094 047c 80B5     		push	{r7, lr}
 1095              		.cfi_def_cfa_offset 8
 1096              		.cfi_offset 7, -8
 1097              		.cfi_offset 14, -4
 1098 047e 82B0     		sub	sp, sp, #8
 1099              		.cfi_def_cfa_offset 16
 1100 0480 00AF     		add	r7, sp, #0
 1101              		.cfi_def_cfa_register 7
 1102 0482 7860     		str	r0, [r7, #4]
 1103 0484 0B46     		mov	r3, r1
 1104 0486 FB70     		strb	r3, [r7, #3]
 856:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 857:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Check the arguments.
 858:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 859:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
 860:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ASSERT(!((ui32Port == GPIO_C_BASE) && ((ui8Pins & 0xf) > 0)));
 861:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 862:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 863:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Make the pin(s) be peripheral controlled.
 864:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 865:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     GPIODirModeSet(ui32Port, ui8Pins, GPIO_DIR_MODE_HW);
 1105              		.loc 1 865 0
 1106 0488 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1107 048a 0222     		movs	r2, #2
 1108 048c 1946     		mov	r1, r3
 1109 048e 7868     		ldr	r0, [r7, #4]
 1110 0490 FFF7FEFF 		bl	GPIODirModeSet
 866:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 867:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 868:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Set the pad(s) to override disable.
 869:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 870:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     IOCPadConfigSet(ui32Port, ui8Pins, IOC_OVERRIDE_DIS);
 1111              		.loc 1 870 0
 1112 0494 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1113 0496 0022     		movs	r2, #0
 1114 0498 1946     		mov	r1, r3
 1115 049a 7868     		ldr	r0, [r7, #4]
 1116 049c FFF7FEFF 		bl	IOCPadConfigSet
 871:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** }
 1117              		.loc 1 871 0
 1118 04a0 00BF     		nop
 1119 04a2 0837     		adds	r7, r7, #8
 1120              		.cfi_def_cfa_offset 8
 1121 04a4 BD46     		mov	sp, r7
 1122              		.cfi_def_cfa_register 13
 1123              		@ sp needed
 1124 04a6 80BD     		pop	{r7, pc}
 1125              		.cfi_endproc
 1126              	.LFE18:
 1128              		.align	2
 1129              		.global	GPIOPinTypeUARTOutput
 1130              		.thumb
 1131              		.thumb_func
 1133              	GPIOPinTypeUARTOutput:
 1134              	.LFB19:
 872:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 873:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
 874:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
 875:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! Configures output pin(s) for use by the UART peripheral
 876:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 877:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
 878:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui8Pins is the bit-packed representation of the pin(s).
 879:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 880:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! The UART output pins must be properly configured for the UART peripheral to
 881:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! function correctly.  This function provides a typical configuration for
 882:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! those pin(s); other configurations might work as well depending upon the
 883:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! board setup (for example, using the on-chip pull-ups).
 884:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 885:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! The pin(s) are specified using a bit-packed byte, where each bit that is
 886:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! set identifies the pin to be accessed, and where bit 0 of the byte
 887:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! represents GPIO port pin 0, bit 1 represents GPIO port pin 1, and so on.
 888:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 889:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \note This function cannot be used to turn any pin into a UART pin; but only
 890:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! configures a UART pin for proper operation.
 891:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 892:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \return None
 893:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
 894:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
 895:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** void
 896:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** GPIOPinTypeUARTOutput(uint32_t ui32Port, uint8_t ui8Pins)
 897:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** {
 1135              		.loc 1 897 0
 1136              		.cfi_startproc
 1137              		@ args = 0, pretend = 0, frame = 8
 1138              		@ frame_needed = 1, uses_anonymous_args = 0
 1139 04a8 80B5     		push	{r7, lr}
 1140              		.cfi_def_cfa_offset 8
 1141              		.cfi_offset 7, -8
 1142              		.cfi_offset 14, -4
 1143 04aa 82B0     		sub	sp, sp, #8
 1144              		.cfi_def_cfa_offset 16
 1145 04ac 00AF     		add	r7, sp, #0
 1146              		.cfi_def_cfa_register 7
 1147 04ae 7860     		str	r0, [r7, #4]
 1148 04b0 0B46     		mov	r3, r1
 1149 04b2 FB70     		strb	r3, [r7, #3]
 898:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 899:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Check the arguments.
 900:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 901:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
 902:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ASSERT(!((ui32Port == GPIO_C_BASE) && ((ui8Pins & 0xf) > 0)));
 903:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 904:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 905:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Make the pin(s) be peripheral controlled.
 906:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 907:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     GPIODirModeSet(ui32Port, ui8Pins, GPIO_DIR_MODE_HW);
 1150              		.loc 1 907 0
 1151 04b4 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1152 04b6 0222     		movs	r2, #2
 1153 04b8 1946     		mov	r1, r3
 1154 04ba 7868     		ldr	r0, [r7, #4]
 1155 04bc FFF7FEFF 		bl	GPIODirModeSet
 908:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 909:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 910:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Set the pad(s) to output enable.
 911:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 912:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     IOCPadConfigSet(ui32Port, ui8Pins, IOC_OVERRIDE_OE);
 1156              		.loc 1 912 0
 1157 04c0 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1158 04c2 0822     		movs	r2, #8
 1159 04c4 1946     		mov	r1, r3
 1160 04c6 7868     		ldr	r0, [r7, #4]
 1161 04c8 FFF7FEFF 		bl	IOCPadConfigSet
 913:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** }
 1162              		.loc 1 913 0
 1163 04cc 00BF     		nop
 1164 04ce 0837     		adds	r7, r7, #8
 1165              		.cfi_def_cfa_offset 8
 1166 04d0 BD46     		mov	sp, r7
 1167              		.cfi_def_cfa_register 13
 1168              		@ sp needed
 1169 04d2 80BD     		pop	{r7, pc}
 1170              		.cfi_endproc
 1171              	.LFE19:
 1173              		.align	2
 1174              		.global	GPIOPowIntTypeSet
 1175              		.thumb
 1176              		.thumb_func
 1178              	GPIOPowIntTypeSet:
 1179              	.LFB20:
 914:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 915:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
 916:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
 917:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! Sets the power-up interrupt type for the specified pin(s)
 918:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 919:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
 920:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui8Pins is the bit-packed representation of the pin(s).
 921:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui32IntType specifies type of power-up interrupt trigger mechanism.
 922:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 923:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! This function sets up the various interrupt trigger mechanisms for the
 924:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! specified pin(s) on the selected GPIO port.
 925:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 926:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! The parameter \e ui32IntType is an enumerated data type that can be one of
 927:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! the following values:
 928:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 929:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! - \b GPIO_POW_FALLING_EDGE
 930:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! - \b GPIO_POW_RISING_EDGE
 931:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 932:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! The pin(s) are specified using a bit-packed byte, where each bit that is
 933:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! set identifies the pin to be accessed, and where bit 0 of the byte
 934:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! represents GPIO port pin 0, bit 1 represents GPIO port pin 1, and so on.
 935:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 936:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \note To avoid any spurious interrupts, the user must
 937:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! ensure that the GPIO inputs remain stable for the duration of
 938:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! this function.
 939:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
 940:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \return None
 941:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
 942:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
 943:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** void
 944:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** GPIOPowIntTypeSet(uint32_t ui32Port, uint8_t ui8Pins,
 945:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****                   uint32_t ui32IntType)
 946:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** {
 1180              		.loc 1 946 0
 1181              		.cfi_startproc
 1182              		@ args = 0, pretend = 0, frame = 24
 1183              		@ frame_needed = 1, uses_anonymous_args = 0
 1184              		@ link register save eliminated.
 1185 04d4 80B4     		push	{r7}
 1186              		.cfi_def_cfa_offset 4
 1187              		.cfi_offset 7, -4
 1188 04d6 87B0     		sub	sp, sp, #28
 1189              		.cfi_def_cfa_offset 32
 1190 04d8 00AF     		add	r7, sp, #0
 1191              		.cfi_def_cfa_register 7
 1192 04da F860     		str	r0, [r7, #12]
 1193 04dc 0B46     		mov	r3, r1
 1194 04de 7A60     		str	r2, [r7, #4]
 1195 04e0 FB72     		strb	r3, [r7, #11]
 947:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     uint32_t ui32PortOffset;
 948:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     uint32_t ui32IntPins;
 949:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 950:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 951:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Initialize value
 952:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 953:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ui32PortOffset = 0;
 1196              		.loc 1 953 0
 1197 04e2 0023     		movs	r3, #0
 1198 04e4 7B61     		str	r3, [r7, #20]
 954:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 955:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 956:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Check the arguments.
 957:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 958:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
 959:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ASSERT((ui32IntType == GPIO_POW_FALLING_EDGE) ||
 960:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****            (ui32IntType == GPIO_POW_RISING_EDGE));
 961:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 962:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 963:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Find bit mask for wanted pin(s)
 964:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 965:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     if(ui32Port == GPIO_A_BASE)
 1199              		.loc 1 965 0
 1200 04e6 FB68     		ldr	r3, [r7, #12]
 1201 04e8 1D4A     		ldr	r2, .L60
 1202 04ea 9342     		cmp	r3, r2
 1203 04ec 01D1     		bne	.L53
 966:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     {
 967:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****         ui32PortOffset = 0;
 1204              		.loc 1 967 0
 1205 04ee 0023     		movs	r3, #0
 1206 04f0 7B61     		str	r3, [r7, #20]
 1207              	.L53:
 968:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     }
 969:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     if(ui32Port == GPIO_B_BASE)
 1208              		.loc 1 969 0
 1209 04f2 FB68     		ldr	r3, [r7, #12]
 1210 04f4 1B4A     		ldr	r2, .L60+4
 1211 04f6 9342     		cmp	r3, r2
 1212 04f8 01D1     		bne	.L54
 970:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     {
 971:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****         ui32PortOffset = 8;
 1213              		.loc 1 971 0
 1214 04fa 0823     		movs	r3, #8
 1215 04fc 7B61     		str	r3, [r7, #20]
 1216              	.L54:
 972:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     }
 973:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     if(ui32Port == GPIO_C_BASE)
 1217              		.loc 1 973 0
 1218 04fe FB68     		ldr	r3, [r7, #12]
 1219 0500 194A     		ldr	r2, .L60+8
 1220 0502 9342     		cmp	r3, r2
 1221 0504 01D1     		bne	.L55
 974:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     {
 975:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****         ui32PortOffset = 16;
 1222              		.loc 1 975 0
 1223 0506 1023     		movs	r3, #16
 1224 0508 7B61     		str	r3, [r7, #20]
 1225              	.L55:
 976:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     }
 977:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     if(ui32Port == GPIO_D_BASE)
 1226              		.loc 1 977 0
 1227 050a FB68     		ldr	r3, [r7, #12]
 1228 050c 174A     		ldr	r2, .L60+12
 1229 050e 9342     		cmp	r3, r2
 1230 0510 01D1     		bne	.L56
 978:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     {
 979:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****         ui32PortOffset = 24;
 1231              		.loc 1 979 0
 1232 0512 1823     		movs	r3, #24
 1233 0514 7B61     		str	r3, [r7, #20]
 1234              	.L56:
 980:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     }
 981:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ui32IntPins = ui8Pins << ui32PortOffset;
 1235              		.loc 1 981 0
 1236 0516 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 1237 0518 7B69     		ldr	r3, [r7, #20]
 1238 051a 02FA03F3 		lsl	r3, r2, r3
 1239 051e 3B61     		str	r3, [r7, #16]
 982:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 983:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 984:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Set the pin interrupt type.
 985:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
 986:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     if(ui32IntType == GPIO_POW_FALLING_EDGE)
 1240              		.loc 1 986 0
 1241 0520 7B68     		ldr	r3, [r7, #4]
 1242 0522 012B     		cmp	r3, #1
 1243 0524 0BD1     		bne	.L57
 987:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     {
 988:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****         HWREG(ui32Port + GPIO_O_P_EDGE_CTRL) |= ui32IntPins;
 1244              		.loc 1 988 0
 1245 0526 FB68     		ldr	r3, [r7, #12]
 1246 0528 03F20473 		addw	r3, r3, #1796
 1247 052c 1946     		mov	r1, r3
 1248 052e FB68     		ldr	r3, [r7, #12]
 1249 0530 03F20473 		addw	r3, r3, #1796
 1250 0534 1A68     		ldr	r2, [r3]
 1251 0536 3B69     		ldr	r3, [r7, #16]
 1252 0538 1343     		orrs	r3, r3, r2
 1253 053a 0B60     		str	r3, [r1]
 989:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     }
 990:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     else  // GPIO_POW_RAISING_EDGE
 991:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     {
 992:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****         HWREG(ui32Port + GPIO_O_P_EDGE_CTRL) &= ~(ui32IntPins);
 993:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     }
 994:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** }
 1254              		.loc 1 994 0
 1255 053c 0BE0     		b	.L59
 1256              	.L57:
 992:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     }
 1257              		.loc 1 992 0
 1258 053e FB68     		ldr	r3, [r7, #12]
 1259 0540 03F20473 		addw	r3, r3, #1796
 1260 0544 1946     		mov	r1, r3
 1261 0546 FB68     		ldr	r3, [r7, #12]
 1262 0548 03F20473 		addw	r3, r3, #1796
 1263 054c 1A68     		ldr	r2, [r3]
 1264 054e 3B69     		ldr	r3, [r7, #16]
 1265 0550 DB43     		mvns	r3, r3
 1266 0552 1340     		ands	r3, r3, r2
 1267 0554 0B60     		str	r3, [r1]
 1268              	.L59:
 1269              		.loc 1 994 0
 1270 0556 00BF     		nop
 1271 0558 1C37     		adds	r7, r7, #28
 1272              		.cfi_def_cfa_offset 4
 1273 055a BD46     		mov	sp, r7
 1274              		.cfi_def_cfa_register 13
 1275              		@ sp needed
 1276 055c 80BC     		pop	{r7}
 1277              		.cfi_restore 7
 1278              		.cfi_def_cfa_offset 0
 1279 055e 7047     		bx	lr
 1280              	.L61:
 1281              		.align	2
 1282              	.L60:
 1283 0560 00900D40 		.word	1074630656
 1284 0564 00A00D40 		.word	1074634752
 1285 0568 00B00D40 		.word	1074638848
 1286 056c 00C00D40 		.word	1074642944
 1287              		.cfi_endproc
 1288              	.LFE20:
 1290              		.align	2
 1291              		.global	GPIOPowIntTypeGet
 1292              		.thumb
 1293              		.thumb_func
 1295              	GPIOPowIntTypeGet:
 1296              	.LFB21:
 995:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
 996:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
 997:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
 998:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! Gets the power-up interrupt type for a pin
 999:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
1000:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
1001:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui8Pin is the pin number.
1002:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
1003:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! This function gets the interrupt type for a specified pin on the selected
1004:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! GPIO port.  The pin can be configured as a falling edge, rising edge, or
1005:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! both edge detected interrupt, or it can be configured as a low level or
1006:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! high level detected interrupt.  The type of interrupt detection mechanism
1007:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! is returned as an enumerated data type.
1008:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
1009:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \return Returns one of the enumerated data types described for
1010:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! GPIOIntTypeSet().
1011:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
1012:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
1013:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** uint32_t
1014:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** GPIOPowIntTypeGet(uint32_t ui32Port, uint8_t ui8Pin)
1015:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** {
 1297              		.loc 1 1015 0
 1298              		.cfi_startproc
 1299              		@ args = 0, pretend = 0, frame = 16
 1300              		@ frame_needed = 1, uses_anonymous_args = 0
 1301              		@ link register save eliminated.
 1302 0570 80B4     		push	{r7}
 1303              		.cfi_def_cfa_offset 4
 1304              		.cfi_offset 7, -4
 1305 0572 85B0     		sub	sp, sp, #20
 1306              		.cfi_def_cfa_offset 24
 1307 0574 00AF     		add	r7, sp, #0
 1308              		.cfi_def_cfa_register 7
 1309 0576 7860     		str	r0, [r7, #4]
 1310 0578 0B46     		mov	r3, r1
 1311 057a FB70     		strb	r3, [r7, #3]
1016:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     uint32_t ui32PortOffset;
1017:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     uint32_t ui32IntPin;
1018:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
1019:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
1020:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Initialize value
1021:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
1022:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ui32PortOffset = 0;
 1312              		.loc 1 1022 0
 1313 057c 0023     		movs	r3, #0
 1314 057e FB60     		str	r3, [r7, #12]
1023:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
1024:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
1025:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Check the arguments.
1026:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
1027:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
1028:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ASSERT(ui8Pin < 8);
1029:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
1030:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
1031:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Convert from a port- pin number to a bit position.
1032:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
1033:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     if(ui32Port == GPIO_A_BASE)
 1315              		.loc 1 1033 0
 1316 0580 7B68     		ldr	r3, [r7, #4]
 1317 0582 174A     		ldr	r2, .L69
 1318 0584 9342     		cmp	r3, r2
 1319 0586 01D1     		bne	.L63
1034:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     {
1035:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****         ui32PortOffset = 0;
 1320              		.loc 1 1035 0
 1321 0588 0023     		movs	r3, #0
 1322 058a FB60     		str	r3, [r7, #12]
 1323              	.L63:
1036:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     }
1037:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     if(ui32Port == GPIO_B_BASE)
 1324              		.loc 1 1037 0
 1325 058c 7B68     		ldr	r3, [r7, #4]
 1326 058e 154A     		ldr	r2, .L69+4
 1327 0590 9342     		cmp	r3, r2
 1328 0592 01D1     		bne	.L64
1038:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     {
1039:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****         ui32PortOffset = 8;
 1329              		.loc 1 1039 0
 1330 0594 0823     		movs	r3, #8
 1331 0596 FB60     		str	r3, [r7, #12]
 1332              	.L64:
1040:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     }
1041:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     if(ui32Port == GPIO_C_BASE)
 1333              		.loc 1 1041 0
 1334 0598 7B68     		ldr	r3, [r7, #4]
 1335 059a 134A     		ldr	r2, .L69+8
 1336 059c 9342     		cmp	r3, r2
 1337 059e 01D1     		bne	.L65
1042:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     {
1043:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****         ui32PortOffset = 16;
 1338              		.loc 1 1043 0
 1339 05a0 1023     		movs	r3, #16
 1340 05a2 FB60     		str	r3, [r7, #12]
 1341              	.L65:
1044:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     }
1045:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     if(ui32Port == GPIO_D_BASE)
 1342              		.loc 1 1045 0
 1343 05a4 7B68     		ldr	r3, [r7, #4]
 1344 05a6 114A     		ldr	r2, .L69+12
 1345 05a8 9342     		cmp	r3, r2
 1346 05aa 01D1     		bne	.L66
1046:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     {
1047:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****         ui32PortOffset = 24;
 1347              		.loc 1 1047 0
 1348 05ac 1823     		movs	r3, #24
 1349 05ae FB60     		str	r3, [r7, #12]
 1350              	.L66:
1048:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     }
1049:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ui32IntPin = 1 << (ui8Pin + ui32PortOffset);
 1351              		.loc 1 1049 0
 1352 05b0 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 1353 05b2 FB68     		ldr	r3, [r7, #12]
 1354 05b4 1344     		add	r3, r3, r2
 1355 05b6 0122     		movs	r2, #1
 1356 05b8 02FA03F3 		lsl	r3, r2, r3
 1357 05bc BB60     		str	r3, [r7, #8]
1050:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
1051:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
1052:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Return the pin interrupt type.
1053:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
1054:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     if(HWREG(ui32Port + GPIO_O_P_EDGE_CTRL) & ui32IntPin)
 1358              		.loc 1 1054 0
 1359 05be 7B68     		ldr	r3, [r7, #4]
 1360 05c0 03F20473 		addw	r3, r3, #1796
 1361 05c4 1A68     		ldr	r2, [r3]
 1362 05c6 BB68     		ldr	r3, [r7, #8]
 1363 05c8 1340     		ands	r3, r3, r2
 1364 05ca 002B     		cmp	r3, #0
 1365 05cc 01D0     		beq	.L67
1055:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     {
1056:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****         return(GPIO_POW_FALLING_EDGE);
 1366              		.loc 1 1056 0
 1367 05ce 0123     		movs	r3, #1
 1368 05d0 00E0     		b	.L68
 1369              	.L67:
1057:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     }
1058:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     else
1059:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     {
1060:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****         return(GPIO_POW_RISING_EDGE);
 1370              		.loc 1 1060 0
 1371 05d2 0023     		movs	r3, #0
 1372              	.L68:
1061:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     }
1062:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** }
 1373              		.loc 1 1062 0
 1374 05d4 1846     		mov	r0, r3
 1375 05d6 1437     		adds	r7, r7, #20
 1376              		.cfi_def_cfa_offset 4
 1377 05d8 BD46     		mov	sp, r7
 1378              		.cfi_def_cfa_register 13
 1379              		@ sp needed
 1380 05da 80BC     		pop	{r7}
 1381              		.cfi_restore 7
 1382              		.cfi_def_cfa_offset 0
 1383 05dc 7047     		bx	lr
 1384              	.L70:
 1385 05de 00BF     		.align	2
 1386              	.L69:
 1387 05e0 00900D40 		.word	1074630656
 1388 05e4 00A00D40 		.word	1074634752
 1389 05e8 00B00D40 		.word	1074638848
 1390 05ec 00C00D40 		.word	1074642944
 1391              		.cfi_endproc
 1392              	.LFE21:
 1394              		.align	2
 1395              		.global	GPIOPowIntEnable
 1396              		.thumb
 1397              		.thumb_func
 1399              	GPIOPowIntEnable:
 1400              	.LFB22:
1063:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
1064:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
1065:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
1066:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! Enables power-up interrupts for the specified pin(s)
1067:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
1068:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
1069:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui8Pins is the bit-packed representation of the pin(s).
1070:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
1071:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! Unmasks the interrupt for the specified pin(s).
1072:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
1073:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! The pin(s) are specified using a bit-packed byte, where each bit that is
1074:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! set identifies the pin to be accessed, and where bit 0 of the byte
1075:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! represents GPIO port pin 0, bit 1 represents GPIO port pin 1, and so on.
1076:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
1077:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \return None
1078:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
1079:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
1080:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** void
1081:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** GPIOPowIntEnable(uint32_t ui32Port, uint8_t ui8Pins)
1082:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** {
 1401              		.loc 1 1082 0
 1402              		.cfi_startproc
 1403              		@ args = 0, pretend = 0, frame = 16
 1404              		@ frame_needed = 1, uses_anonymous_args = 0
 1405              		@ link register save eliminated.
 1406 05f0 80B4     		push	{r7}
 1407              		.cfi_def_cfa_offset 4
 1408              		.cfi_offset 7, -4
 1409 05f2 85B0     		sub	sp, sp, #20
 1410              		.cfi_def_cfa_offset 24
 1411 05f4 00AF     		add	r7, sp, #0
 1412              		.cfi_def_cfa_register 7
 1413 05f6 7860     		str	r0, [r7, #4]
 1414 05f8 0B46     		mov	r3, r1
 1415 05fa FB70     		strb	r3, [r7, #3]
1083:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     uint32_t ui32PortOffset;
1084:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     uint32_t ui32IntPins;
1085:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
1086:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
1087:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Initialize value
1088:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
1089:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ui32PortOffset = 0;
 1416              		.loc 1 1089 0
 1417 05fc 0023     		movs	r3, #0
 1418 05fe FB60     		str	r3, [r7, #12]
1090:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
1091:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
1092:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Check the arguments.
1093:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
1094:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
1095:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
1096:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
1097:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Find bit mask for wanted pin(s)
1098:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
1099:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     if(ui32Port == GPIO_A_BASE)
 1419              		.loc 1 1099 0
 1420 0600 7B68     		ldr	r3, [r7, #4]
 1421 0602 164A     		ldr	r2, .L76
 1422 0604 9342     		cmp	r3, r2
 1423 0606 01D1     		bne	.L72
1100:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     {
1101:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****         ui32PortOffset = 0;
 1424              		.loc 1 1101 0
 1425 0608 0023     		movs	r3, #0
 1426 060a FB60     		str	r3, [r7, #12]
 1427              	.L72:
1102:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     }
1103:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     if(ui32Port == GPIO_B_BASE)
 1428              		.loc 1 1103 0
 1429 060c 7B68     		ldr	r3, [r7, #4]
 1430 060e 144A     		ldr	r2, .L76+4
 1431 0610 9342     		cmp	r3, r2
 1432 0612 01D1     		bne	.L73
1104:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     {
1105:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****         ui32PortOffset = 8;
 1433              		.loc 1 1105 0
 1434 0614 0823     		movs	r3, #8
 1435 0616 FB60     		str	r3, [r7, #12]
 1436              	.L73:
1106:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     }
1107:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     if(ui32Port == GPIO_C_BASE)
 1437              		.loc 1 1107 0
 1438 0618 7B68     		ldr	r3, [r7, #4]
 1439 061a 124A     		ldr	r2, .L76+8
 1440 061c 9342     		cmp	r3, r2
 1441 061e 01D1     		bne	.L74
1108:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     {
1109:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****         ui32PortOffset = 16;
 1442              		.loc 1 1109 0
 1443 0620 1023     		movs	r3, #16
 1444 0622 FB60     		str	r3, [r7, #12]
 1445              	.L74:
1110:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     }
1111:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     if(ui32Port == GPIO_D_BASE)
 1446              		.loc 1 1111 0
 1447 0624 7B68     		ldr	r3, [r7, #4]
 1448 0626 104A     		ldr	r2, .L76+12
 1449 0628 9342     		cmp	r3, r2
 1450 062a 01D1     		bne	.L75
1112:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     {
1113:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****         ui32PortOffset = 24;
 1451              		.loc 1 1113 0
 1452 062c 1823     		movs	r3, #24
 1453 062e FB60     		str	r3, [r7, #12]
 1454              	.L75:
1114:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     }
1115:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ui32IntPins = ui8Pins << ui32PortOffset;
 1455              		.loc 1 1115 0
 1456 0630 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 1457 0632 FB68     		ldr	r3, [r7, #12]
 1458 0634 02FA03F3 		lsl	r3, r2, r3
 1459 0638 BB60     		str	r3, [r7, #8]
1116:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
1117:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
1118:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Enable the interrupts.
1119:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
1120:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     HWREG(ui32Port + GPIO_O_PI_IEN) |= ui32IntPins;
 1460              		.loc 1 1120 0
 1461 063a 7B68     		ldr	r3, [r7, #4]
 1462 063c 03F5E263 		add	r3, r3, #1808
 1463 0640 1946     		mov	r1, r3
 1464 0642 7B68     		ldr	r3, [r7, #4]
 1465 0644 03F5E263 		add	r3, r3, #1808
 1466 0648 1A68     		ldr	r2, [r3]
 1467 064a BB68     		ldr	r3, [r7, #8]
 1468 064c 1343     		orrs	r3, r3, r2
 1469 064e 0B60     		str	r3, [r1]
1121:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** }
 1470              		.loc 1 1121 0
 1471 0650 00BF     		nop
 1472 0652 1437     		adds	r7, r7, #20
 1473              		.cfi_def_cfa_offset 4
 1474 0654 BD46     		mov	sp, r7
 1475              		.cfi_def_cfa_register 13
 1476              		@ sp needed
 1477 0656 80BC     		pop	{r7}
 1478              		.cfi_restore 7
 1479              		.cfi_def_cfa_offset 0
 1480 0658 7047     		bx	lr
 1481              	.L77:
 1482 065a 00BF     		.align	2
 1483              	.L76:
 1484 065c 00900D40 		.word	1074630656
 1485 0660 00A00D40 		.word	1074634752
 1486 0664 00B00D40 		.word	1074638848
 1487 0668 00C00D40 		.word	1074642944
 1488              		.cfi_endproc
 1489              	.LFE22:
 1491              		.align	2
 1492              		.global	GPIOPowIntDisable
 1493              		.thumb
 1494              		.thumb_func
 1496              	GPIOPowIntDisable:
 1497              	.LFB23:
1122:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
1123:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
1124:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
1125:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! Disables power-up interrupts for the specified pin(s)
1126:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
1127:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
1128:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui8Pins is the bit-packed representation of the pin(s).
1129:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
1130:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! Masks the interrupt for the specified pin(s).
1131:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
1132:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! The pin(s) are specified using a bit-packed byte, where each bit that is
1133:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! set identifies the pin to be accessed, and where bit 0 of the byte
1134:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! represents GPIO port pin 0, bit 1 represents GPIO port pin 1, and so on.
1135:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
1136:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \return None
1137:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
1138:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
1139:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** void
1140:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** GPIOPowIntDisable(uint32_t ui32Port, uint8_t ui8Pins)
1141:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** {
 1498              		.loc 1 1141 0
 1499              		.cfi_startproc
 1500              		@ args = 0, pretend = 0, frame = 16
 1501              		@ frame_needed = 1, uses_anonymous_args = 0
 1502              		@ link register save eliminated.
 1503 066c 80B4     		push	{r7}
 1504              		.cfi_def_cfa_offset 4
 1505              		.cfi_offset 7, -4
 1506 066e 85B0     		sub	sp, sp, #20
 1507              		.cfi_def_cfa_offset 24
 1508 0670 00AF     		add	r7, sp, #0
 1509              		.cfi_def_cfa_register 7
 1510 0672 7860     		str	r0, [r7, #4]
 1511 0674 0B46     		mov	r3, r1
 1512 0676 FB70     		strb	r3, [r7, #3]
1142:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     uint32_t ui32PortOffset;
1143:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     uint32_t ui32IntPins;
1144:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
1145:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
1146:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Initialize value
1147:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
1148:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ui32PortOffset = 0;
 1513              		.loc 1 1148 0
 1514 0678 0023     		movs	r3, #0
 1515 067a FB60     		str	r3, [r7, #12]
1149:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
1150:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
1151:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Check the arguments.
1152:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
1153:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
1154:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
1155:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
1156:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Find bit mask for wanted pin(s)
1157:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
1158:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     if(ui32Port == GPIO_A_BASE)
 1516              		.loc 1 1158 0
 1517 067c 7B68     		ldr	r3, [r7, #4]
 1518 067e 164A     		ldr	r2, .L83
 1519 0680 9342     		cmp	r3, r2
 1520 0682 01D1     		bne	.L79
1159:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     {
1160:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****         ui32PortOffset = 0;
 1521              		.loc 1 1160 0
 1522 0684 0023     		movs	r3, #0
 1523 0686 FB60     		str	r3, [r7, #12]
 1524              	.L79:
1161:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     }
1162:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     if(ui32Port == GPIO_B_BASE)
 1525              		.loc 1 1162 0
 1526 0688 7B68     		ldr	r3, [r7, #4]
 1527 068a 144A     		ldr	r2, .L83+4
 1528 068c 9342     		cmp	r3, r2
 1529 068e 01D1     		bne	.L80
1163:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     {
1164:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****         ui32PortOffset = 8;
 1530              		.loc 1 1164 0
 1531 0690 0823     		movs	r3, #8
 1532 0692 FB60     		str	r3, [r7, #12]
 1533              	.L80:
1165:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     }
1166:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     if(ui32Port == GPIO_C_BASE)
 1534              		.loc 1 1166 0
 1535 0694 7B68     		ldr	r3, [r7, #4]
 1536 0696 124A     		ldr	r2, .L83+8
 1537 0698 9342     		cmp	r3, r2
 1538 069a 01D1     		bne	.L81
1167:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     {
1168:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****         ui32PortOffset = 16;
 1539              		.loc 1 1168 0
 1540 069c 1023     		movs	r3, #16
 1541 069e FB60     		str	r3, [r7, #12]
 1542              	.L81:
1169:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     }
1170:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     if(ui32Port == GPIO_D_BASE)
 1543              		.loc 1 1170 0
 1544 06a0 7B68     		ldr	r3, [r7, #4]
 1545 06a2 104A     		ldr	r2, .L83+12
 1546 06a4 9342     		cmp	r3, r2
 1547 06a6 01D1     		bne	.L82
1171:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     {
1172:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****         ui32PortOffset = 24;
 1548              		.loc 1 1172 0
 1549 06a8 1823     		movs	r3, #24
 1550 06aa FB60     		str	r3, [r7, #12]
 1551              	.L82:
1173:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     }
1174:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ui32IntPins = ui8Pins << ui32PortOffset;
 1552              		.loc 1 1174 0
 1553 06ac FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 1554 06ae FB68     		ldr	r3, [r7, #12]
 1555 06b0 02FA03F3 		lsl	r3, r2, r3
 1556 06b4 BB60     		str	r3, [r7, #8]
1175:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
1176:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
1177:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Disable the interrupts.
1178:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
1179:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     HWREG(ui32Port + GPIO_O_PI_IEN) &= ~(ui32IntPins);
 1557              		.loc 1 1179 0
 1558 06b6 7B68     		ldr	r3, [r7, #4]
 1559 06b8 03F5E263 		add	r3, r3, #1808
 1560 06bc 1946     		mov	r1, r3
 1561 06be 7B68     		ldr	r3, [r7, #4]
 1562 06c0 03F5E263 		add	r3, r3, #1808
 1563 06c4 1A68     		ldr	r2, [r3]
 1564 06c6 BB68     		ldr	r3, [r7, #8]
 1565 06c8 DB43     		mvns	r3, r3
 1566 06ca 1340     		ands	r3, r3, r2
 1567 06cc 0B60     		str	r3, [r1]
1180:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** }
 1568              		.loc 1 1180 0
 1569 06ce 00BF     		nop
 1570 06d0 1437     		adds	r7, r7, #20
 1571              		.cfi_def_cfa_offset 4
 1572 06d2 BD46     		mov	sp, r7
 1573              		.cfi_def_cfa_register 13
 1574              		@ sp needed
 1575 06d4 80BC     		pop	{r7}
 1576              		.cfi_restore 7
 1577              		.cfi_def_cfa_offset 0
 1578 06d6 7047     		bx	lr
 1579              	.L84:
 1580              		.align	2
 1581              	.L83:
 1582 06d8 00900D40 		.word	1074630656
 1583 06dc 00A00D40 		.word	1074634752
 1584 06e0 00B00D40 		.word	1074638848
 1585 06e4 00C00D40 		.word	1074642944
 1586              		.cfi_endproc
 1587              	.LFE23:
 1589              		.align	2
 1590              		.global	GPIOPowIntStatus
 1591              		.thumb
 1592              		.thumb_func
 1594              	GPIOPowIntStatus:
 1595              	.LFB24:
1181:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
1182:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
1183:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
1184:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! Gets power-up interrupt status for the specified GPIO port
1185:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
1186:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
1187:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param bMasked specifies whether masked or raw interrupt status is
1188:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! returned.
1189:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
1190:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! If \e bMasked is set as \b true, then the masked interrupt status is
1191:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! returned; otherwise, the raw interrupt status is returned.
1192:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
1193:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \return Returns a bit-packed byte, where each bit that is set identifies
1194:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! an active masked or raw interrupt, and where bit 0 of the byte
1195:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! represents GPIO port pin 0, bit 1 represents GPIO port pin 1, and so on.
1196:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! Bits 31:8 should be ignored.
1197:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
1198:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
1199:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** uint32_t
1200:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** GPIOPowIntStatus(uint32_t ui32Port, bool bMasked)
1201:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** {
 1596              		.loc 1 1201 0
 1597              		.cfi_startproc
 1598              		@ args = 0, pretend = 0, frame = 16
 1599              		@ frame_needed = 1, uses_anonymous_args = 0
 1600              		@ link register save eliminated.
 1601 06e8 80B4     		push	{r7}
 1602              		.cfi_def_cfa_offset 4
 1603              		.cfi_offset 7, -4
 1604 06ea 85B0     		sub	sp, sp, #20
 1605              		.cfi_def_cfa_offset 24
 1606 06ec 00AF     		add	r7, sp, #0
 1607              		.cfi_def_cfa_register 7
 1608 06ee 7860     		str	r0, [r7, #4]
 1609 06f0 0B46     		mov	r3, r1
 1610 06f2 FB70     		strb	r3, [r7, #3]
1202:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     uint32_t ui32PortOffset;
1203:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
1204:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
1205:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Initialize value
1206:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
1207:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ui32PortOffset = 0;
 1611              		.loc 1 1207 0
 1612 06f4 0023     		movs	r3, #0
 1613 06f6 FB60     		str	r3, [r7, #12]
1208:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
1209:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Check the arguments.
1210:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
1211:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
1212:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
1213:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Find bit mask for wanted pin(s)
1214:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
1215:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     if(ui32Port == GPIO_A_BASE)
 1614              		.loc 1 1215 0
 1615 06f8 7B68     		ldr	r3, [r7, #4]
 1616 06fa 184A     		ldr	r2, .L92
 1617 06fc 9342     		cmp	r3, r2
 1618 06fe 01D1     		bne	.L86
1216:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     {
1217:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****         ui32PortOffset = 0;
 1619              		.loc 1 1217 0
 1620 0700 0023     		movs	r3, #0
 1621 0702 FB60     		str	r3, [r7, #12]
 1622              	.L86:
1218:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     }
1219:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     if(ui32Port == GPIO_B_BASE)
 1623              		.loc 1 1219 0
 1624 0704 7B68     		ldr	r3, [r7, #4]
 1625 0706 164A     		ldr	r2, .L92+4
 1626 0708 9342     		cmp	r3, r2
 1627 070a 01D1     		bne	.L87
1220:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     {
1221:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****         ui32PortOffset = 8;
 1628              		.loc 1 1221 0
 1629 070c 0823     		movs	r3, #8
 1630 070e FB60     		str	r3, [r7, #12]
 1631              	.L87:
1222:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     }
1223:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     if(ui32Port == GPIO_C_BASE)
 1632              		.loc 1 1223 0
 1633 0710 7B68     		ldr	r3, [r7, #4]
 1634 0712 144A     		ldr	r2, .L92+8
 1635 0714 9342     		cmp	r3, r2
 1636 0716 01D1     		bne	.L88
1224:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     {
1225:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****         ui32PortOffset = 16;
 1637              		.loc 1 1225 0
 1638 0718 1023     		movs	r3, #16
 1639 071a FB60     		str	r3, [r7, #12]
 1640              	.L88:
1226:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     }
1227:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     if(ui32Port == GPIO_D_BASE)
 1641              		.loc 1 1227 0
 1642 071c 7B68     		ldr	r3, [r7, #4]
 1643 071e 124A     		ldr	r2, .L92+12
 1644 0720 9342     		cmp	r3, r2
 1645 0722 01D1     		bne	.L89
1228:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     {
1229:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****         ui32PortOffset = 24;
 1646              		.loc 1 1229 0
 1647 0724 1823     		movs	r3, #24
 1648 0726 FB60     		str	r3, [r7, #12]
 1649              	.L89:
1230:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     }
1231:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
1232:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Return the interrupt status.
1233:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     if(bMasked)
 1650              		.loc 1 1233 0
 1651 0728 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1652 072a 002B     		cmp	r3, #0
 1653 072c 08D0     		beq	.L90
1234:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     {
1235:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****         return((HWREG(ui32Port + GPIO_O_IRQ_DETECT_ACK) >> ui32PortOffset) &
 1654              		.loc 1 1235 0
 1655 072e 7B68     		ldr	r3, [r7, #4]
 1656 0730 03F5E363 		add	r3, r3, #1816
 1657 0734 1A68     		ldr	r2, [r3]
 1658 0736 FB68     		ldr	r3, [r7, #12]
 1659 0738 22FA03F3 		lsr	r3, r2, r3
 1660 073c DBB2     		uxtb	r3, r3
 1661 073e 07E0     		b	.L91
 1662              	.L90:
1236:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****                0xFF);
1237:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     }
1238:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     else
1239:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     {
1240:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****         return((HWREG(ui32Port + GPIO_O_IRQ_DETECT_UNMASK) >> ui32PortOffset) &
 1663              		.loc 1 1240 0
 1664 0740 7B68     		ldr	r3, [r7, #4]
 1665 0742 03F5E463 		add	r3, r3, #1824
 1666 0746 1A68     		ldr	r2, [r3]
 1667 0748 FB68     		ldr	r3, [r7, #12]
 1668 074a 22FA03F3 		lsr	r3, r2, r3
 1669 074e DBB2     		uxtb	r3, r3
 1670              	.L91:
1241:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****                0xFF);
1242:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     }
1243:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** }
 1671              		.loc 1 1243 0
 1672 0750 1846     		mov	r0, r3
 1673 0752 1437     		adds	r7, r7, #20
 1674              		.cfi_def_cfa_offset 4
 1675 0754 BD46     		mov	sp, r7
 1676              		.cfi_def_cfa_register 13
 1677              		@ sp needed
 1678 0756 80BC     		pop	{r7}
 1679              		.cfi_restore 7
 1680              		.cfi_def_cfa_offset 0
 1681 0758 7047     		bx	lr
 1682              	.L93:
 1683 075a 00BF     		.align	2
 1684              	.L92:
 1685 075c 00900D40 		.word	1074630656
 1686 0760 00A00D40 		.word	1074634752
 1687 0764 00B00D40 		.word	1074638848
 1688 0768 00C00D40 		.word	1074642944
 1689              		.cfi_endproc
 1690              	.LFE24:
 1692              		.align	2
 1693              		.global	GPIOPowIntClear
 1694              		.thumb
 1695              		.thumb_func
 1697              	GPIOPowIntClear:
 1698              	.LFB25:
1244:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
1245:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
1246:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
1247:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! Clears the power-up interrupt for the specified pin(s)
1248:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
1249:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui32Port is the base address of the GPIO port.
1250:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui8Pins is the bit-packed representation of the pin(s).
1251:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
1252:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! Clears the interrupt for the specified pin(s).
1253:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
1254:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! The pin(s) are specified using a bit-packed byte, where each bit that is
1255:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! set identifies the pin to be accessed, and where bit 0 of the byte
1256:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! represents GPIO port pin 0, bit 1 represents GPIO port pin 1, and so on.
1257:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
1258:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \return None
1259:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
1260:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
1261:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** void
1262:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** GPIOPowIntClear(uint32_t ui32Port, uint8_t ui8Pins)
1263:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** {
 1699              		.loc 1 1263 0
 1700              		.cfi_startproc
 1701              		@ args = 0, pretend = 0, frame = 16
 1702              		@ frame_needed = 1, uses_anonymous_args = 0
 1703              		@ link register save eliminated.
 1704 076c 80B4     		push	{r7}
 1705              		.cfi_def_cfa_offset 4
 1706              		.cfi_offset 7, -4
 1707 076e 85B0     		sub	sp, sp, #20
 1708              		.cfi_def_cfa_offset 24
 1709 0770 00AF     		add	r7, sp, #0
 1710              		.cfi_def_cfa_register 7
 1711 0772 7860     		str	r0, [r7, #4]
 1712 0774 0B46     		mov	r3, r1
 1713 0776 FB70     		strb	r3, [r7, #3]
1264:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     uint32_t ui32PortOffset;
1265:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     uint32_t ui32IntPins;
1266:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
1267:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
1268:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Initialize value
1269:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
1270:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ui32PortOffset = 0;
 1714              		.loc 1 1270 0
 1715 0778 0023     		movs	r3, #0
 1716 077a FB60     		str	r3, [r7, #12]
1271:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
1272:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
1273:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Check the arguments.
1274:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
1275:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ASSERT(GPIOBaseValid(ui32Port));
1276:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
1277:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
1278:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Find bit mask for wanted pin(s)
1279:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
1280:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     if(ui32Port == GPIO_A_BASE)
 1717              		.loc 1 1280 0
 1718 077c 7B68     		ldr	r3, [r7, #4]
 1719 077e 164A     		ldr	r2, .L99
 1720 0780 9342     		cmp	r3, r2
 1721 0782 01D1     		bne	.L95
1281:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     {
1282:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****         ui32PortOffset = 0;
 1722              		.loc 1 1282 0
 1723 0784 0023     		movs	r3, #0
 1724 0786 FB60     		str	r3, [r7, #12]
 1725              	.L95:
1283:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     }
1284:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     if(ui32Port == GPIO_B_BASE)
 1726              		.loc 1 1284 0
 1727 0788 7B68     		ldr	r3, [r7, #4]
 1728 078a 144A     		ldr	r2, .L99+4
 1729 078c 9342     		cmp	r3, r2
 1730 078e 01D1     		bne	.L96
1285:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     {
1286:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****         ui32PortOffset = 8;
 1731              		.loc 1 1286 0
 1732 0790 0823     		movs	r3, #8
 1733 0792 FB60     		str	r3, [r7, #12]
 1734              	.L96:
1287:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     }
1288:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     if(ui32Port == GPIO_C_BASE)
 1735              		.loc 1 1288 0
 1736 0794 7B68     		ldr	r3, [r7, #4]
 1737 0796 124A     		ldr	r2, .L99+8
 1738 0798 9342     		cmp	r3, r2
 1739 079a 01D1     		bne	.L97
1289:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     {
1290:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****         ui32PortOffset = 16;
 1740              		.loc 1 1290 0
 1741 079c 1023     		movs	r3, #16
 1742 079e FB60     		str	r3, [r7, #12]
 1743              	.L97:
1291:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     }
1292:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     if(ui32Port == GPIO_D_BASE)
 1744              		.loc 1 1292 0
 1745 07a0 7B68     		ldr	r3, [r7, #4]
 1746 07a2 104A     		ldr	r2, .L99+12
 1747 07a4 9342     		cmp	r3, r2
 1748 07a6 01D1     		bne	.L98
1293:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     {
1294:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****         ui32PortOffset = 24;
 1749              		.loc 1 1294 0
 1750 07a8 1823     		movs	r3, #24
 1751 07aa FB60     		str	r3, [r7, #12]
 1752              	.L98:
1295:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     }
1296:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ui32IntPins = ui8Pins << ui32PortOffset;
 1753              		.loc 1 1296 0
 1754 07ac FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 1755 07ae FB68     		ldr	r3, [r7, #12]
 1756 07b0 02FA03F3 		lsl	r3, r2, r3
 1757 07b4 BB60     		str	r3, [r7, #8]
1297:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
1298:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
1299:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Clear the interrupts.
1300:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
1301:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     HWREG(ui32Port + GPIO_O_IRQ_DETECT_ACK) |= ui32IntPins;
 1758              		.loc 1 1301 0
 1759 07b6 7B68     		ldr	r3, [r7, #4]
 1760 07b8 03F5E363 		add	r3, r3, #1816
 1761 07bc 1946     		mov	r1, r3
 1762 07be 7B68     		ldr	r3, [r7, #4]
 1763 07c0 03F5E363 		add	r3, r3, #1816
 1764 07c4 1A68     		ldr	r2, [r3]
 1765 07c6 BB68     		ldr	r3, [r7, #8]
 1766 07c8 1343     		orrs	r3, r3, r2
 1767 07ca 0B60     		str	r3, [r1]
1302:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** }
 1768              		.loc 1 1302 0
 1769 07cc 00BF     		nop
 1770 07ce 1437     		adds	r7, r7, #20
 1771              		.cfi_def_cfa_offset 4
 1772 07d0 BD46     		mov	sp, r7
 1773              		.cfi_def_cfa_register 13
 1774              		@ sp needed
 1775 07d2 80BC     		pop	{r7}
 1776              		.cfi_restore 7
 1777              		.cfi_def_cfa_offset 0
 1778 07d4 7047     		bx	lr
 1779              	.L100:
 1780 07d6 00BF     		.align	2
 1781              	.L99:
 1782 07d8 00900D40 		.word	1074630656
 1783 07dc 00A00D40 		.word	1074634752
 1784 07e0 00B00D40 		.word	1074638848
 1785 07e4 00C00D40 		.word	1074642944
 1786              		.cfi_endproc
 1787              	.LFE25:
 1789              		.align	2
 1790              		.global	GPIOIntWakeupEnable
 1791              		.thumb
 1792              		.thumb_func
 1794              	GPIOIntWakeupEnable:
 1795              	.LFB26:
1303:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
1304:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
1305:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
1306:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! Enable Wake Up Interrupt
1307:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
1308:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui32Config is the source to enable wake up on interrupt.
1309:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
1310:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! This function enables wake up on interrupt from the selected sources.
1311:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
1312:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! The \e ui32Config argument must be one or the logical or of several of
1313:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! the following values:
1314:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
1315:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \b GPIO_IWE_PORT_A, \b GPIO_IWE_PORT_B, \b GPIO_IWE_PORT_C,
1316:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \b GPIO_IWE_PORT_D, \b GPIO_IWE_USB,
1317:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \b GPIO_IWE_SM_TIMER.
1318:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
1319:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \return None
1320:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
1321:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
1322:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** void
1323:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** GPIOIntWakeupEnable(uint32_t ui32Config)
1324:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** {
 1796              		.loc 1 1324 0
 1797              		.cfi_startproc
 1798              		@ args = 0, pretend = 0, frame = 8
 1799              		@ frame_needed = 1, uses_anonymous_args = 0
 1800              		@ link register save eliminated.
 1801 07e8 80B4     		push	{r7}
 1802              		.cfi_def_cfa_offset 4
 1803              		.cfi_offset 7, -4
 1804 07ea 83B0     		sub	sp, sp, #12
 1805              		.cfi_def_cfa_offset 16
 1806 07ec 00AF     		add	r7, sp, #0
 1807              		.cfi_def_cfa_register 7
 1808 07ee 7860     		str	r0, [r7, #4]
1325:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ASSERT((ui32Config &
1326:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****             (GPIO_IWE_PORT_A |
1327:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****              GPIO_IWE_PORT_B |
1328:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****              GPIO_IWE_PORT_C |
1329:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****              GPIO_IWE_PORT_D |
1330:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****              GPIO_IWE_USB |
1331:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****              GPIO_IWE_SM_TIMER)) != 0);
1332:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
1333:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
1334:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Enable Wakeup from selected Interrupt sources
1335:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
1336:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     HWREG(SYS_CTRL_IWE) |= ui32Config;
 1809              		.loc 1 1336 0
 1810 07f0 0549     		ldr	r1, .L102
 1811 07f2 054B     		ldr	r3, .L102
 1812 07f4 1A68     		ldr	r2, [r3]
 1813 07f6 7B68     		ldr	r3, [r7, #4]
 1814 07f8 1343     		orrs	r3, r3, r2
 1815 07fa 0B60     		str	r3, [r1]
1337:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** }
 1816              		.loc 1 1337 0
 1817 07fc 00BF     		nop
 1818 07fe 0C37     		adds	r7, r7, #12
 1819              		.cfi_def_cfa_offset 4
 1820 0800 BD46     		mov	sp, r7
 1821              		.cfi_def_cfa_register 13
 1822              		@ sp needed
 1823 0802 80BC     		pop	{r7}
 1824              		.cfi_restore 7
 1825              		.cfi_def_cfa_offset 0
 1826 0804 7047     		bx	lr
 1827              	.L103:
 1828 0806 00BF     		.align	2
 1829              	.L102:
 1830 0808 94200D40 		.word	1074602132
 1831              		.cfi_endproc
 1832              	.LFE26:
 1834              		.align	2
 1835              		.global	GPIOIntWakeupDisable
 1836              		.thumb
 1837              		.thumb_func
 1839              	GPIOIntWakeupDisable:
 1840              	.LFB27:
1338:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
1339:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
1340:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
1341:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! Disable Wake Up Interrupt
1342:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
1343:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \param ui32Config is the source to disable wake on interrupt from.
1344:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
1345:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! This function disables Wake up on interrupt from the selected sources.
1346:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
1347:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! The \e ui32Config argument must be one or the logical or of several of
1348:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! the following values:
1349:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
1350:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \b GPIO_IWE_PORT_A, \b GPIO_IWE_PORT_B, \b GPIO_IWE_PORT_C,
1351:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \b GPIO_IWE_PORT_D, \b GPIO_IWE_USB,
1352:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \b GPIO_IWE_SM_TIMER,
1353:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //!
1354:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //! \return None
1355:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //
1356:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** //*****************************************************************************
1357:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** void
1358:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** GPIOIntWakeupDisable(uint32_t ui32Config)
1359:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** {
 1841              		.loc 1 1359 0
 1842              		.cfi_startproc
 1843              		@ args = 0, pretend = 0, frame = 8
 1844              		@ frame_needed = 1, uses_anonymous_args = 0
 1845              		@ link register save eliminated.
 1846 080c 80B4     		push	{r7}
 1847              		.cfi_def_cfa_offset 4
 1848              		.cfi_offset 7, -4
 1849 080e 83B0     		sub	sp, sp, #12
 1850              		.cfi_def_cfa_offset 16
 1851 0810 00AF     		add	r7, sp, #0
 1852              		.cfi_def_cfa_register 7
 1853 0812 7860     		str	r0, [r7, #4]
1360:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     ASSERT((ui32Config &
1361:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****             (GPIO_IWE_PORT_A |
1362:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****              GPIO_IWE_PORT_B |
1363:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****              GPIO_IWE_PORT_C |
1364:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****              GPIO_IWE_PORT_D |
1365:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****              GPIO_IWE_USB |
1366:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****              GPIO_IWE_SM_TIMER)) != 0);
1367:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** 
1368:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
1369:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     // Disable Wakeup from selected Interrupt sources
1370:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     //
1371:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c ****     HWREG(SYS_CTRL_IWE) &= ~ui32Config;
 1854              		.loc 1 1371 0
 1855 0814 0549     		ldr	r1, .L105
 1856 0816 054B     		ldr	r3, .L105
 1857 0818 1A68     		ldr	r2, [r3]
 1858 081a 7B68     		ldr	r3, [r7, #4]
 1859 081c DB43     		mvns	r3, r3
 1860 081e 1340     		ands	r3, r3, r2
 1861 0820 0B60     		str	r3, [r1]
1372:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/gpio.c **** }
 1862              		.loc 1 1372 0
 1863 0822 00BF     		nop
 1864 0824 0C37     		adds	r7, r7, #12
 1865              		.cfi_def_cfa_offset 4
 1866 0826 BD46     		mov	sp, r7
 1867              		.cfi_def_cfa_register 13
 1868              		@ sp needed
 1869 0828 80BC     		pop	{r7}
 1870              		.cfi_restore 7
 1871              		.cfi_def_cfa_offset 0
 1872 082a 7047     		bx	lr
 1873              	.L106:
 1874              		.align	2
 1875              	.L105:
 1876 082c 94200D40 		.word	1074602132
 1877              		.cfi_endproc
 1878              	.LFE27:
 1880              	.Letext0:
 1881              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 1882              		.file 3 "/usr/include/newlib/sys/_stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 gpio.c
     /tmp/ccc7gXjP.s:19     .text:0000000000000000 $t
     /tmp/ccc7gXjP.s:24     .text:0000000000000000 GPIOGetIntNumber
     /tmp/ccc7gXjP.s:106    .text:0000000000000054 $d
     /tmp/ccc7gXjP.s:113    .text:0000000000000064 $t
     /tmp/ccc7gXjP.s:118    .text:0000000000000064 GPIODirModeSet
     /tmp/ccc7gXjP.s:211    .text:00000000000000dc GPIODirModeGet
     /tmp/ccc7gXjP.s:287    .text:0000000000000134 GPIOIntTypeSet
     /tmp/ccc7gXjP.s:408    .text:00000000000001dc GPIOIntTypeGet
     /tmp/ccc7gXjP.s:503    .text:0000000000000254 GPIOPinIntEnable
     /tmp/ccc7gXjP.s:549    .text:0000000000000280 GPIOPinIntDisable
     /tmp/ccc7gXjP.s:596    .text:00000000000002b0 GPIOPinIntStatus
     /tmp/ccc7gXjP.s:647    .text:00000000000002e0 GPIOPinIntClear
     /tmp/ccc7gXjP.s:689    .text:0000000000000304 GPIOPortIntRegister
     /tmp/ccc7gXjP.s:732    .text:000000000000032c GPIOPortIntUnregister
     /tmp/ccc7gXjP.s:773    .text:0000000000000350 GPIOPinRead
     /tmp/ccc7gXjP.s:816    .text:0000000000000374 GPIOPinWrite
     /tmp/ccc7gXjP.s:863    .text:00000000000003a0 GPIOPinTypeGPIOInput
     /tmp/ccc7gXjP.s:908    .text:00000000000003cc GPIOPinTypeGPIOOutput
     /tmp/ccc7gXjP.s:953    .text:00000000000003f8 GPIOPinTypeI2C
     /tmp/ccc7gXjP.s:998    .text:0000000000000424 GPIOPinTypeSSI
     /tmp/ccc7gXjP.s:1043   .text:0000000000000450 GPIOPinTypeTimer
     /tmp/ccc7gXjP.s:1088   .text:000000000000047c GPIOPinTypeUARTInput
     /tmp/ccc7gXjP.s:1133   .text:00000000000004a8 GPIOPinTypeUARTOutput
     /tmp/ccc7gXjP.s:1178   .text:00000000000004d4 GPIOPowIntTypeSet
     /tmp/ccc7gXjP.s:1283   .text:0000000000000560 $d
     /tmp/ccc7gXjP.s:1290   .text:0000000000000570 $t
     /tmp/ccc7gXjP.s:1295   .text:0000000000000570 GPIOPowIntTypeGet
     /tmp/ccc7gXjP.s:1387   .text:00000000000005e0 $d
     /tmp/ccc7gXjP.s:1394   .text:00000000000005f0 $t
     /tmp/ccc7gXjP.s:1399   .text:00000000000005f0 GPIOPowIntEnable
     /tmp/ccc7gXjP.s:1484   .text:000000000000065c $d
     /tmp/ccc7gXjP.s:1491   .text:000000000000066c $t
     /tmp/ccc7gXjP.s:1496   .text:000000000000066c GPIOPowIntDisable
     /tmp/ccc7gXjP.s:1582   .text:00000000000006d8 $d
     /tmp/ccc7gXjP.s:1589   .text:00000000000006e8 $t
     /tmp/ccc7gXjP.s:1594   .text:00000000000006e8 GPIOPowIntStatus
     /tmp/ccc7gXjP.s:1685   .text:000000000000075c $d
     /tmp/ccc7gXjP.s:1692   .text:000000000000076c $t
     /tmp/ccc7gXjP.s:1697   .text:000000000000076c GPIOPowIntClear
     /tmp/ccc7gXjP.s:1782   .text:00000000000007d8 $d
     /tmp/ccc7gXjP.s:1789   .text:00000000000007e8 $t
     /tmp/ccc7gXjP.s:1794   .text:00000000000007e8 GPIOIntWakeupEnable
     /tmp/ccc7gXjP.s:1830   .text:0000000000000808 $d
     /tmp/ccc7gXjP.s:1834   .text:000000000000080c $t
     /tmp/ccc7gXjP.s:1839   .text:000000000000080c GPIOIntWakeupDisable
     /tmp/ccc7gXjP.s:1876   .text:000000000000082c $d
                     .debug_frame:0000000000000010 $d
                           .group:0000000000000000 wm4.0.8e445c0106ab795ab4704214cba6f089
                           .group:0000000000000000 wm4.hw_gpio.h.39.abbe53cff9a4c1fb5f1c34960fe1e7aa
                           .group:0000000000000000 wm4.hw_ints.h.42.85b9479f2be35b086f1bb7cbb15bc097
                           .group:0000000000000000 wm4.hw_memmap.h.39.19283c377d449c9bca5fdd8ccb62628c
                           .group:0000000000000000 wm4.hw_sys_ctrl.h.39.50b4d7775c38e82076d0eb3bdc2daf82
                           .group:0000000000000000 wm4._newlib_version.h.4.ad342815780c8db09778091a421b5b5b
                           .group:0000000000000000 wm4.features.h.33.d97f2d646536517df901beeb5b9993f5
                           .group:0000000000000000 wm4._default_types.h.15.933e8edd27a65e0b69af4a865eb623d2
                           .group:0000000000000000 wm4._intsup.h.10.b82bf99f69d6a5c085fc866de0d3eb9b
                           .group:0000000000000000 wm4._stdint.h.10.7a5f60e6741af4a5594a3867d347e1f9
                           .group:0000000000000000 wm4.stdint.h.23.373a9d32a9e4c2e88fd347156532d281
                           .group:0000000000000000 wm4.stdbool.h.29.07dce69c3b78884144b7f7bd19483461
                           .group:0000000000000000 wm4.hw_types.h.67.b10589a0806dcc2d274d6fab6b736519
                           .group:0000000000000000 wm4.gpio.h.41.604fa3d9f70fb140a75ada50bffeaeff
                           .group:0000000000000000 wm4.interrupt.h.41.272fc4ec0e276feb439e7974d0f77eaf
                           .group:0000000000000000 wm4.ioc.h.41.7444fe7016a1d045dd9fea497d615b28

UNDEFINED SYMBOLS
IntRegister
IntEnable
IntDisable
IntUnregister
IOCPadConfigSet
