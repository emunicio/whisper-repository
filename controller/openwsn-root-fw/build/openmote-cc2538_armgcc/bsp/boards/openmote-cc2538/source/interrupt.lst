   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"interrupt.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.rodata
  20              		.align	2
  23              	g_pui32Priority:
  24 0000 00070000 		.word	1792
  25 0004 00060000 		.word	1536
  26 0008 00050000 		.word	1280
  27 000c 00040000 		.word	1024
  28 0010 00030000 		.word	768
  29 0014 00020000 		.word	512
  30 0018 00010000 		.word	256
  31 001c 00000000 		.word	0
  32              		.align	2
  35              	g_pui32Regs:
  36 0020 00000000 		.word	0
  37 0024 18ED00E0 		.word	-536810216
  38 0028 1CED00E0 		.word	-536810212
  39 002c 20ED00E0 		.word	-536810208
  40 0030 00E400E0 		.word	-536812544
  41 0034 04E400E0 		.word	-536812540
  42 0038 08E400E0 		.word	-536812536
  43 003c 0CE400E0 		.word	-536812532
  44 0040 10E400E0 		.word	-536812528
  45 0044 14E400E0 		.word	-536812524
  46 0048 18E400E0 		.word	-536812520
  47 004c 1CE400E0 		.word	-536812516
  48 0050 20E400E0 		.word	-536812512
  49 0054 24E400E0 		.word	-536812508
  50 0058 28E400E0 		.word	-536812504
  51 005c 2CE400E0 		.word	-536812500
  52 0060 30E400E0 		.word	-536812496
  53 0064 34E400E0 		.word	-536812492
  54 0068 38E400E0 		.word	-536812488
  55 006c 3CE400E0 		.word	-536812484
  56 0070 40E400E0 		.word	-536812480
  57 0074 44E400E0 		.word	-536812476
  58 0078 48E400E0 		.word	-536812472
  59 007c 4CE400E0 		.word	-536812468
  60 0080 50E400E0 		.word	-536812464
  61 0084 54E400E0 		.word	-536812460
  62 0088 58E400E0 		.word	-536812456
  63 008c 5CE400E0 		.word	-536812452
  64 0090 60E400E0 		.word	-536812448
  65 0094 64E400E0 		.word	-536812444
  66 0098 68E400E0 		.word	-536812440
  67 009c 6CE400E0 		.word	-536812436
  68 00a0 70E400E0 		.word	-536812432
  69 00a4 74E400E0 		.word	-536812428
  70 00a8 78E400E0 		.word	-536812424
  71 00ac 7CE400E0 		.word	-536812420
  72 00b0 80E400E0 		.word	-536812416
  73 00b4 84E400E0 		.word	-536812412
  74 00b8 88E400E0 		.word	-536812408
  75 00bc 8CE400E0 		.word	-536812404
  76 00c0 90E400E0 		.word	-536812400
  77              		.align	2
  80              	g_pui32EnRegs:
  81 00c4 00E100E0 		.word	-536813312
  82 00c8 04E100E0 		.word	-536813308
  83 00cc 08E100E0 		.word	-536813304
  84 00d0 0CE100E0 		.word	-536813300
  85 00d4 10E100E0 		.word	-536813296
  86              		.align	2
  89              	g_pui32DisRegs:
  90 00d8 80E100E0 		.word	-536813184
  91 00dc 84E100E0 		.word	-536813180
  92 00e0 88E100E0 		.word	-536813176
  93 00e4 8CE100E0 		.word	-536813172
  94 00e8 90E100E0 		.word	-536813168
  95              		.align	2
  98              	g_pui32PendRegs:
  99 00ec 00E200E0 		.word	-536813056
 100 00f0 04E200E0 		.word	-536813052
 101 00f4 08E200E0 		.word	-536813048
 102 00f8 0CE200E0 		.word	-536813044
 103 00fc 10E200E0 		.word	-536813040
 104              		.align	2
 107              	g_pui32UnpendRegs:
 108 0100 80E200E0 		.word	-536812928
 109 0104 84E200E0 		.word	-536812924
 110 0108 88E200E0 		.word	-536812920
 111 010c 8CE200E0 		.word	-536812916
 112 0110 90E200E0 		.word	-536812912
 113              		.text
 114              		.align	2
 115              		.thumb
 116              		.thumb_func
 118              	IntDefaultHandler:
 119              	.LFB0:
 120              		.file 1 "build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c"
   1:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** /******************************************************************************
   2:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** *  Filename:       interrupt.c
   3:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** *  Revised:        $Date: 2013-03-20 14:47:53 +0100 (Wed, 20 Mar 2013) $
   4:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** *  Revision:       $Revision: 9489 $
   5:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** *
   6:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** *  Description:    Driver for the NVIC Interrupt Controller.
   7:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** *
   8:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** *  Copyright (C) 2012 Texas Instruments Incorporated - http://www.ti.com/
   9:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** *
  10:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** *
  11:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** *  Redistribution and use in source and binary forms, with or without
  12:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** *  modification, are permitted provided that the following conditions
  13:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** *  are met:
  14:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** *
  15:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** *    Redistributions of source code must retain the above copyright
  16:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** *    notice, this list of conditions and the following disclaimer.
  17:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** *
  18:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** *    Redistributions in binary form must reproduce the above copyright
  19:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** *    notice, this list of conditions and the following disclaimer in the
  20:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** *    documentation and/or other materials provided with the distribution.
  21:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** *
  22:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** *    Neither the name of Texas Instruments Incorporated nor the names of
  23:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** *    its contributors may be used to endorse or promote products derived
  24:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** *    from this software without specific prior written permission.
  25:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** *
  26:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  27:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  28:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
  29:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
  30:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  31:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  32:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  33:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  34:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  35:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  36:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** *  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  37:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** *
  38:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** ******************************************************************************/
  39:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** 
  40:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //*****************************************************************************
  41:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //
  42:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! \addtogroup interrupt_api
  43:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! @{
  44:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //
  45:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //*****************************************************************************
  46:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** 
  47:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** #include <headers/hw_ints.h>
  48:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** #include <headers/hw_nvic.h>
  49:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** #include <headers/hw_sys_ctrl.h>
  50:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** #include "cpu.h"
  51:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** #include "debug.h"
  52:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** #include "interrupt.h"
  53:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** 
  54:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //*****************************************************************************
  55:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //
  56:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** // This is a mapping between priority grouping encodings and the number of
  57:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** // preemption priority bits.
  58:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //
  59:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //*****************************************************************************
  60:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** static const uint32_t g_pui32Priority[] =
  61:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** {
  62:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     NVIC_APINT_PRIGROUP_0_8, NVIC_APINT_PRIGROUP_1_7, NVIC_APINT_PRIGROUP_2_6,
  63:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     NVIC_APINT_PRIGROUP_3_5, NVIC_APINT_PRIGROUP_4_4, NVIC_APINT_PRIGROUP_5_3,
  64:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     NVIC_APINT_PRIGROUP_6_2, NVIC_APINT_PRIGROUP_7_1
  65:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** };
  66:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** 
  67:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //*****************************************************************************
  68:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //
  69:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** // This is a mapping between interrupt number and the register that contains
  70:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** // the priority encoding for that interrupt.
  71:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //
  72:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //*****************************************************************************
  73:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** static const uint32_t g_pui32Regs[] =
  74:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** {
  75:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     0, NVIC_SYS_PRI1, NVIC_SYS_PRI2, NVIC_SYS_PRI3, NVIC_PRI0,  NVIC_PRI1,
  76:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     NVIC_PRI2,  NVIC_PRI3,  NVIC_PRI4,  NVIC_PRI5,  NVIC_PRI6,  NVIC_PRI7,
  77:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     NVIC_PRI8,  NVIC_PRI9,  NVIC_PRI10, NVIC_PRI11, NVIC_PRI12, NVIC_PRI13,
  78:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     NVIC_PRI14, NVIC_PRI15, NVIC_PRI16, NVIC_PRI17, NVIC_PRI18, NVIC_PRI19,
  79:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     NVIC_PRI20, NVIC_PRI21, NVIC_PRI22, NVIC_PRI23, NVIC_PRI24, NVIC_PRI25,
  80:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     NVIC_PRI26, NVIC_PRI27, NVIC_PRI28, NVIC_PRI29, NVIC_PRI30, NVIC_PRI31,
  81:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     NVIC_PRI32, NVIC_PRI33, NVIC_PRI34, NVIC_PRI35, NVIC_PRI36
  82:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** };
  83:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** 
  84:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //*****************************************************************************
  85:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //
  86:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** // This is a mapping between interrupt number (for the peripheral interrupts
  87:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** // only) and the register that contains the interrupt enable for that
  88:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** // interrupt.
  89:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //
  90:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //*****************************************************************************
  91:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** static const uint32_t g_pui32EnRegs[] =
  92:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** {
  93:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     NVIC_EN0, NVIC_EN1, NVIC_EN2, NVIC_EN3, NVIC_EN4
  94:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** };
  95:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** 
  96:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //*****************************************************************************
  97:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //
  98:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** // This is a mapping between interrupt number (for the peripheral interrupts
  99:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** // only) and the register that contains the interrupt disable for that
 100:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** // interrupt.
 101:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //
 102:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //*****************************************************************************
 103:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** static const uint32_t g_pui32DisRegs[] =
 104:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** {
 105:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     NVIC_DIS0, NVIC_DIS1, NVIC_DIS2, NVIC_DIS3, NVIC_DIS4
 106:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** };
 107:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** 
 108:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //*****************************************************************************
 109:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //
 110:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** // This is a mapping between interrupt number (for the peripheral interrupts
 111:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** // only) and the register that contains the interrupt pend for that interrupt.
 112:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //
 113:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //*****************************************************************************
 114:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** static const uint32_t g_pui32PendRegs[] =
 115:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** {
 116:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     NVIC_PEND0, NVIC_PEND1, NVIC_PEND2, NVIC_PEND3, NVIC_PEND4
 117:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** };
 118:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** 
 119:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //*****************************************************************************
 120:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //
 121:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** // This is a mapping between interrupt number (for the peripheral interrupts
 122:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** // only) and the register that contains the interrupt unpend for that
 123:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** // interrupt.
 124:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //
 125:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //*****************************************************************************
 126:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** static const uint32_t g_pui32UnpendRegs[] =
 127:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** {
 128:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     NVIC_UNPEND0, NVIC_UNPEND1, NVIC_UNPEND2, NVIC_UNPEND3, NVIC_UNPEND4
 129:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** };
 130:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** 
 131:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //*****************************************************************************
 132:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //
 133:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! \internal
 134:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! The default interrupt handler
 135:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //!
 136:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! This is the default interrupt handler for all interrupts.  It simply loops
 137:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! forever so that the system state is preserved for observation by a
 138:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! debugger.  Since interrupts should be disabled before unregistering the
 139:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! corresponding handler, this should never be called.
 140:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //!
 141:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! \return None
 142:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //
 143:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //*****************************************************************************
 144:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** static void
 145:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** IntDefaultHandler(void)
 146:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** {
 121              		.loc 1 146 0
 122              		.cfi_startproc
 123              		@ args = 0, pretend = 0, frame = 0
 124              		@ frame_needed = 1, uses_anonymous_args = 0
 125              		@ link register save eliminated.
 126 0000 80B4     		push	{r7}
 127              		.cfi_def_cfa_offset 4
 128              		.cfi_offset 7, -4
 129 0002 00AF     		add	r7, sp, #0
 130              		.cfi_def_cfa_register 7
 131              	.L2:
 147:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     //
 148:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     // Go into an infinite loop.
 149:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     //
 150:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     while(1)
 151:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     {
 152:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     }
 132              		.loc 1 152 0 discriminator 1
 133 0004 FEE7     		b	.L2
 134              		.cfi_endproc
 135              	.LFE0:
 137              		.section	vtable,"aw",%progbits
 138              		.align	10
 141              	g_pfnRAMVectors:
 142 0000 00000000 		.space	652
 142      00000000 
 142      00000000 
 142      00000000 
 142      00000000 
 143              		.text
 144 0006 00BF     		.align	2
 145              		.global	IntMasterEnable
 146              		.thumb
 147              		.thumb_func
 149              	IntMasterEnable:
 150              	.LFB1:
 153:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** }
 154:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** 
 155:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //*****************************************************************************
 156:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //
 157:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** // The processor vector table
 158:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //
 159:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** // This contains a list of the handlers for the various interrupt sources in
 160:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** // the system.  The layout of this list is defined by the hardware; assertion
 161:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** // of an interrupt causes the processor to start executing directly at the
 162:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** // address given in the corresponding location in this list.
 163:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //
 164:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //*****************************************************************************
 165:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** #if defined(__ICCARM__)
 166:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** #pragma data_alignment=1024
 167:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** static __no_init void (*g_pfnRAMVectors[NUM_INTERRUPTS])(void) @ "VTABLE";
 168:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** #elif defined(__TI_COMPILER_VERSION__) || defined(DOXYGEN)
 169:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** #pragma DATA_ALIGN(g_pfnRAMVectors, 1024)
 170:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** #pragma DATA_SECTION(g_pfnRAMVectors, ".vtable")
 171:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** void (*g_pfnRAMVectors[NUM_INTERRUPTS])(void);
 172:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** #else
 173:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** static __attribute__((section("vtable")))
 174:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** void (*g_pfnRAMVectors[NUM_INTERRUPTS])(void) __attribute__((aligned(1024)));
 175:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** #endif
 176:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** 
 177:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //*****************************************************************************
 178:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //
 179:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! Enables the processor interrupt
 180:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //!
 181:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! This function allows the processor to respond to interrupts.  This does not
 182:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! affect the set of interrupts enabled in the interrupt controller; it just
 183:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! gates the single interrupt from the controller to the processor.
 184:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //!
 185:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! \return Returns \b true if interrupts were disabled when the function was
 186:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! called or \b false if they were initially enabled.
 187:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //
 188:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //*****************************************************************************
 189:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** bool
 190:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** IntMasterEnable(void)
 191:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** {
 151              		.loc 1 191 0
 152              		.cfi_startproc
 153              		@ args = 0, pretend = 0, frame = 0
 154              		@ frame_needed = 1, uses_anonymous_args = 0
 155 0008 80B5     		push	{r7, lr}
 156              		.cfi_def_cfa_offset 8
 157              		.cfi_offset 7, -8
 158              		.cfi_offset 14, -4
 159 000a 00AF     		add	r7, sp, #0
 160              		.cfi_def_cfa_register 7
 192:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     //
 193:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     // Enable processor interrupts.
 194:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     //
 195:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     return(CPUcpsie());
 161              		.loc 1 195 0
 162 000c FFF7FEFF 		bl	CPUcpsie
 163 0010 0346     		mov	r3, r0
 164 0012 002B     		cmp	r3, #0
 165 0014 14BF     		ite	ne
 166 0016 0123     		movne	r3, #1
 167 0018 0023     		moveq	r3, #0
 168 001a DBB2     		uxtb	r3, r3
 196:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** }
 169              		.loc 1 196 0
 170 001c 1846     		mov	r0, r3
 171 001e 80BD     		pop	{r7, pc}
 172              		.cfi_endproc
 173              	.LFE1:
 175              		.align	2
 176              		.global	IntMasterDisable
 177              		.thumb
 178              		.thumb_func
 180              	IntMasterDisable:
 181              	.LFB2:
 197:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** 
 198:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //*****************************************************************************
 199:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //
 200:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! Disables the processor interrupt
 201:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //!
 202:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! This function prevents the processor from receiving interrupts. This does
 203:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! not affect the set of interrupts enabled in the interrupt controller; it
 204:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! just gates the single interrupt from the controller to the processor.
 205:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //!
 206:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! \return Returns \b true if interrupts were already disabled when the
 207:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! function was called or \b false if they were initially enabled.
 208:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //
 209:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //*****************************************************************************
 210:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** bool
 211:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** IntMasterDisable(void)
 212:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** {
 182              		.loc 1 212 0
 183              		.cfi_startproc
 184              		@ args = 0, pretend = 0, frame = 0
 185              		@ frame_needed = 1, uses_anonymous_args = 0
 186 0020 80B5     		push	{r7, lr}
 187              		.cfi_def_cfa_offset 8
 188              		.cfi_offset 7, -8
 189              		.cfi_offset 14, -4
 190 0022 00AF     		add	r7, sp, #0
 191              		.cfi_def_cfa_register 7
 213:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     //
 214:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     // Disable processor interrupts.
 215:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     //
 216:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     return(CPUcpsid());
 192              		.loc 1 216 0
 193 0024 FFF7FEFF 		bl	CPUcpsid
 194 0028 0346     		mov	r3, r0
 195 002a 002B     		cmp	r3, #0
 196 002c 14BF     		ite	ne
 197 002e 0123     		movne	r3, #1
 198 0030 0023     		moveq	r3, #0
 199 0032 DBB2     		uxtb	r3, r3
 217:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** }
 200              		.loc 1 217 0
 201 0034 1846     		mov	r0, r3
 202 0036 80BD     		pop	{r7, pc}
 203              		.cfi_endproc
 204              	.LFE2:
 206              		.align	2
 207              		.global	IntRegister
 208              		.thumb
 209              		.thumb_func
 211              	IntRegister:
 212              	.LFB3:
 218:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** 
 219:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //*****************************************************************************
 220:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //
 221:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! Registers a function to be called when an interrupt occurs
 222:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //!
 223:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! \param ui32Interrupt specifies the interrupt in question.
 224:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! \param pfnHandler is a pointer to the function to be called.
 225:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //!
 226:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! This function specifies the handler function to be called when the
 227:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! given interrupt is asserted to the processor.  When the interrupt occurs,
 228:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! if it is enabled (through IntEnable()), the handler function is called in
 229:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! interrupt context. Because the handler function can preempt other code, care
 230:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! must be taken to protect memory or peripherals that are accessed by the
 231:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! handler and other nonhandler code.
 232:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //!
 233:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! \note This function (directly or indirectly through a peripheral
 234:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! driver interrupt register function) moves the interrupt vector table from
 235:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! flash to SRAM.  Therefore, care must be taken when linking the application
 236:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! to ensure that the SRAM vector table is located at the beginning of SRAM;
 237:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! otherwise NVIC will not look in the correct portion of memory for the
 238:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! vector table (it requires the vector table be on a 1-kB memory alignment).
 239:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! Normally, the SRAM vector table is so placed through the use of linker
 240:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! scripts. See the discussion of compile-time versus runtime interrupt handler
 241:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! registration in the introduction to this chapter.
 242:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //!
 243:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! \return None
 244:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //
 245:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //*****************************************************************************
 246:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** void
 247:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** IntRegister(uint32_t ui32Interrupt, void (*pfnHandler)(void))
 248:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** {
 213              		.loc 1 248 0
 214              		.cfi_startproc
 215              		@ args = 0, pretend = 0, frame = 16
 216              		@ frame_needed = 1, uses_anonymous_args = 0
 217              		@ link register save eliminated.
 218 0038 80B4     		push	{r7}
 219              		.cfi_def_cfa_offset 4
 220              		.cfi_offset 7, -4
 221 003a 85B0     		sub	sp, sp, #20
 222              		.cfi_def_cfa_offset 24
 223 003c 00AF     		add	r7, sp, #0
 224              		.cfi_def_cfa_register 7
 225 003e 7860     		str	r0, [r7, #4]
 226 0040 3960     		str	r1, [r7]
 249:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     uint32_t ui32Idx, ui32Value;
 250:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** 
 251:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     //
 252:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     // Check the arguments.
 253:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     //
 254:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     ASSERT(ui32Interrupt < NUM_INTERRUPTS);
 255:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** 
 256:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     // Check below could be removed in final application
 257:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** #ifdef CC2538_USE_ALTERNATE_INTERRUPT_MAP
 258:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     ASSERT(IntAltMapIsEnabled());
 259:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** #else
 260:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     ASSERT(~IntAltMapIsEnabled());
 261:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** #endif
 262:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** 
 263:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     //
 264:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     // Make sure that the RAM vector table is correctly aligned.
 265:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     //
 266:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     ASSERT(((uint32_t)g_pfnRAMVectors & 0x000003ff) == 0);
 267:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** 
 268:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     //
 269:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     // See if the RAM vector table has been initialized.
 270:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     //
 271:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     if(HWREG(NVIC_VTABLE) != (uint32_t)g_pfnRAMVectors)
 227              		.loc 1 271 0
 228 0042 144B     		ldr	r3, .L11
 229 0044 1B68     		ldr	r3, [r3]
 230 0046 144A     		ldr	r2, .L11+4
 231 0048 9342     		cmp	r3, r2
 232 004a 18D0     		beq	.L8
 272:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     {
 273:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         //
 274:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         // Copy the vector table from the beginning of FLASH to the RAM vector
 275:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         // table.
 276:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         //
 277:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         ui32Value = HWREG(NVIC_VTABLE);
 233              		.loc 1 277 0
 234 004c 114B     		ldr	r3, .L11
 235 004e 1B68     		ldr	r3, [r3]
 236 0050 BB60     		str	r3, [r7, #8]
 278:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         for(ui32Idx = 0; ui32Idx < NUM_INTERRUPTS; ui32Idx++)
 237              		.loc 1 278 0
 238 0052 0023     		movs	r3, #0
 239 0054 FB60     		str	r3, [r7, #12]
 240 0056 0CE0     		b	.L9
 241              	.L10:
 279:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         {
 280:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****             g_pfnRAMVectors[ui32Idx] = (void (*)(void))HWREG((ui32Idx * 4) +
 242              		.loc 1 280 0 discriminator 3
 243 0058 FB68     		ldr	r3, [r7, #12]
 244 005a 9A00     		lsls	r2, r3, #2
 245 005c BB68     		ldr	r3, [r7, #8]
 246 005e 1344     		add	r3, r3, r2
 247 0060 1B68     		ldr	r3, [r3]
 248 0062 1946     		mov	r1, r3
 249 0064 0C4A     		ldr	r2, .L11+4
 250 0066 FB68     		ldr	r3, [r7, #12]
 251 0068 42F82310 		str	r1, [r2, r3, lsl #2]
 278:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         for(ui32Idx = 0; ui32Idx < NUM_INTERRUPTS; ui32Idx++)
 252              		.loc 1 278 0 discriminator 3
 253 006c FB68     		ldr	r3, [r7, #12]
 254 006e 0133     		adds	r3, r3, #1
 255 0070 FB60     		str	r3, [r7, #12]
 256              	.L9:
 278:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         for(ui32Idx = 0; ui32Idx < NUM_INTERRUPTS; ui32Idx++)
 257              		.loc 1 278 0 is_stmt 0 discriminator 1
 258 0072 FB68     		ldr	r3, [r7, #12]
 259 0074 A22B     		cmp	r3, #162
 260 0076 EFD9     		bls	.L10
 281:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****                                        ui32Value);
 282:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         }
 283:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** 
 284:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         //
 285:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         // Point NVIC at the RAM vector table.
 286:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         //
 287:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         HWREG(NVIC_VTABLE) = (uint32_t)g_pfnRAMVectors;
 261              		.loc 1 287 0 is_stmt 1
 262 0078 064B     		ldr	r3, .L11
 263 007a 074A     		ldr	r2, .L11+4
 264 007c 1A60     		str	r2, [r3]
 265              	.L8:
 288:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     }
 289:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** 
 290:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     //
 291:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     // Save the interrupt handler.
 292:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     //
 293:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     g_pfnRAMVectors[ui32Interrupt] = pfnHandler;
 266              		.loc 1 293 0
 267 007e 0649     		ldr	r1, .L11+4
 268 0080 7B68     		ldr	r3, [r7, #4]
 269 0082 3A68     		ldr	r2, [r7]
 270 0084 41F82320 		str	r2, [r1, r3, lsl #2]
 294:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** }
 271              		.loc 1 294 0
 272 0088 00BF     		nop
 273 008a 1437     		adds	r7, r7, #20
 274              		.cfi_def_cfa_offset 4
 275 008c BD46     		mov	sp, r7
 276              		.cfi_def_cfa_register 13
 277              		@ sp needed
 278 008e 80BC     		pop	{r7}
 279              		.cfi_restore 7
 280              		.cfi_def_cfa_offset 0
 281 0090 7047     		bx	lr
 282              	.L12:
 283 0092 00BF     		.align	2
 284              	.L11:
 285 0094 08ED00E0 		.word	-536810232
 286 0098 00000000 		.word	g_pfnRAMVectors
 287              		.cfi_endproc
 288              	.LFE3:
 290              		.align	2
 291              		.global	IntUnregister
 292              		.thumb
 293              		.thumb_func
 295              	IntUnregister:
 296              	.LFB4:
 295:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** 
 296:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //*****************************************************************************
 297:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //
 298:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! Unregisters the function to be called when an interrupt occurs
 299:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //!
 300:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! \param ui32Interrupt specifies the interrupt in question.
 301:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //!
 302:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! This function indicates that no handler should be called when the
 303:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! given interrupt is asserted to the processor.  The interrupt source is
 304:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! automatically disabled (through IntDisable()) if necessary.
 305:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //!
 306:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! \sa See IntRegister() for important information about registering interrupt
 307:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! handlers.
 308:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //!
 309:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! \return None
 310:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //
 311:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //*****************************************************************************
 312:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** void
 313:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** IntUnregister(uint32_t ui32Interrupt)
 314:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** {
 297              		.loc 1 314 0
 298              		.cfi_startproc
 299              		@ args = 0, pretend = 0, frame = 8
 300              		@ frame_needed = 1, uses_anonymous_args = 0
 301              		@ link register save eliminated.
 302 009c 80B4     		push	{r7}
 303              		.cfi_def_cfa_offset 4
 304              		.cfi_offset 7, -4
 305 009e 83B0     		sub	sp, sp, #12
 306              		.cfi_def_cfa_offset 16
 307 00a0 00AF     		add	r7, sp, #0
 308              		.cfi_def_cfa_register 7
 309 00a2 7860     		str	r0, [r7, #4]
 315:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     //
 316:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     // Check the arguments.
 317:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     //
 318:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     ASSERT(ui32Interrupt < NUM_INTERRUPTS);
 319:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** 
 320:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     //
 321:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     // Check that at least one interrupt was dynamically registered
 322:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     // (by calling IntRegister())
 323:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     //
 324:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     ASSERT(HWREG(NVIC_VTABLE) == (uint32_t)g_pfnRAMVectors);
 325:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** 
 326:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     // Check below could be removed in final application
 327:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** #ifdef CC2538_USE_ALTERNATE_INTERRUPT_MAP
 328:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     ASSERT(IntAltMapIsEnabled());
 329:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** #else
 330:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     ASSERT(~IntAltMapIsEnabled());
 331:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** #endif
 332:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** 
 333:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** 
 334:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     //
 335:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     // Reset the interrupt handler.
 336:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     //
 337:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     g_pfnRAMVectors[ui32Interrupt] = IntDefaultHandler;
 310              		.loc 1 337 0
 311 00a4 044A     		ldr	r2, .L14
 312 00a6 7B68     		ldr	r3, [r7, #4]
 313 00a8 0449     		ldr	r1, .L14+4
 314 00aa 42F82310 		str	r1, [r2, r3, lsl #2]
 338:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** }
 315              		.loc 1 338 0
 316 00ae 00BF     		nop
 317 00b0 0C37     		adds	r7, r7, #12
 318              		.cfi_def_cfa_offset 4
 319 00b2 BD46     		mov	sp, r7
 320              		.cfi_def_cfa_register 13
 321              		@ sp needed
 322 00b4 80BC     		pop	{r7}
 323              		.cfi_restore 7
 324              		.cfi_def_cfa_offset 0
 325 00b6 7047     		bx	lr
 326              	.L15:
 327              		.align	2
 328              	.L14:
 329 00b8 00000000 		.word	g_pfnRAMVectors
 330 00bc 00000000 		.word	IntDefaultHandler
 331              		.cfi_endproc
 332              	.LFE4:
 334              		.align	2
 335              		.global	IntPriorityGroupingSet
 336              		.thumb
 337              		.thumb_func
 339              	IntPriorityGroupingSet:
 340              	.LFB5:
 339:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** 
 340:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //*****************************************************************************
 341:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //
 342:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! Sets the priority grouping of the interrupt controller
 343:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //!
 344:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! \param ui32Bits specifies the number of bits of preemptable priority.
 345:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //!
 346:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! This function specifies the split between preemptable priority levels and
 347:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! subpriority levels in the interrupt priority specification.  The range of
 348:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! the grouping values depend on the hardware implementation; on
 349:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! the CC2538 device family, 3 bits are available for hardware interrupt
 350:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! prioritization and therefore priority grouping values of three through
 351:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! seven have the same effect.
 352:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //!
 353:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! \return None
 354:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //
 355:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //*****************************************************************************
 356:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** void
 357:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** IntPriorityGroupingSet(uint32_t ui32Bits)
 358:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** {
 341              		.loc 1 358 0
 342              		.cfi_startproc
 343              		@ args = 0, pretend = 0, frame = 8
 344              		@ frame_needed = 1, uses_anonymous_args = 0
 345              		@ link register save eliminated.
 346 00c0 80B4     		push	{r7}
 347              		.cfi_def_cfa_offset 4
 348              		.cfi_offset 7, -4
 349 00c2 83B0     		sub	sp, sp, #12
 350              		.cfi_def_cfa_offset 16
 351 00c4 00AF     		add	r7, sp, #0
 352              		.cfi_def_cfa_register 7
 353 00c6 7860     		str	r0, [r7, #4]
 359:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     //
 360:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     // Check the arguments.
 361:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     //
 362:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     ASSERT(ui32Bits < NUM_PRIORITY);
 363:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** 
 364:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     //
 365:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     // Set the priority grouping.
 366:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     //
 367:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     HWREG(NVIC_APINT) = NVIC_APINT_VECTKEY | g_pui32Priority[ui32Bits];
 354              		.loc 1 367 0
 355 00c8 074A     		ldr	r2, .L17
 356 00ca 0849     		ldr	r1, .L17+4
 357 00cc 7B68     		ldr	r3, [r7, #4]
 358 00ce 51F82330 		ldr	r3, [r1, r3, lsl #2]
 359 00d2 43F0BF63 		orr	r3, r3, #100139008
 360 00d6 43F40033 		orr	r3, r3, #131072
 361 00da 1360     		str	r3, [r2]
 368:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** }
 362              		.loc 1 368 0
 363 00dc 00BF     		nop
 364 00de 0C37     		adds	r7, r7, #12
 365              		.cfi_def_cfa_offset 4
 366 00e0 BD46     		mov	sp, r7
 367              		.cfi_def_cfa_register 13
 368              		@ sp needed
 369 00e2 80BC     		pop	{r7}
 370              		.cfi_restore 7
 371              		.cfi_def_cfa_offset 0
 372 00e4 7047     		bx	lr
 373              	.L18:
 374 00e6 00BF     		.align	2
 375              	.L17:
 376 00e8 0CED00E0 		.word	-536810228
 377 00ec 00000000 		.word	g_pui32Priority
 378              		.cfi_endproc
 379              	.LFE5:
 381              		.align	2
 382              		.global	IntPriorityGroupingGet
 383              		.thumb
 384              		.thumb_func
 386              	IntPriorityGroupingGet:
 387              	.LFB6:
 369:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** 
 370:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //*****************************************************************************
 371:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //
 372:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! Gets the priority grouping of the interrupt controller
 373:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //!
 374:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! This function returns the split between preemptable priority levels and
 375:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! subpriority levels in the interrupt priority specification.
 376:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //!
 377:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! \return Returns the number of bits of preemptable priority
 378:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //
 379:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //*****************************************************************************
 380:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** uint32_t
 381:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** IntPriorityGroupingGet(void)
 382:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** {
 388              		.loc 1 382 0
 389              		.cfi_startproc
 390              		@ args = 0, pretend = 0, frame = 8
 391              		@ frame_needed = 1, uses_anonymous_args = 0
 392              		@ link register save eliminated.
 393 00f0 80B4     		push	{r7}
 394              		.cfi_def_cfa_offset 4
 395              		.cfi_offset 7, -4
 396 00f2 83B0     		sub	sp, sp, #12
 397              		.cfi_def_cfa_offset 16
 398 00f4 00AF     		add	r7, sp, #0
 399              		.cfi_def_cfa_register 7
 383:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     uint32_t ui32Loop, ui32Value;
 384:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** 
 385:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     //
 386:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     // Read the priority grouping.
 387:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     //
 388:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     ui32Value = HWREG(NVIC_APINT) & NVIC_APINT_PRIGROUP_M;
 400              		.loc 1 388 0
 401 00f6 0E4B     		ldr	r3, .L26
 402 00f8 1B68     		ldr	r3, [r3]
 403 00fa 03F4E063 		and	r3, r3, #1792
 404 00fe 3B60     		str	r3, [r7]
 389:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** 
 390:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     //
 391:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     // Loop through the priority grouping values.
 392:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     //
 393:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     for(ui32Loop = 0; ui32Loop < NUM_PRIORITY; ui32Loop++)
 405              		.loc 1 393 0
 406 0100 0023     		movs	r3, #0
 407 0102 7B60     		str	r3, [r7, #4]
 408 0104 09E0     		b	.L20
 409              	.L23:
 394:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     {
 395:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         //
 396:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         // Stop looping if this value matches.
 397:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         //
 398:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         if(ui32Value == g_pui32Priority[ui32Loop])
 410              		.loc 1 398 0
 411 0106 0B4A     		ldr	r2, .L26+4
 412 0108 7B68     		ldr	r3, [r7, #4]
 413 010a 52F82320 		ldr	r2, [r2, r3, lsl #2]
 414 010e 3B68     		ldr	r3, [r7]
 415 0110 9A42     		cmp	r2, r3
 416 0112 06D0     		beq	.L25
 393:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     {
 417              		.loc 1 393 0 discriminator 2
 418 0114 7B68     		ldr	r3, [r7, #4]
 419 0116 0133     		adds	r3, r3, #1
 420 0118 7B60     		str	r3, [r7, #4]
 421              	.L20:
 393:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     {
 422              		.loc 1 393 0 is_stmt 0 discriminator 1
 423 011a 7B68     		ldr	r3, [r7, #4]
 424 011c 072B     		cmp	r3, #7
 425 011e F2D9     		bls	.L23
 426 0120 00E0     		b	.L22
 427              	.L25:
 399:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         {
 400:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****             break;
 428              		.loc 1 400 0 is_stmt 1
 429 0122 00BF     		nop
 430              	.L22:
 401:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         }
 402:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     }
 403:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** 
 404:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     //
 405:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     // Return the number of priority bits.
 406:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     //
 407:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     return(ui32Loop);
 431              		.loc 1 407 0
 432 0124 7B68     		ldr	r3, [r7, #4]
 408:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** }
 433              		.loc 1 408 0
 434 0126 1846     		mov	r0, r3
 435 0128 0C37     		adds	r7, r7, #12
 436              		.cfi_def_cfa_offset 4
 437 012a BD46     		mov	sp, r7
 438              		.cfi_def_cfa_register 13
 439              		@ sp needed
 440 012c 80BC     		pop	{r7}
 441              		.cfi_restore 7
 442              		.cfi_def_cfa_offset 0
 443 012e 7047     		bx	lr
 444              	.L27:
 445              		.align	2
 446              	.L26:
 447 0130 0CED00E0 		.word	-536810228
 448 0134 00000000 		.word	g_pui32Priority
 449              		.cfi_endproc
 450              	.LFE6:
 452              		.align	2
 453              		.global	IntPrioritySet
 454              		.thumb
 455              		.thumb_func
 457              	IntPrioritySet:
 458              	.LFB7:
 409:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** 
 410:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //*****************************************************************************
 411:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //
 412:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! Sets the priority of an interrupt
 413:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //!
 414:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! \param ui32Interrupt specifies the interrupt in question.
 415:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! \param ui8Priority specifies the priority of the interrupt.
 416:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //!
 417:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! This function sets the priority of an interrupt.  When multiple
 418:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! interrupts are asserted simultaneously, those with the highest priority
 419:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! are processed before the lower priority interrupts.  Smaller numbers
 420:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! correspond to higher interrupt priorities; priority 0 is the highest
 421:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! interrupt priority.
 422:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //!
 423:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! The hardware priority mechanism will looks only at the upper N bits of the
 424:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! priority level (where N is 3 for the CC2538 device family), so any
 425:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! prioritization must be performed in those bits.  The remaining bits can be
 426:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! used to subprioritize the interrupt sources, and may be used by the
 427:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! hardware priority mechanism on a future part.  This arrangement allows
 428:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! priorities to migrate to different NVIC implementations without changing
 429:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! the gross prioritization of the interrupts.
 430:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! Thus for CC2538 to set a priority of 3, the parameter \e ui8Priority must
 431:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! be set to (3<<5).
 432:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //!
 433:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! \return None
 434:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //
 435:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //*****************************************************************************
 436:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** void
 437:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** IntPrioritySet(uint32_t ui32Interrupt, uint8_t ui8Priority)
 438:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** {
 459              		.loc 1 438 0
 460              		.cfi_startproc
 461              		@ args = 0, pretend = 0, frame = 16
 462              		@ frame_needed = 1, uses_anonymous_args = 0
 463              		@ link register save eliminated.
 464 0138 80B4     		push	{r7}
 465              		.cfi_def_cfa_offset 4
 466              		.cfi_offset 7, -4
 467 013a 85B0     		sub	sp, sp, #20
 468              		.cfi_def_cfa_offset 24
 469 013c 00AF     		add	r7, sp, #0
 470              		.cfi_def_cfa_register 7
 471 013e 7860     		str	r0, [r7, #4]
 472 0140 0B46     		mov	r3, r1
 473 0142 FB70     		strb	r3, [r7, #3]
 439:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     uint32_t ui32Temp;
 440:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** 
 441:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     //
 442:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     // Check the arguments.
 443:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     //
 444:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     ASSERT((ui32Interrupt >= 4) && (ui32Interrupt < NUM_INTERRUPTS));
 445:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** 
 446:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     //
 447:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     // Set the interrupt priority.
 448:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     //
 449:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     ui32Temp = HWREG(g_pui32Regs[ui32Interrupt >> 2]);
 474              		.loc 1 449 0
 475 0144 7B68     		ldr	r3, [r7, #4]
 476 0146 9B08     		lsrs	r3, r3, #2
 477 0148 144A     		ldr	r2, .L29
 478 014a 52F82330 		ldr	r3, [r2, r3, lsl #2]
 479 014e 1B68     		ldr	r3, [r3]
 480 0150 FB60     		str	r3, [r7, #12]
 450:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     ui32Temp &= ~(0xFF << (8 * (ui32Interrupt & 3)));
 481              		.loc 1 450 0
 482 0152 7B68     		ldr	r3, [r7, #4]
 483 0154 03F00303 		and	r3, r3, #3
 484 0158 DB00     		lsls	r3, r3, #3
 485 015a FF22     		movs	r2, #255
 486 015c 02FA03F3 		lsl	r3, r2, r3
 487 0160 DB43     		mvns	r3, r3
 488 0162 1A46     		mov	r2, r3
 489 0164 FB68     		ldr	r3, [r7, #12]
 490 0166 1340     		ands	r3, r3, r2
 491 0168 FB60     		str	r3, [r7, #12]
 451:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     ui32Temp |= ui8Priority << (8 * (ui32Interrupt & 3));
 492              		.loc 1 451 0
 493 016a FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 494 016c 7B68     		ldr	r3, [r7, #4]
 495 016e 03F00303 		and	r3, r3, #3
 496 0172 DB00     		lsls	r3, r3, #3
 497 0174 02FA03F3 		lsl	r3, r2, r3
 498 0178 1A46     		mov	r2, r3
 499 017a FB68     		ldr	r3, [r7, #12]
 500 017c 1343     		orrs	r3, r3, r2
 501 017e FB60     		str	r3, [r7, #12]
 452:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     HWREG(g_pui32Regs[ui32Interrupt >> 2]) = ui32Temp;
 502              		.loc 1 452 0
 503 0180 7B68     		ldr	r3, [r7, #4]
 504 0182 9B08     		lsrs	r3, r3, #2
 505 0184 054A     		ldr	r2, .L29
 506 0186 52F82330 		ldr	r3, [r2, r3, lsl #2]
 507 018a 1A46     		mov	r2, r3
 508 018c FB68     		ldr	r3, [r7, #12]
 509 018e 1360     		str	r3, [r2]
 453:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** }
 510              		.loc 1 453 0
 511 0190 00BF     		nop
 512 0192 1437     		adds	r7, r7, #20
 513              		.cfi_def_cfa_offset 4
 514 0194 BD46     		mov	sp, r7
 515              		.cfi_def_cfa_register 13
 516              		@ sp needed
 517 0196 80BC     		pop	{r7}
 518              		.cfi_restore 7
 519              		.cfi_def_cfa_offset 0
 520 0198 7047     		bx	lr
 521              	.L30:
 522 019a 00BF     		.align	2
 523              	.L29:
 524 019c 20000000 		.word	g_pui32Regs
 525              		.cfi_endproc
 526              	.LFE7:
 528              		.align	2
 529              		.global	IntPriorityGet
 530              		.thumb
 531              		.thumb_func
 533              	IntPriorityGet:
 534              	.LFB8:
 454:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** 
 455:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //*****************************************************************************
 456:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //
 457:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! Gets the priority of an interrupt
 458:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //!
 459:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! \param ui32Interrupt specifies the interrupt in question.
 460:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //!
 461:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! This function gets the priority of an interrupt.  See IntPrioritySet() for
 462:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! a definition of the priority value.
 463:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //!
 464:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! \return Returns the interrupt priority, or -1 if an invalid interrupt was
 465:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! specified
 466:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //
 467:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //*****************************************************************************
 468:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** int32_t
 469:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** IntPriorityGet(uint32_t ui32Interrupt)
 470:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** {
 535              		.loc 1 470 0
 536              		.cfi_startproc
 537              		@ args = 0, pretend = 0, frame = 8
 538              		@ frame_needed = 1, uses_anonymous_args = 0
 539              		@ link register save eliminated.
 540 01a0 80B4     		push	{r7}
 541              		.cfi_def_cfa_offset 4
 542              		.cfi_offset 7, -4
 543 01a2 83B0     		sub	sp, sp, #12
 544              		.cfi_def_cfa_offset 16
 545 01a4 00AF     		add	r7, sp, #0
 546              		.cfi_def_cfa_register 7
 547 01a6 7860     		str	r0, [r7, #4]
 471:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     //
 472:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     // Check the arguments.
 473:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     //
 474:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     ASSERT((ui32Interrupt >= 4) && (ui32Interrupt < NUM_INTERRUPTS));
 475:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** 
 476:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     //
 477:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     // Return the interrupt priority.
 478:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     //
 479:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     return((HWREG(g_pui32Regs[ui32Interrupt >> 2]) >> (8 * (ui32Interrupt & 3))) &
 548              		.loc 1 479 0
 549 01a8 7B68     		ldr	r3, [r7, #4]
 550 01aa 9B08     		lsrs	r3, r3, #2
 551 01ac 074A     		ldr	r2, .L33
 552 01ae 52F82330 		ldr	r3, [r2, r3, lsl #2]
 553 01b2 1A68     		ldr	r2, [r3]
 554 01b4 7B68     		ldr	r3, [r7, #4]
 555 01b6 03F00303 		and	r3, r3, #3
 556 01ba DB00     		lsls	r3, r3, #3
 557 01bc 22FA03F3 		lsr	r3, r2, r3
 558 01c0 DBB2     		uxtb	r3, r3
 480:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****            0xFF);
 481:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** }
 559              		.loc 1 481 0
 560 01c2 1846     		mov	r0, r3
 561 01c4 0C37     		adds	r7, r7, #12
 562              		.cfi_def_cfa_offset 4
 563 01c6 BD46     		mov	sp, r7
 564              		.cfi_def_cfa_register 13
 565              		@ sp needed
 566 01c8 80BC     		pop	{r7}
 567              		.cfi_restore 7
 568              		.cfi_def_cfa_offset 0
 569 01ca 7047     		bx	lr
 570              	.L34:
 571              		.align	2
 572              	.L33:
 573 01cc 20000000 		.word	g_pui32Regs
 574              		.cfi_endproc
 575              	.LFE8:
 577              		.align	2
 578              		.global	IntEnable
 579              		.thumb
 580              		.thumb_func
 582              	IntEnable:
 583              	.LFB9:
 482:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** 
 483:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //*****************************************************************************
 484:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //
 485:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! Enables an interrupt
 486:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //!
 487:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! \param ui32Interrupt specifies the interrupt to be enabled.
 488:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //!
 489:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! This function enables the specified interrupt in the interrupt controller.
 490:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! Other enables for the interrupt (such as at the peripheral level) are
 491:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! unaffected by this function.
 492:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //!
 493:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! \return None
 494:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //
 495:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //*****************************************************************************
 496:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** void
 497:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** IntEnable(uint32_t ui32Interrupt)
 498:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** {
 584              		.loc 1 498 0
 585              		.cfi_startproc
 586              		@ args = 0, pretend = 0, frame = 8
 587              		@ frame_needed = 1, uses_anonymous_args = 0
 588              		@ link register save eliminated.
 589 01d0 80B4     		push	{r7}
 590              		.cfi_def_cfa_offset 4
 591              		.cfi_offset 7, -4
 592 01d2 83B0     		sub	sp, sp, #12
 593              		.cfi_def_cfa_offset 16
 594 01d4 00AF     		add	r7, sp, #0
 595              		.cfi_def_cfa_register 7
 596 01d6 7860     		str	r0, [r7, #4]
 499:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     //
 500:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     // Check the arguments.
 501:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     //
 502:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     ASSERT(ui32Interrupt < NUM_INTERRUPTS);
 503:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** 
 504:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     //
 505:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     // Determine the interrupt to enable.
 506:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     //
 507:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     if(ui32Interrupt == FAULT_MPU)
 597              		.loc 1 507 0
 598 01d8 7B68     		ldr	r3, [r7, #4]
 599 01da 042B     		cmp	r3, #4
 600 01dc 06D1     		bne	.L36
 508:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     {
 509:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         //
 510:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         // Enable the MemManage interrupt.
 511:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         //
 512:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         HWREG(NVIC_SYS_HND_CTRL) |= NVIC_SYS_HND_CTRL_MEM;
 601              		.loc 1 512 0
 602 01de 1E4A     		ldr	r2, .L42
 603 01e0 1D4B     		ldr	r3, .L42
 604 01e2 1B68     		ldr	r3, [r3]
 605 01e4 43F48033 		orr	r3, r3, #65536
 606 01e8 1360     		str	r3, [r2]
 513:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     }
 514:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     else if(ui32Interrupt == FAULT_BUS)
 515:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     {
 516:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         //
 517:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         // Enable the bus fault interrupt.
 518:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         //
 519:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         HWREG(NVIC_SYS_HND_CTRL) |= NVIC_SYS_HND_CTRL_BUS;
 520:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     }
 521:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     else if(ui32Interrupt == FAULT_USAGE)
 522:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     {
 523:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         //
 524:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         // Enable the usage fault interrupt.
 525:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         //
 526:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         HWREG(NVIC_SYS_HND_CTRL) |= NVIC_SYS_HND_CTRL_USAGE;
 527:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     }
 528:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     else if(ui32Interrupt == FAULT_SYSTICK)
 529:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     {
 530:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         //
 531:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         // Enable the System Tick interrupt.
 532:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         //
 533:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         HWREG(NVIC_ST_CTRL) |= NVIC_ST_CTRL_INTEN;
 534:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     }
 535:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     else if(ui32Interrupt >= 16)
 536:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     {
 537:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         //
 538:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         // Enable the general interrupt.
 539:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         //
 540:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         HWREG(g_pui32EnRegs[(ui32Interrupt - 16) / 32]) =
 541:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****             1 << ((ui32Interrupt - 16) & 31);
 542:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     }
 543:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** }
 607              		.loc 1 543 0
 608 01ea 2FE0     		b	.L41
 609              	.L36:
 514:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     {
 610              		.loc 1 514 0
 611 01ec 7B68     		ldr	r3, [r7, #4]
 612 01ee 052B     		cmp	r3, #5
 613 01f0 06D1     		bne	.L38
 519:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     }
 614              		.loc 1 519 0
 615 01f2 194A     		ldr	r2, .L42
 616 01f4 184B     		ldr	r3, .L42
 617 01f6 1B68     		ldr	r3, [r3]
 618 01f8 43F40033 		orr	r3, r3, #131072
 619 01fc 1360     		str	r3, [r2]
 620              		.loc 1 543 0
 621 01fe 25E0     		b	.L41
 622              	.L38:
 521:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     {
 623              		.loc 1 521 0
 624 0200 7B68     		ldr	r3, [r7, #4]
 625 0202 062B     		cmp	r3, #6
 626 0204 06D1     		bne	.L39
 526:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     }
 627              		.loc 1 526 0
 628 0206 144A     		ldr	r2, .L42
 629 0208 134B     		ldr	r3, .L42
 630 020a 1B68     		ldr	r3, [r3]
 631 020c 43F48023 		orr	r3, r3, #262144
 632 0210 1360     		str	r3, [r2]
 633              		.loc 1 543 0
 634 0212 1BE0     		b	.L41
 635              	.L39:
 528:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     {
 636              		.loc 1 528 0
 637 0214 7B68     		ldr	r3, [r7, #4]
 638 0216 0F2B     		cmp	r3, #15
 639 0218 06D1     		bne	.L40
 533:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     }
 640              		.loc 1 533 0
 641 021a 104A     		ldr	r2, .L42+4
 642 021c 0F4B     		ldr	r3, .L42+4
 643 021e 1B68     		ldr	r3, [r3]
 644 0220 43F00203 		orr	r3, r3, #2
 645 0224 1360     		str	r3, [r2]
 646              		.loc 1 543 0
 647 0226 11E0     		b	.L41
 648              	.L40:
 535:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     {
 649              		.loc 1 535 0
 650 0228 7B68     		ldr	r3, [r7, #4]
 651 022a 0F2B     		cmp	r3, #15
 652 022c 0ED9     		bls	.L41
 540:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****             1 << ((ui32Interrupt - 16) & 31);
 653              		.loc 1 540 0
 654 022e 7B68     		ldr	r3, [r7, #4]
 655 0230 103B     		subs	r3, r3, #16
 656 0232 5B09     		lsrs	r3, r3, #5
 657 0234 0A4A     		ldr	r2, .L42+8
 658 0236 52F82330 		ldr	r3, [r2, r3, lsl #2]
 659 023a 1946     		mov	r1, r3
 541:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     }
 660              		.loc 1 541 0
 661 023c 7B68     		ldr	r3, [r7, #4]
 662 023e 103B     		subs	r3, r3, #16
 663 0240 03F01F03 		and	r3, r3, #31
 664 0244 0122     		movs	r2, #1
 665 0246 02FA03F3 		lsl	r3, r2, r3
 540:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****             1 << ((ui32Interrupt - 16) & 31);
 666              		.loc 1 540 0
 667 024a 0B60     		str	r3, [r1]
 668              	.L41:
 669              		.loc 1 543 0
 670 024c 00BF     		nop
 671 024e 0C37     		adds	r7, r7, #12
 672              		.cfi_def_cfa_offset 4
 673 0250 BD46     		mov	sp, r7
 674              		.cfi_def_cfa_register 13
 675              		@ sp needed
 676 0252 80BC     		pop	{r7}
 677              		.cfi_restore 7
 678              		.cfi_def_cfa_offset 0
 679 0254 7047     		bx	lr
 680              	.L43:
 681 0256 00BF     		.align	2
 682              	.L42:
 683 0258 24ED00E0 		.word	-536810204
 684 025c 10E000E0 		.word	-536813552
 685 0260 C4000000 		.word	g_pui32EnRegs
 686              		.cfi_endproc
 687              	.LFE9:
 689              		.align	2
 690              		.global	IntDisable
 691              		.thumb
 692              		.thumb_func
 694              	IntDisable:
 695              	.LFB10:
 544:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** 
 545:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //*****************************************************************************
 546:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //
 547:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! Disables an interrupt
 548:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //!
 549:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! \param ui32Interrupt specifies the interrupt to be disabled.
 550:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //!
 551:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! This function disables specified interrupt in the interrupt controller.
 552:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! Other enables for the interrupt (such as at the peripheral level) are
 553:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! unaffected by this function.
 554:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //!
 555:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! \return None
 556:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //
 557:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //*****************************************************************************
 558:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** void
 559:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** IntDisable(uint32_t ui32Interrupt)
 560:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** {
 696              		.loc 1 560 0
 697              		.cfi_startproc
 698              		@ args = 0, pretend = 0, frame = 8
 699              		@ frame_needed = 1, uses_anonymous_args = 0
 700              		@ link register save eliminated.
 701 0264 80B4     		push	{r7}
 702              		.cfi_def_cfa_offset 4
 703              		.cfi_offset 7, -4
 704 0266 83B0     		sub	sp, sp, #12
 705              		.cfi_def_cfa_offset 16
 706 0268 00AF     		add	r7, sp, #0
 707              		.cfi_def_cfa_register 7
 708 026a 7860     		str	r0, [r7, #4]
 561:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     //
 562:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     // Check the arguments.
 563:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     //
 564:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     ASSERT(ui32Interrupt < NUM_INTERRUPTS);
 565:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** 
 566:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     //
 567:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     // Determine the interrupt to disable.
 568:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     //
 569:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     if(ui32Interrupt == FAULT_MPU)
 709              		.loc 1 569 0
 710 026c 7B68     		ldr	r3, [r7, #4]
 711 026e 042B     		cmp	r3, #4
 712 0270 06D1     		bne	.L45
 570:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     {
 571:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         //
 572:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         // Disable the MemManage interrupt.
 573:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         //
 574:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         HWREG(NVIC_SYS_HND_CTRL) &= ~(NVIC_SYS_HND_CTRL_MEM);
 713              		.loc 1 574 0
 714 0272 1E4A     		ldr	r2, .L51
 715 0274 1D4B     		ldr	r3, .L51
 716 0276 1B68     		ldr	r3, [r3]
 717 0278 23F48033 		bic	r3, r3, #65536
 718 027c 1360     		str	r3, [r2]
 575:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     }
 576:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     else if(ui32Interrupt == FAULT_BUS)
 577:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     {
 578:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         //
 579:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         // Disable the bus fault interrupt.
 580:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         //
 581:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         HWREG(NVIC_SYS_HND_CTRL) &= ~(NVIC_SYS_HND_CTRL_BUS);
 582:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     }
 583:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     else if(ui32Interrupt == FAULT_USAGE)
 584:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     {
 585:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         //
 586:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         // Disable the usage fault interrupt.
 587:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         //
 588:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         HWREG(NVIC_SYS_HND_CTRL) &= ~(NVIC_SYS_HND_CTRL_USAGE);
 589:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     }
 590:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     else if(ui32Interrupt == FAULT_SYSTICK)
 591:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     {
 592:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         //
 593:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         // Disable the System Tick interrupt.
 594:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         //
 595:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         HWREG(NVIC_ST_CTRL) &= ~(NVIC_ST_CTRL_INTEN);
 596:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     }
 597:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     else if(ui32Interrupt >= 16)
 598:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     {
 599:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         //
 600:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         // Disable the general interrupt.
 601:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         //
 602:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         HWREG(g_pui32DisRegs[(ui32Interrupt - 16) / 32]) =
 603:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****             1 << ((ui32Interrupt - 16) & 31);
 604:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     }
 605:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** }
 719              		.loc 1 605 0
 720 027e 2FE0     		b	.L50
 721              	.L45:
 576:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     {
 722              		.loc 1 576 0
 723 0280 7B68     		ldr	r3, [r7, #4]
 724 0282 052B     		cmp	r3, #5
 725 0284 06D1     		bne	.L47
 581:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     }
 726              		.loc 1 581 0
 727 0286 194A     		ldr	r2, .L51
 728 0288 184B     		ldr	r3, .L51
 729 028a 1B68     		ldr	r3, [r3]
 730 028c 23F40033 		bic	r3, r3, #131072
 731 0290 1360     		str	r3, [r2]
 732              		.loc 1 605 0
 733 0292 25E0     		b	.L50
 734              	.L47:
 583:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     {
 735              		.loc 1 583 0
 736 0294 7B68     		ldr	r3, [r7, #4]
 737 0296 062B     		cmp	r3, #6
 738 0298 06D1     		bne	.L48
 588:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     }
 739              		.loc 1 588 0
 740 029a 144A     		ldr	r2, .L51
 741 029c 134B     		ldr	r3, .L51
 742 029e 1B68     		ldr	r3, [r3]
 743 02a0 23F48023 		bic	r3, r3, #262144
 744 02a4 1360     		str	r3, [r2]
 745              		.loc 1 605 0
 746 02a6 1BE0     		b	.L50
 747              	.L48:
 590:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     {
 748              		.loc 1 590 0
 749 02a8 7B68     		ldr	r3, [r7, #4]
 750 02aa 0F2B     		cmp	r3, #15
 751 02ac 06D1     		bne	.L49
 595:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     }
 752              		.loc 1 595 0
 753 02ae 104A     		ldr	r2, .L51+4
 754 02b0 0F4B     		ldr	r3, .L51+4
 755 02b2 1B68     		ldr	r3, [r3]
 756 02b4 23F00203 		bic	r3, r3, #2
 757 02b8 1360     		str	r3, [r2]
 758              		.loc 1 605 0
 759 02ba 11E0     		b	.L50
 760              	.L49:
 597:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     {
 761              		.loc 1 597 0
 762 02bc 7B68     		ldr	r3, [r7, #4]
 763 02be 0F2B     		cmp	r3, #15
 764 02c0 0ED9     		bls	.L50
 602:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****             1 << ((ui32Interrupt - 16) & 31);
 765              		.loc 1 602 0
 766 02c2 7B68     		ldr	r3, [r7, #4]
 767 02c4 103B     		subs	r3, r3, #16
 768 02c6 5B09     		lsrs	r3, r3, #5
 769 02c8 0A4A     		ldr	r2, .L51+8
 770 02ca 52F82330 		ldr	r3, [r2, r3, lsl #2]
 771 02ce 1946     		mov	r1, r3
 603:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     }
 772              		.loc 1 603 0
 773 02d0 7B68     		ldr	r3, [r7, #4]
 774 02d2 103B     		subs	r3, r3, #16
 775 02d4 03F01F03 		and	r3, r3, #31
 776 02d8 0122     		movs	r2, #1
 777 02da 02FA03F3 		lsl	r3, r2, r3
 602:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****             1 << ((ui32Interrupt - 16) & 31);
 778              		.loc 1 602 0
 779 02de 0B60     		str	r3, [r1]
 780              	.L50:
 781              		.loc 1 605 0
 782 02e0 00BF     		nop
 783 02e2 0C37     		adds	r7, r7, #12
 784              		.cfi_def_cfa_offset 4
 785 02e4 BD46     		mov	sp, r7
 786              		.cfi_def_cfa_register 13
 787              		@ sp needed
 788 02e6 80BC     		pop	{r7}
 789              		.cfi_restore 7
 790              		.cfi_def_cfa_offset 0
 791 02e8 7047     		bx	lr
 792              	.L52:
 793 02ea 00BF     		.align	2
 794              	.L51:
 795 02ec 24ED00E0 		.word	-536810204
 796 02f0 10E000E0 		.word	-536813552
 797 02f4 D8000000 		.word	g_pui32DisRegs
 798              		.cfi_endproc
 799              	.LFE10:
 801              		.align	2
 802              		.global	IntPendSet
 803              		.thumb
 804              		.thumb_func
 806              	IntPendSet:
 807              	.LFB11:
 606:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** 
 607:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //*****************************************************************************
 608:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //
 609:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! Pends an interrupt
 610:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //!
 611:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! \param ui32Interrupt specifies the interrupt to be pended.
 612:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //!
 613:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! This function pends the specified interrupt in the interrupt controller.
 614:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! This causes the interrupt controller to execute the corresponding interrupt
 615:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! handler at the next available time, based on the current interrupt state
 616:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! priorities.  For example, if called by a higher priority interrupt handler,
 617:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! the specified interrupt handler is not called until after the current
 618:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! interrupt handler executes. The interrupt must have been enabled for
 619:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! it to be called.
 620:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //!
 621:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! \return None
 622:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //
 623:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //*****************************************************************************
 624:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** void
 625:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** IntPendSet(uint32_t ui32Interrupt)
 626:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** {
 808              		.loc 1 626 0
 809              		.cfi_startproc
 810              		@ args = 0, pretend = 0, frame = 8
 811              		@ frame_needed = 1, uses_anonymous_args = 0
 812              		@ link register save eliminated.
 813 02f8 80B4     		push	{r7}
 814              		.cfi_def_cfa_offset 4
 815              		.cfi_offset 7, -4
 816 02fa 83B0     		sub	sp, sp, #12
 817              		.cfi_def_cfa_offset 16
 818 02fc 00AF     		add	r7, sp, #0
 819              		.cfi_def_cfa_register 7
 820 02fe 7860     		str	r0, [r7, #4]
 627:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     //
 628:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     // Check the arguments.
 629:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     //
 630:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     ASSERT(ui32Interrupt < NUM_INTERRUPTS);
 631:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** 
 632:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     //
 633:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     // Determine the interrupt to pend.
 634:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     //
 635:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     if(ui32Interrupt == FAULT_NMI)
 821              		.loc 1 635 0
 822 0300 7B68     		ldr	r3, [r7, #4]
 823 0302 022B     		cmp	r3, #2
 824 0304 06D1     		bne	.L54
 636:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     {
 637:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         //
 638:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         // Pend the NMI interrupt.
 639:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         //
 640:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         HWREG(NVIC_INT_CTRL) |= NVIC_INT_CTRL_NMI_SET;
 825              		.loc 1 640 0
 826 0306 194A     		ldr	r2, .L59
 827 0308 184B     		ldr	r3, .L59
 828 030a 1B68     		ldr	r3, [r3]
 829 030c 43F00043 		orr	r3, r3, #-2147483648
 830 0310 1360     		str	r3, [r2]
 641:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     }
 642:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     else if(ui32Interrupt == FAULT_PENDSV)
 643:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     {
 644:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         //
 645:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         // Pend the PendSV interrupt.
 646:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         //
 647:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         HWREG(NVIC_INT_CTRL) |= NVIC_INT_CTRL_PEND_SV;
 648:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     }
 649:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     else if(ui32Interrupt == FAULT_SYSTICK)
 650:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     {
 651:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         //
 652:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         // Pend the SysTick interrupt.
 653:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         //
 654:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         HWREG(NVIC_INT_CTRL) |= NVIC_INT_CTRL_PENDSTSET;
 655:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     }
 656:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     else if(ui32Interrupt >= 16)
 657:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     {
 658:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         //
 659:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         // Pend the general interrupt.
 660:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         //
 661:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         HWREG(g_pui32PendRegs[(ui32Interrupt - 16) / 32]) =
 662:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****             1 << ((ui32Interrupt - 16) & 31);
 663:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     }
 664:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** }
 831              		.loc 1 664 0
 832 0312 25E0     		b	.L58
 833              	.L54:
 642:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     {
 834              		.loc 1 642 0
 835 0314 7B68     		ldr	r3, [r7, #4]
 836 0316 0E2B     		cmp	r3, #14
 837 0318 06D1     		bne	.L56
 647:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     }
 838              		.loc 1 647 0
 839 031a 144A     		ldr	r2, .L59
 840 031c 134B     		ldr	r3, .L59
 841 031e 1B68     		ldr	r3, [r3]
 842 0320 43F08053 		orr	r3, r3, #268435456
 843 0324 1360     		str	r3, [r2]
 844              		.loc 1 664 0
 845 0326 1BE0     		b	.L58
 846              	.L56:
 649:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     {
 847              		.loc 1 649 0
 848 0328 7B68     		ldr	r3, [r7, #4]
 849 032a 0F2B     		cmp	r3, #15
 850 032c 06D1     		bne	.L57
 654:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     }
 851              		.loc 1 654 0
 852 032e 0F4A     		ldr	r2, .L59
 853 0330 0E4B     		ldr	r3, .L59
 854 0332 1B68     		ldr	r3, [r3]
 855 0334 43F08063 		orr	r3, r3, #67108864
 856 0338 1360     		str	r3, [r2]
 857              		.loc 1 664 0
 858 033a 11E0     		b	.L58
 859              	.L57:
 656:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     {
 860              		.loc 1 656 0
 861 033c 7B68     		ldr	r3, [r7, #4]
 862 033e 0F2B     		cmp	r3, #15
 863 0340 0ED9     		bls	.L58
 661:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****             1 << ((ui32Interrupt - 16) & 31);
 864              		.loc 1 661 0
 865 0342 7B68     		ldr	r3, [r7, #4]
 866 0344 103B     		subs	r3, r3, #16
 867 0346 5B09     		lsrs	r3, r3, #5
 868 0348 094A     		ldr	r2, .L59+4
 869 034a 52F82330 		ldr	r3, [r2, r3, lsl #2]
 870 034e 1946     		mov	r1, r3
 662:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     }
 871              		.loc 1 662 0
 872 0350 7B68     		ldr	r3, [r7, #4]
 873 0352 103B     		subs	r3, r3, #16
 874 0354 03F01F03 		and	r3, r3, #31
 875 0358 0122     		movs	r2, #1
 876 035a 02FA03F3 		lsl	r3, r2, r3
 661:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****             1 << ((ui32Interrupt - 16) & 31);
 877              		.loc 1 661 0
 878 035e 0B60     		str	r3, [r1]
 879              	.L58:
 880              		.loc 1 664 0
 881 0360 00BF     		nop
 882 0362 0C37     		adds	r7, r7, #12
 883              		.cfi_def_cfa_offset 4
 884 0364 BD46     		mov	sp, r7
 885              		.cfi_def_cfa_register 13
 886              		@ sp needed
 887 0366 80BC     		pop	{r7}
 888              		.cfi_restore 7
 889              		.cfi_def_cfa_offset 0
 890 0368 7047     		bx	lr
 891              	.L60:
 892 036a 00BF     		.align	2
 893              	.L59:
 894 036c 04ED00E0 		.word	-536810236
 895 0370 EC000000 		.word	g_pui32PendRegs
 896              		.cfi_endproc
 897              	.LFE11:
 899              		.align	2
 900              		.global	IntPendClear
 901              		.thumb
 902              		.thumb_func
 904              	IntPendClear:
 905              	.LFB12:
 665:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** 
 666:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //*****************************************************************************
 667:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //
 668:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! Unpends an interrupt
 669:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //!
 670:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! \param ui32Interrupt specifies the interrupt to be unpended.
 671:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //!
 672:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! This function unpends the specified interrupt in the interrupt controller.
 673:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! This will cause any previously generated interrupts that have not been
 674:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! handled yet (due to higher priority interrupts or the interrupt no having
 675:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! been enabled yet) to be discarded.
 676:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //!
 677:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! \return None
 678:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //
 679:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //*****************************************************************************
 680:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** void
 681:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** IntPendClear(uint32_t ui32Interrupt)
 682:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** {
 906              		.loc 1 682 0
 907              		.cfi_startproc
 908              		@ args = 0, pretend = 0, frame = 8
 909              		@ frame_needed = 1, uses_anonymous_args = 0
 910              		@ link register save eliminated.
 911 0374 80B4     		push	{r7}
 912              		.cfi_def_cfa_offset 4
 913              		.cfi_offset 7, -4
 914 0376 83B0     		sub	sp, sp, #12
 915              		.cfi_def_cfa_offset 16
 916 0378 00AF     		add	r7, sp, #0
 917              		.cfi_def_cfa_register 7
 918 037a 7860     		str	r0, [r7, #4]
 683:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     //
 684:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     // Check the arguments.
 685:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     //
 686:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     ASSERT(ui32Interrupt < NUM_INTERRUPTS);
 687:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** 
 688:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     //
 689:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     // Determine the interrupt to unpend.
 690:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     //
 691:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     if(ui32Interrupt == FAULT_PENDSV)
 919              		.loc 1 691 0
 920 037c 7B68     		ldr	r3, [r7, #4]
 921 037e 0E2B     		cmp	r3, #14
 922 0380 06D1     		bne	.L62
 692:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     {
 693:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         //
 694:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         // Unpend the PendSV interrupt.
 695:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         //
 696:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         HWREG(NVIC_INT_CTRL) |= NVIC_INT_CTRL_UNPEND_SV;
 923              		.loc 1 696 0
 924 0382 144A     		ldr	r2, .L66
 925 0384 134B     		ldr	r3, .L66
 926 0386 1B68     		ldr	r3, [r3]
 927 0388 43F00063 		orr	r3, r3, #134217728
 928 038c 1360     		str	r3, [r2]
 697:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     }
 698:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     else if(ui32Interrupt == FAULT_SYSTICK)
 699:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     {
 700:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         //
 701:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         // Unpend the SysTick interrupt.
 702:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         //
 703:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         HWREG(NVIC_INT_CTRL) |= NVIC_INT_CTRL_PENDSTCLR;
 704:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     }
 705:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     else if(ui32Interrupt >= 16)
 706:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     {
 707:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         //
 708:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         // Unpend the general interrupt.
 709:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         //
 710:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         HWREG(g_pui32UnpendRegs[(ui32Interrupt - 16) / 32]) =
 711:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****             1 << ((ui32Interrupt - 16) & 31);
 712:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     }
 713:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** }
 929              		.loc 1 713 0
 930 038e 1BE0     		b	.L65
 931              	.L62:
 698:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     {
 932              		.loc 1 698 0
 933 0390 7B68     		ldr	r3, [r7, #4]
 934 0392 0F2B     		cmp	r3, #15
 935 0394 06D1     		bne	.L64
 703:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     }
 936              		.loc 1 703 0
 937 0396 0F4A     		ldr	r2, .L66
 938 0398 0E4B     		ldr	r3, .L66
 939 039a 1B68     		ldr	r3, [r3]
 940 039c 43F00073 		orr	r3, r3, #33554432
 941 03a0 1360     		str	r3, [r2]
 942              		.loc 1 713 0
 943 03a2 11E0     		b	.L65
 944              	.L64:
 705:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     {
 945              		.loc 1 705 0
 946 03a4 7B68     		ldr	r3, [r7, #4]
 947 03a6 0F2B     		cmp	r3, #15
 948 03a8 0ED9     		bls	.L65
 710:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****             1 << ((ui32Interrupt - 16) & 31);
 949              		.loc 1 710 0
 950 03aa 7B68     		ldr	r3, [r7, #4]
 951 03ac 103B     		subs	r3, r3, #16
 952 03ae 5B09     		lsrs	r3, r3, #5
 953 03b0 094A     		ldr	r2, .L66+4
 954 03b2 52F82330 		ldr	r3, [r2, r3, lsl #2]
 955 03b6 1946     		mov	r1, r3
 711:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     }
 956              		.loc 1 711 0
 957 03b8 7B68     		ldr	r3, [r7, #4]
 958 03ba 103B     		subs	r3, r3, #16
 959 03bc 03F01F03 		and	r3, r3, #31
 960 03c0 0122     		movs	r2, #1
 961 03c2 02FA03F3 		lsl	r3, r2, r3
 710:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****             1 << ((ui32Interrupt - 16) & 31);
 962              		.loc 1 710 0
 963 03c6 0B60     		str	r3, [r1]
 964              	.L65:
 965              		.loc 1 713 0
 966 03c8 00BF     		nop
 967 03ca 0C37     		adds	r7, r7, #12
 968              		.cfi_def_cfa_offset 4
 969 03cc BD46     		mov	sp, r7
 970              		.cfi_def_cfa_register 13
 971              		@ sp needed
 972 03ce 80BC     		pop	{r7}
 973              		.cfi_restore 7
 974              		.cfi_def_cfa_offset 0
 975 03d0 7047     		bx	lr
 976              	.L67:
 977 03d2 00BF     		.align	2
 978              	.L66:
 979 03d4 04ED00E0 		.word	-536810236
 980 03d8 00010000 		.word	g_pui32UnpendRegs
 981              		.cfi_endproc
 982              	.LFE12:
 984              		.align	2
 985              		.global	IntPriorityMaskSet
 986              		.thumb
 987              		.thumb_func
 989              	IntPriorityMaskSet:
 990              	.LFB13:
 714:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** 
 715:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //*****************************************************************************
 716:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //
 717:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! Sets the priority masking level
 718:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //!
 719:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! \param ui32PriorityMask is the priority level that will be masked.
 720:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //!
 721:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! This function sets the interrupt priority masking level so that all
 722:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! interrupts at the specified or lesser priority level is masked.  This
 723:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! can be used to globally disable a set of interrupts with priority below
 724:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! a predetermined threshold.  A value of 0 disables priority
 725:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! masking.
 726:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //!
 727:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! Smaller numbers correspond to higher interrupt priorities.  For example,
 728:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! a priority level mask of 4 allows interrupts of priority level 0-3,
 729:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! and interrupts with a numerical priority of 4 and greater are blocked.
 730:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //!
 731:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! The hardware priority mechanism looks only at the upper N bits of the
 732:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! priority level (where N is 3 for the CC2538 device family), so any
 733:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! prioritization must be performed in those bits.
 734:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //!
 735:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! \return None
 736:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //
 737:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //*****************************************************************************
 738:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** void
 739:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** IntPriorityMaskSet(uint32_t ui32PriorityMask)
 740:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** {
 991              		.loc 1 740 0
 992              		.cfi_startproc
 993              		@ args = 0, pretend = 0, frame = 8
 994              		@ frame_needed = 1, uses_anonymous_args = 0
 995 03dc 80B5     		push	{r7, lr}
 996              		.cfi_def_cfa_offset 8
 997              		.cfi_offset 7, -8
 998              		.cfi_offset 14, -4
 999 03de 82B0     		sub	sp, sp, #8
 1000              		.cfi_def_cfa_offset 16
 1001 03e0 00AF     		add	r7, sp, #0
 1002              		.cfi_def_cfa_register 7
 1003 03e2 7860     		str	r0, [r7, #4]
 741:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     CPUbasepriSet(ui32PriorityMask);
 1004              		.loc 1 741 0
 1005 03e4 7868     		ldr	r0, [r7, #4]
 1006 03e6 FFF7FEFF 		bl	CPUbasepriSet
 742:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** }
 1007              		.loc 1 742 0
 1008 03ea 00BF     		nop
 1009 03ec 0837     		adds	r7, r7, #8
 1010              		.cfi_def_cfa_offset 8
 1011 03ee BD46     		mov	sp, r7
 1012              		.cfi_def_cfa_register 13
 1013              		@ sp needed
 1014 03f0 80BD     		pop	{r7, pc}
 1015              		.cfi_endproc
 1016              	.LFE13:
 1018 03f2 00BF     		.align	2
 1019              		.global	IntPriorityMaskGet
 1020              		.thumb
 1021              		.thumb_func
 1023              	IntPriorityMaskGet:
 1024              	.LFB14:
 743:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** 
 744:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //*****************************************************************************
 745:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //
 746:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! Gets the priority masking level
 747:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //!
 748:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! This function gets the current setting of the interrupt priority masking
 749:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! level.  The value returned is the priority level such that all interrupts
 750:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! of that priority and lesser priorities are masked.  A value of 0 disables
 751:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! priority masking.
 752:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //!
 753:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! Smaller numbers correspond to higher interrupt priorities.  For example,
 754:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! a priority level mask of 4 allows interrupts of priority level 0-3,
 755:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! and interrupts with a numerical priority of 4 and greater will be blocked.
 756:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //!
 757:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! The hardware priority mechanism looks only at the upper N bits of the
 758:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! priority level (where N is 3 for the CC2538 device family), so any
 759:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! prioritization must be performed in those bits.
 760:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //!
 761:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! \return Returns the value of the interrupt priority level mask
 762:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //
 763:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //*****************************************************************************
 764:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** uint32_t
 765:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** IntPriorityMaskGet(void)
 766:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** {
 1025              		.loc 1 766 0
 1026              		.cfi_startproc
 1027              		@ args = 0, pretend = 0, frame = 0
 1028              		@ frame_needed = 1, uses_anonymous_args = 0
 1029 03f4 80B5     		push	{r7, lr}
 1030              		.cfi_def_cfa_offset 8
 1031              		.cfi_offset 7, -8
 1032              		.cfi_offset 14, -4
 1033 03f6 00AF     		add	r7, sp, #0
 1034              		.cfi_def_cfa_register 7
 767:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     return(CPUbasepriGet());
 1035              		.loc 1 767 0
 1036 03f8 FFF7FEFF 		bl	CPUbasepriGet
 1037 03fc 0346     		mov	r3, r0
 768:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** }
 1038              		.loc 1 768 0
 1039 03fe 1846     		mov	r0, r3
 1040 0400 80BD     		pop	{r7, pc}
 1041              		.cfi_endproc
 1042              	.LFE14:
 1044 0402 00BF     		.align	2
 1045              		.global	IntAltMapEnable
 1046              		.thumb
 1047              		.thumb_func
 1049              	IntAltMapEnable:
 1050              	.LFB15:
 769:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** 
 770:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //*****************************************************************************
 771:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //
 772:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! Enables the alternate interrupt mapping
 773:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //!
 774:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! This function enables the alternate (that is, smaller) interrupt map.
 775:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //!
 776:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! \sa See also IntAltMapDisable() and IntAltMapIsEnabled().
 777:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //!
 778:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! \return None
 779:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //
 780:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //*****************************************************************************
 781:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** void IntAltMapEnable(void)
 782:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** {
 1051              		.loc 1 782 0
 1052              		.cfi_startproc
 1053              		@ args = 0, pretend = 0, frame = 0
 1054              		@ frame_needed = 1, uses_anonymous_args = 0
 1055              		@ link register save eliminated.
 1056 0404 80B4     		push	{r7}
 1057              		.cfi_def_cfa_offset 4
 1058              		.cfi_offset 7, -4
 1059 0406 00AF     		add	r7, sp, #0
 1060              		.cfi_def_cfa_register 7
 783:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     HWREG(SYS_CTRL_I_MAP) |= SYS_CTRL_I_MAP_ALTMAP;
 1061              		.loc 1 783 0
 1062 0408 044A     		ldr	r2, .L72
 1063 040a 044B     		ldr	r3, .L72
 1064 040c 1B68     		ldr	r3, [r3]
 1065 040e 43F00103 		orr	r3, r3, #1
 1066 0412 1360     		str	r3, [r2]
 784:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** }
 1067              		.loc 1 784 0
 1068 0414 00BF     		nop
 1069 0416 BD46     		mov	sp, r7
 1070              		.cfi_def_cfa_register 13
 1071              		@ sp needed
 1072 0418 80BC     		pop	{r7}
 1073              		.cfi_restore 7
 1074              		.cfi_def_cfa_offset 0
 1075 041a 7047     		bx	lr
 1076              	.L73:
 1077              		.align	2
 1078              	.L72:
 1079 041c 98200D40 		.word	1074602136
 1080              		.cfi_endproc
 1081              	.LFE15:
 1083              		.align	2
 1084              		.global	IntAltMapDisable
 1085              		.thumb
 1086              		.thumb_func
 1088              	IntAltMapDisable:
 1089              	.LFB16:
 785:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** 
 786:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //*****************************************************************************
 787:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //
 788:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! Disable the alternate interrupt mapping
 789:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //!
 790:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! This function disables the alternate (that is, smaller) interrupt map.
 791:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //!
 792:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! \sa See also IntAltMapDisable() and IntAltMapIsEnabled().
 793:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //!
 794:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! \return None
 795:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //
 796:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //*****************************************************************************
 797:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** void IntAltMapDisable(void)
 798:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** {
 1090              		.loc 1 798 0
 1091              		.cfi_startproc
 1092              		@ args = 0, pretend = 0, frame = 0
 1093              		@ frame_needed = 1, uses_anonymous_args = 0
 1094              		@ link register save eliminated.
 1095 0420 80B4     		push	{r7}
 1096              		.cfi_def_cfa_offset 4
 1097              		.cfi_offset 7, -4
 1098 0422 00AF     		add	r7, sp, #0
 1099              		.cfi_def_cfa_register 7
 799:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     HWREG(SYS_CTRL_I_MAP) &= ~SYS_CTRL_I_MAP_ALTMAP;
 1100              		.loc 1 799 0
 1101 0424 044A     		ldr	r2, .L75
 1102 0426 044B     		ldr	r3, .L75
 1103 0428 1B68     		ldr	r3, [r3]
 1104 042a 23F00103 		bic	r3, r3, #1
 1105 042e 1360     		str	r3, [r2]
 800:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** }
 1106              		.loc 1 800 0
 1107 0430 00BF     		nop
 1108 0432 BD46     		mov	sp, r7
 1109              		.cfi_def_cfa_register 13
 1110              		@ sp needed
 1111 0434 80BC     		pop	{r7}
 1112              		.cfi_restore 7
 1113              		.cfi_def_cfa_offset 0
 1114 0436 7047     		bx	lr
 1115              	.L76:
 1116              		.align	2
 1117              	.L75:
 1118 0438 98200D40 		.word	1074602136
 1119              		.cfi_endproc
 1120              	.LFE16:
 1122              		.align	2
 1123              		.global	IntAltMapIsEnabled
 1124              		.thumb
 1125              		.thumb_func
 1127              	IntAltMapIsEnabled:
 1128              	.LFB17:
 801:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** 
 802:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //*****************************************************************************
 803:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //
 804:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! Checks to see if the Alternate Interrupt Mapping is in use
 805:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //!
 806:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! \sa See also IntAltMapDisable() and IntAltMapIsEnabled().
 807:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //!
 808:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! \return Returns \b true if the Alternate Mapping is in use and \b false
 809:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //! otherwise.
 810:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //
 811:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** //*****************************************************************************
 812:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** bool IntAltMapIsEnabled(void)
 813:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** {
 1129              		.loc 1 813 0
 1130              		.cfi_startproc
 1131              		@ args = 0, pretend = 0, frame = 0
 1132              		@ frame_needed = 1, uses_anonymous_args = 0
 1133              		@ link register save eliminated.
 1134 043c 80B4     		push	{r7}
 1135              		.cfi_def_cfa_offset 4
 1136              		.cfi_offset 7, -4
 1137 043e 00AF     		add	r7, sp, #0
 1138              		.cfi_def_cfa_register 7
 814:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     if(HWREG(SYS_CTRL_I_MAP) & SYS_CTRL_I_MAP_ALTMAP)
 1139              		.loc 1 814 0
 1140 0440 064B     		ldr	r3, .L80
 1141 0442 1B68     		ldr	r3, [r3]
 1142 0444 03F00103 		and	r3, r3, #1
 1143 0448 002B     		cmp	r3, #0
 1144 044a 01D0     		beq	.L78
 815:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     {
 816:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         return (true);
 1145              		.loc 1 816 0
 1146 044c 0123     		movs	r3, #1
 1147 044e 00E0     		b	.L79
 1148              	.L78:
 817:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     }
 818:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     else
 819:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     {
 820:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****         return (false);
 1149              		.loc 1 820 0
 1150 0450 0023     		movs	r3, #0
 1151              	.L79:
 821:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c ****     }
 822:build/openmote-cc2538_armgcc/bsp/boards/openmote-cc2538/source/interrupt.c **** }
 1152              		.loc 1 822 0
 1153 0452 1846     		mov	r0, r3
 1154 0454 BD46     		mov	sp, r7
 1155              		.cfi_def_cfa_register 13
 1156              		@ sp needed
 1157 0456 80BC     		pop	{r7}
 1158              		.cfi_restore 7
 1159              		.cfi_def_cfa_offset 0
 1160 0458 7047     		bx	lr
 1161              	.L81:
 1162 045a 00BF     		.align	2
 1163              	.L80:
 1164 045c 98200D40 		.word	1074602136
 1165              		.cfi_endproc
 1166              	.LFE17:
 1168              	.Letext0:
 1169              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 1170              		.file 3 "/usr/include/newlib/sys/_stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 interrupt.c
     /tmp/cc9ljMr9.s:20     .rodata:0000000000000000 $d
     /tmp/cc9ljMr9.s:23     .rodata:0000000000000000 g_pui32Priority
     /tmp/cc9ljMr9.s:35     .rodata:0000000000000020 g_pui32Regs
     /tmp/cc9ljMr9.s:80     .rodata:00000000000000c4 g_pui32EnRegs
     /tmp/cc9ljMr9.s:89     .rodata:00000000000000d8 g_pui32DisRegs
     /tmp/cc9ljMr9.s:98     .rodata:00000000000000ec g_pui32PendRegs
     /tmp/cc9ljMr9.s:107    .rodata:0000000000000100 g_pui32UnpendRegs
     /tmp/cc9ljMr9.s:114    .text:0000000000000000 $t
     /tmp/cc9ljMr9.s:118    .text:0000000000000000 IntDefaultHandler
     /tmp/cc9ljMr9.s:138    vtable:0000000000000000 $d
     /tmp/cc9ljMr9.s:141    vtable:0000000000000000 g_pfnRAMVectors
     /tmp/cc9ljMr9.s:149    .text:0000000000000008 IntMasterEnable
     /tmp/cc9ljMr9.s:180    .text:0000000000000020 IntMasterDisable
     /tmp/cc9ljMr9.s:211    .text:0000000000000038 IntRegister
     /tmp/cc9ljMr9.s:285    .text:0000000000000094 $d
     /tmp/cc9ljMr9.s:290    .text:000000000000009c $t
     /tmp/cc9ljMr9.s:295    .text:000000000000009c IntUnregister
     /tmp/cc9ljMr9.s:329    .text:00000000000000b8 $d
     /tmp/cc9ljMr9.s:334    .text:00000000000000c0 $t
     /tmp/cc9ljMr9.s:339    .text:00000000000000c0 IntPriorityGroupingSet
     /tmp/cc9ljMr9.s:376    .text:00000000000000e8 $d
     /tmp/cc9ljMr9.s:381    .text:00000000000000f0 $t
     /tmp/cc9ljMr9.s:386    .text:00000000000000f0 IntPriorityGroupingGet
     /tmp/cc9ljMr9.s:447    .text:0000000000000130 $d
     /tmp/cc9ljMr9.s:452    .text:0000000000000138 $t
     /tmp/cc9ljMr9.s:457    .text:0000000000000138 IntPrioritySet
     /tmp/cc9ljMr9.s:524    .text:000000000000019c $d
     /tmp/cc9ljMr9.s:528    .text:00000000000001a0 $t
     /tmp/cc9ljMr9.s:533    .text:00000000000001a0 IntPriorityGet
     /tmp/cc9ljMr9.s:573    .text:00000000000001cc $d
     /tmp/cc9ljMr9.s:577    .text:00000000000001d0 $t
     /tmp/cc9ljMr9.s:582    .text:00000000000001d0 IntEnable
     /tmp/cc9ljMr9.s:683    .text:0000000000000258 $d
     /tmp/cc9ljMr9.s:689    .text:0000000000000264 $t
     /tmp/cc9ljMr9.s:694    .text:0000000000000264 IntDisable
     /tmp/cc9ljMr9.s:795    .text:00000000000002ec $d
     /tmp/cc9ljMr9.s:801    .text:00000000000002f8 $t
     /tmp/cc9ljMr9.s:806    .text:00000000000002f8 IntPendSet
     /tmp/cc9ljMr9.s:894    .text:000000000000036c $d
     /tmp/cc9ljMr9.s:899    .text:0000000000000374 $t
     /tmp/cc9ljMr9.s:904    .text:0000000000000374 IntPendClear
     /tmp/cc9ljMr9.s:979    .text:00000000000003d4 $d
     /tmp/cc9ljMr9.s:984    .text:00000000000003dc $t
     /tmp/cc9ljMr9.s:989    .text:00000000000003dc IntPriorityMaskSet
     /tmp/cc9ljMr9.s:1023   .text:00000000000003f4 IntPriorityMaskGet
     /tmp/cc9ljMr9.s:1049   .text:0000000000000404 IntAltMapEnable
     /tmp/cc9ljMr9.s:1079   .text:000000000000041c $d
     /tmp/cc9ljMr9.s:1083   .text:0000000000000420 $t
     /tmp/cc9ljMr9.s:1088   .text:0000000000000420 IntAltMapDisable
     /tmp/cc9ljMr9.s:1118   .text:0000000000000438 $d
     /tmp/cc9ljMr9.s:1122   .text:000000000000043c $t
     /tmp/cc9ljMr9.s:1127   .text:000000000000043c IntAltMapIsEnabled
     /tmp/cc9ljMr9.s:1164   .text:000000000000045c $d
                     .debug_frame:0000000000000010 $d
                           .group:0000000000000000 wm4.0.8e445c0106ab795ab4704214cba6f089
                           .group:0000000000000000 wm4.hw_ints.h.42.85b9479f2be35b086f1bb7cbb15bc097
                           .group:0000000000000000 wm4.hw_nvic.h.42.f3b9efa2537e728866c85de74b3e5811
                           .group:0000000000000000 wm4.hw_sys_ctrl.h.39.50b4d7775c38e82076d0eb3bdc2daf82
                           .group:0000000000000000 wm4._newlib_version.h.4.ad342815780c8db09778091a421b5b5b
                           .group:0000000000000000 wm4.features.h.33.d97f2d646536517df901beeb5b9993f5
                           .group:0000000000000000 wm4._default_types.h.15.933e8edd27a65e0b69af4a865eb623d2
                           .group:0000000000000000 wm4._intsup.h.10.b82bf99f69d6a5c085fc866de0d3eb9b
                           .group:0000000000000000 wm4._stdint.h.10.7a5f60e6741af4a5594a3867d347e1f9
                           .group:0000000000000000 wm4.stdint.h.23.373a9d32a9e4c2e88fd347156532d281
                           .group:0000000000000000 wm4.stdbool.h.29.07dce69c3b78884144b7f7bd19483461
                           .group:0000000000000000 wm4.hw_types.h.67.b10589a0806dcc2d274d6fab6b736519
                           .group:0000000000000000 wm4.debug.h.41.b891e613993738d067c45a5ff528d11a
                           .group:0000000000000000 wm4.interrupt.h.41.272fc4ec0e276feb439e7974d0f77eaf

UNDEFINED SYMBOLS
CPUcpsie
CPUcpsid
CPUbasepriSet
CPUbasepriGet
